Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Mystery Box,Very mysterious,1,giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,Reversal,NORMAL,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~[;] self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BRIGHTCYAN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior?_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Scrap Kettle,Start turn: Burn yourself|(Always offered as scrap),1,,Frying Pan,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(FIRE[;]1); e.animate(~flashandshake~); if(self.getvar(~kettlesfx~) != 1) { self.setvar(~kettlesfx~[;]1); sfx(~_fire~); } },,,,self.setvar(~kettlesfx~[;]0);,,,,
Scrap Kettle_upgraded,[95%]Start turn: Roll a burning dice|(Always offered as scrap),1,,Frying Pan,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); inflictself(FIRE[;]1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Start turn: Gain [fire]2 burn|(Always offered as scrap),1,,Frying Pan,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(FIRE[;]2); e.animate(~flashandshake~); if(self.getvar(~kettlesfx~) != 1) { self.setvar(~kettlesfx~[;]1); sfx(~_fire~); } },,,,self.setvar(~kettlesfx~[;]0);,,,,
Iced Latte,Start turn: Freeze yourself|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(ICE[;]1); e.animate(~flashandshake~); if(self.getvar(~lattesfx~) != 1) { self.setvar(~lattesfx~[;]1); sfx(~_ice~); } },,,,self.setvar(~lattesfx~[;]0);,,,,
Iced Latte_upgraded,[95%]Start turn: roll an extra one|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); givedice(1);,,,,,,,
Iced Latte_downgraded,Start turn: Gain [ice]2 freeze|(Always offered as scrap),1,,Ice Cream Truck,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,if(target.hp > 0) { inflictself(ICE[;]2); e.animate(~flashandshake~); if(self.getvar(~lattesfx~) != 1) { self.setvar(~lattesfx~[;]1); sfx(~_ice~); } },,,,self.setvar(~lattesfx~[;]0);,,,,
Judgement@plants,Do [sword]<triple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_upgraded,Do [sword]<quadruple>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@plants_downgraded,Do [sword]<d6>[;] plants|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~plants~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats,Do [sword]<triple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_upgraded,Do [sword]<quadruple>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@hats_downgraded,Do [sword]<d6>[;] hat wearers|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~hats~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green,Do [sword]<triple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_upgraded,Do [sword]<quadruple>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@green_downgraded,Do [sword]<d6>[;] green things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~green~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords,Do [sword]<triple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_upgraded,Do [sword]<quadruple>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@swords_downgraded,Do [sword]<d6>[;] sword|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~swords~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields,Do [sword]<triple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_upgraded,Do [sword]<quadruple>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@shields_downgraded,Do [sword]<d6>[;] shield|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~shields~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears,Do [sword]<triple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_upgraded,Do [sword]<quadruple>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@spears_downgraded,Do [sword]<d6>[;] spear|holders take only [sword]1,2,var exceptions = Finale.getjudgementlist(~spears~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals,Do [sword]<triple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_upgraded,Do [sword]<quadruple>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@animals_downgraded,Do [sword]<d6>[;] animals|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~animals~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating,Do [sword]<triple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_upgraded,Do [sword]<quadruple>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@floating_downgraded,Do [sword]<d6>[;] things that|can float take only [sword]1,2,var exceptions = Finale.getjudgementlist(~floating~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear,Do [sword]<triple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_upgraded,Do [sword]<quadruple>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@eyewear_downgraded,Do [sword]<d6>[;] things with|eyewear take only [sword]1,2,var exceptions = Finale.getjudgementlist(~eyewear~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses,Do [sword]<triple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_upgraded,Do [sword]<quadruple>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@bosses_downgraded,Do [sword]<d6>[;] bosses|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~bosses~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1,Do [sword]<triple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_upgraded,Do [sword]<quadruple>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@level1_downgraded,Do [sword]<d6>[;]  level 1|monsters take only [sword]1,2,var exceptions = Finale.getjudgementlist(~level1~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire,Do [sword]<triple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_upgraded,Do [sword]<quadruple>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@onfire_downgraded,Do [sword]<d6>[;] firey things|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~onfire~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison,Do [sword]<triple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_upgraded,Do [sword]<quadruple>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@poison_downgraded,Do [sword]<d6>[;] poison|things take only [sword]1,2,var exceptions = Finale.getjudgementlist(~poison~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines,Do [sword]<triple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_upgraded,Do [sword]<quadruple>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@machines_downgraded,Do [sword]<d6>[;] machines|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~machines~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic,Do [sword]<triple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_upgraded,Do [sword]<quadruple>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@magic_downgraded,Do [sword]<d6>[;] magic users|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~magic~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings,Do [sword]<triple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_upgraded,Do [sword]<quadruple>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@wings_downgraded,Do [sword]<d6>[;] winged|creatures take only [sword]1,2,var exceptions = Finale.getjudgementlist(~wings~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople,Do [sword]<triple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_upgraded,Do [sword]<quadruple>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@dicepeople_downgraded,Do [sword]<d6>[;] dice|people take only [sword]1,2,var exceptions = Finale.getjudgementlist(~dicepeople~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs,Do [sword]<triple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_upgraded,Do [sword]<quadruple>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@limbs_downgraded,Do [sword]<d6>[;] creatures|with more than four limbs|take only [sword]1 damage,2,var exceptions = Finale.getjudgementlist(~limbs~); if(exceptions.indexOf(target.name) == -1) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp,Do [sword]<triple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_upgraded,Do [sword]<quadruple>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@lowhp_downgraded,Do [sword]<d6>[;] if target has|[heart]6 or less[;] take only [sword]1,2,if(target.hp > 6) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp,Do [sword]<triple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 3); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_upgraded,Do [sword]<quadruple>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d * 4); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
Judgement@fullhp_downgraded,Do [sword]<d6>[;] if target has|full health[;] take only [sword]1,2,if(target.hp < target.maxhp) { attack(d); sfx(~_judgement_hit~); } else { attack(1); bonus(d * 1000); sfx(~_judgement_miss~); },Time Stop,NORMAL,,PINK,,,,,0,NO,NO,excludefromrandomlists|curseavoid,,,,,,,,,,,,
