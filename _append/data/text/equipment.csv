Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
Snowcloud,Do [ice]<double> damage|Freeze ALL dice,2,inflict(ICE[;] ALL); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Arctic Storm,MAX3,,BRIGHTCYAN,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Smack,Do [sword]4 damage,1,attack(d); sfxdamage(target[;] d);,Pea Gun,MAX3,,RED,simplify,complicate,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_upgraded,Do [ice]<d6> damage|Inflict [shiver]Slush,1,inflict(~Slush~); sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slush Ball_downgraded,Do [ice]<d6> damage,1,sfx(~_ice~); attack(d[;] ICE); sfxdamage(target[;] d);,Slushie,ODD,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slushie,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slushie_upgraded,Inflict [shiver]3 slush,2,inflict(~Slush~[;] 3); sfx(~_ice~);,Slushie,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slushie_downgraded,Inflict [shiver]1 slush,2,inflict(~Slush~); sfx(~_ice~);,Slushie,REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Freezer,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Freezer_upgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Freezer_downgraded,In [jinx]<d6> turns[;]|freeze [ice]20 dice on self,1,jinx(~Freezer~[;]~Freeze [ice]%VAR% dice~[;]~Freeze [ice]%VAR% Dice~[;]~inflict(\~ice\~[;]%VAR%); sfx(\~_ice\~);~[;]self[;]self[;]d[;](20)); sfx(~_thinghappens~);,Refrigerator,MIN3,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Cold Cut,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_upgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Cold Cut_downgraded,Do [ice] 7 damage,2,sfx(~_ice~); attack(7[;] ICE); sfxdamage(target[;] 7);,Flash Freeze,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane Spear,Do [sword]<d6> damage|Gain [regen]1 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,change_power,change_power,,,2,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_upgraded,Do [sword]<d6> damage|Gain [regen]2 regen|,2,attack(d); sfxdamage(target[;] d); inflictself(~Regen~); sfx(~_cure~);,Candy Spear,ODD,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Candy Cane Spear_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d);,Candy Spear,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Vacation,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_upgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Christmas Vacation_downgraded,Flee Immediately,1,flee(); bonus(10000000000000000);,Jetpack,ODD|ODD|ODD,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit,Gain [fan]2 fan,1,inflictself(~Fan~[;] 2); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_upgraded,Gain [fan]3 fan,1,inflictself(~Fan~[;] 3); sfx(~_ice~);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
AC Unit_downgraded,Gain [fan]1 fan,1,inflictself(~Fan~); sfx(~_ice~);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,YES,NO,,,,,,,,,,,,,
Tree Shake,Receive 1-3 ornaments|Take [sword]1 dmg for each|Only on odd turns,2,var number = rand([2[;]3[;]4]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); },,NORMAL|NORMAL|NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,e.dicehistory = [];,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,if(e.dicehistory.length > 0){ var dh = e.dicehistory[0].basevalue; if(e.remainingcountdown == dh ) { bonus(9999); } else { if(e.remainingcountdown <= dh) { bonus(-10 * dh); } else if(e.remainingcountdown  == dh) { bonus(10 * dh); } } e.dicehistory = []; },,,,,
Broken Ornament,Do [sword]<d6> damage|Inflict [bleed]1 bleed|[gray](once per battle),1,inflict(~Bleed~); sfx(~_poison~); attack(d); sfxdamage(target[;] d);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Tree Shake_upgraded,Receive 3-5 ornaments|Take [sword]1 dmg for each|Only on odd turns,2,var number = rand([3[;]4[;]5]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); },,NORMAL|NORMAL,9,GREEN,,,,,0,YES,NO,,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Tree Shake_downgraded,Receive 1-3 ornaments|Take [sword]1 dmg for each|Only on odd turns,2,var number = rand([1[;]2[;]3]); sfx(~_thinghappens~); while(number >= 1) { giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false); attackself(1); sfxdamage(target[;] 1); number--; } if(self.spaceleft() <= 2){ bonus(-10000); },,NORMAL|NORMAL|NORMAL|NORMAL,,GREEN,,,,,0,YES,NO,,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Nutcracker_upgraded,Do [sword]<d6> damage|Triple if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 3); sfxdamage(target[;] d*3); } else { attack(d); sfxdamage(target[;] d); },,MAX5,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Nutcracker_downgraded,Do [sword]<d6> damage|Double if enemy is male,2,var namelist = [~Drake~[;]~Wicker Man~[;]~Snowman~[;]~Hothead~[;]~Wolf Puppy~[;]~Bully~[;]~Elf~[;]~Thief~[;]~Warrior~[;]~Buster~[;]~Cactus~[;]~Copycat~[;]~Cornelius~[;]~Cowboy~[;]~Fireman~[;]~Frog~[;]~Gargoyle~[;]~Handyman~[;]~Loud Bird~[;]~Magician~[;]~Pirate~[;]~Rat King~[;]~Rotten Apple~[;]~Rose~[;]~Skeleton~[;]~Sneezy~[;]~Space Marine~[;]~Sterohead~[;]~Sticky Hands~[;]~Vacuum~[;]~Warlock~[;]~Wizard~[;]~Yeti~[;]~Wisp~]; var doubledmg = false; for(name in namelist) { if(target.name == name) { doubledmg = true; break; } } if(doubledmg) { attack(d * 2); sfxdamage(target[;] d*2); } else { attack(d); sfxdamage(target[;] d); },,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want,Do [sword]3 damage|Per [song]song on self|Lose all song,2,if(getstatusself(~Song~) > 4) { bonus(10000); } attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,10,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
All I Want_upgraded,Do [sword]3 damage|Per [song]song on self|Lose all song,1,if(getstatusself(~Song~) > 4) { bonus(10000); } attack(getstatusself(~Song~)*3); sfxdamage(target[;] getstatusself(~Song~)*3); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,8,RED,,,,,0,NO,NO,,,,,,,,,,,,,
All I Want_downgraded,Do [sword]2 damage|Per [song]song on self|Lose all song,2,attack(getstatusself(~Song~)*2); sfxdamage(target[;] getstatusself(~Song~)*2); removestatusself(~Song~[;] ALL); sfx(~_song~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Sing,Do [weaken]<d6> damage|Gain [song]3 song|On 8[;]gain 2 more,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 3); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sing_upgraded,Do [weaken]<d6> damage|Gain [song]5 song|On 8[;]gain 2 more,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~[;] 5); sfx(~_song~); if(d == 8) inflictself(~Song~[;] 2);,,MAX4|MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sing_downgraded,Do [weaken]<d6> damage|Gain [song]song,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~); inflictself(~Song~); sfx(~_song~);,,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Mic Drop,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Mic Drop_upgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Mic Drop_downgraded,Do [sword]<double> damage|Halve your song count,1,removestatusself(~Song~[;] getstatusself(~Song~) / 2); attack(d*2); sfxdamage(target[;] d*2);,,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Fire Ornament,Do [sword]<d6> damage|Inflict [fire]1 burn|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(FIRE); sfx(~_fire~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowflake Ornament,Do [sword]<d6> damage|Inflict [ice]1 freeze|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Sharp Ornament_upgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,NORMAL|FREE4,,RED,,,,,0,NO,YES,decor,,,,,,,,,,,,
Toxic Ornament,Do [sword]<d6> damage|Inflict [poison]2 poison|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(POISON[;]2); sfx(~_poison~);,,NORMAL,,PURPLE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Cursed Ornament,Do [sword]<d6> damage|Inflict [curse]1 curse|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(CURSE); sfx(~_curse~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star,Do [sword]7 damage|Inflict [blind]3 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,change_power,change_power,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_upgraded,Do [sword]12 damage|Inflict [blind]3 blind,1,attack(12); sfxdamage(target[;] 12); inflict(BLIND[;] 3); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Golden Star_downgraded,Do [sword]7 damage|Inflict [blind]1 blind,1,attack(7); sfxdamage(target[;] 7); inflict(BLIND[;] 1); sfx(~_blind~); bonus(100);,,COUNTDOWN,7,YELLOW,,,,,0,NO,YES,decor,,,,,,,,,,,,
Wind Ornament,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Heavy Ornament,Do [sword]<d6> damage|Inflict [weaken]1 weaken|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(WEAKEN); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Electric Ornament,Do [sword]<d6> damage|Inflict [shock]1 shock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(SHOCK); sfx(~_shock~);,,NORMAL,,YELLOW,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Chain Ornament,Do [sword]<d6> damage|Inflict [lock]1 lock|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(LOCK); sfx(~_lock~);,,NORMAL,,GREY,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Armor Ornament,Do [sword]<d6> damage|Gain [reduce]1 reduce|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(REDUCE); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Barricade Ornament,Do [sword]<d6> damage|Gain [shield]4 shield|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(SHIELD[;] 4); sfx(~_shield~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Boomerang Ornament,Do [sword]<d6> damage|Return the dice|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); givedice(d); sfx(~_metals~);,,NORMAL,,RED,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Mini Christmas Tree,Do [sword]<d6> damage|Gain an Ornament|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Snowglobe Ornament,Do [sword]<d6> damage|Inflict [shiver]1 slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Food Ornament,Do [sword]<d6> damage|Heal [heal]3 hp|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); attackself(-3); sfx(~_heal~);,,NORMAL,,GREEN,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Repeating Ornament,Do [sword]<d6> damage|Do it again in [jinx]2 turns|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); bonus(d * 20); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,NORMAL,,PINK,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Slide,Do [sword]<d6> damage|On 8[;] freeze a dice,1,attack(d); if(d == 8) inflict(ICE); if(d >= 8) { sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Slide_upgraded,Do [sword]<d6> damage|On 8[;] freeze 2 dice,1,attack(d); if(d == 8) inflict(ICE[;] 2); if(d >= 8) { sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Slide_downgraded,Do [sword]<d6> damage|On 4[;] freeze a dice,1,attack(d); if(d == 4) inflict(ICE); if(d >= 4) { sfx(~_ICE~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX2|MAX2,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Downplayed Ornament,Do [weaken]<d6> damage|Inflict [powerdown]2 power down|[gray](once per battle),1,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(~Powerdown~[;] 2); sfx(~_weaken~);,,NORMAL,,ORANGE,add2,complicate,,,0,NO,YES,decor,,,,,,,,,,,,
Card Reroll,Rerolls all random cards,2,self.destroyallequipment(); giveequipment([~Short Sword~][;]true[;]false); giveequipment([~Card Reroll~][;]true[;]false); giveequipment(rand(getequipmentlist(null[;][][;][~alternateversion~[;]~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~]))[;] -1); giveequipment(rand(getequipmentlist(null[;][][;][~alternateversion~[;]~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~]))[;] -1); sfx(~_thinghappens~);,,COUNTDOWN,6,,,noeffect,,,0,YES,NO,shockavoid|weakenavoid|weakenimmune|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Palm Christmas Tree,Gain an Ornament,2,sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][~decor~][;][]))[;]true[;]false);,,COUNTDOWN,10,GREEN,reducesize,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Frozen Claw,Do [ice]<d6> damage|inflict [ice]1 freeze,1,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,MAX3,,BRIGHTCYAN,add2,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL|FREE2,,BRIGHTCYAN,add3,change_power,,,0,NO,NO,,,,,,,,,,,,,
Frozen Slash_downgraded,Do [ice]<d6> damage|inflict [ice]1 Freeze,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Self Consume,Heal [heal]<d6> health|In [jinx]<d6> turns[;]|take [sword]3 damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]d[;]3); sfx(~_thinghappens~);,,MIN3,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_upgraded,Heal [heal]<d6> health|In [jinx]<d6> turns[;]|take [sword]1 damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]d[;]1); sfx(~_thinghappens~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Self Consume_downgraded,Heal [heal]<d6> health|In [jinx]<d6> turns[;]|take [sword]6 damage,1,attackself(-d); sfx(~_heal~); jinx(~Consume~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]d[;]6); sfx(~_thinghappens~);,,MIN3,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Gumdrop Throw,Do [fire]6 damage|Inflict [heart]2 Too Sweet,1,attack(6[;] FIRE); sfxdamage(target[;] 6); inflict(~Too Sweet~[;] 2); sfx(~_cure~);,,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Gumdrop Throw_downgraded,Do [fire]5 damage|Inflict [heart]1 Too Sweet,1,attack(5[;] FIRE); sfxdamage(target[;] 5); inflict(~Too Sweet~); sfx(~_cure~);,,COUNTDOWN,12,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,8,RED,change_power,changetotal12,,,0,NO,NO,,,,,,,,,,,,,
Candy Cane_upgraded,Do [sword]6 damage|Returns a dice,2,var returndice = rand([actualdice[0].basevalue[;]actualdice[1].basevalue]); givedice(returndice); attack(6); sfxdamage(target[;] 6);,,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Gift Bag,Gives 3 toys|Only on odd turns,2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,change_power,change_power,,,0,YES,NO,shockimmune|curseavoid|cannotreuse,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Gift Bag_upgraded,Gives 4 toys|Only on odd turns,2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~);,,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,YES,NO,shockavoid|curseavoid|cannotreuse,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Gift Bag_downgraded,Gives 2 toys|Only on odd turns,2,giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); giveequipment(rand(getequipmentlist(null[;][~toy~][;][]))[;]true[;]false); sfx(~_thinghappens~);,,MAX5|MIN2|MIN2|MAX5,,RED,,,,,0,YES,NO,,,,,if(turn % 2 == 1) { e.availablethisturn = true; } else { e.availablethisturn = false; e.unavailabletext = e.displayname + e.namemodifier; e.unavailabledetails = [~Unavailable (Even Turn)~]; },,,,,,,,
Train,Do [sword]<d6> damage|Gain [dodge]1 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,change_power,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Train_upgraded,Do [sword]<d6> damage|Gain [dodge]2 dodge|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflictself(DODGE[;] 2); sfx(~_dodge~);,,NORMAL|NORMAL,,YELLOW,,,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car,Do [sword]10 damage|[gray](once per battle),1,attack(10); sfxdamage(target[;] 10);,,COUNTDOWN,9,,halfcountdown,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Wind Up Car_downgraded,Do [sword]5 damage|[gray](once per battle),1,attack(5); sfxdamage(target[;] 5);,,COUNTDOWN,9,,,,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE3,,RED,add4,change_power,,,0,NO,YES,toy,,,,,,,,,,,,
Nerf Gun_downgraded,Do [sword]<d6> damage|[gray](once per battle),1,attack(d); sfxdamage(target[;] d);,,MAX5|FREE1,,RED,,,,,0,NO,YES,toy,,,,,,,,,,,,
Candy Stockings,Heal [heal]<double> for [jinx]3 turns,1,for(i in 1...4) { jinx(~Candy Stocking~[;]~heal [heal]%VAR%x2 health~[;]~heal [heal]%VAR%x2 health~[;]~attack(-%VAR% * 2);~[;]self[;]self[;]i[;]d); },,MAX3,,GREEN,increaserange,decreaserange,,,0,YES,YES,toy,,,,,,,,,,,,
Toy Phone,Do [sword]<d6> damage|in 2 turns[;] do [sword]<double> damage|[gray](once per battle),1,jinx(~Telephone~[;]~take [sword]2x%VAR% damage~[;]~Take [sword]2x%VAR% damage~[;]~attack(%VAR% * 2); sfxdamage(null[;]%VAR% * 2);~[;]target[;]self[;]2[;]d); attack(d); sfxdamage(target[;]d); sfx(~_thinghappens~);,,MAX4,,PINK,increaserange,decreaserange,,,0,NO,YES,toy,,,,,,,,,,,,
Slushie Maker,Do [ice]<d6> damage[;]|freeze 1 dice[;] inflict [shiver]Slush|[gray](once per battle),1,attack(d); sfxdamage(target[;] d); inflict(~Slush~); inflict(ICE); sfx(~_ice~);,,NORMAL|FREE4,,BRIGHTCYAN,add5,complicate,,,0,NO,YES,toy,,,,,,,,,,,,
Desk Fan,Heal [heal]<d6> health|Gain [fan]3 fan|[gray](once per battle),1,inflictself(~Fan~[;] 3); sfx(~_ice~); attackself(-d); sfx(~_heal~);,,NORMAL,,BRIGHTCYAN,add2,complicate,,,0,YES,YES,toy,,,,,,,,,,,,
Bag Hit,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] d);,,MAX3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Bag Hit_upgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;] d);,,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Thieving Tools@spanner,Combine both dice|Change Tools,2,givedice(d); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@bump,+1 to dice value|Change Tools on 2nd use|,2,givedice(d+1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@nudge,-1 to dice value|Change Tools on 2nd use|,2,givedice(d-1); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MIN2,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@pick,Split dice into 2|Change Tools on 2nd use|,2,givedice(split(d)[;] ~splitdice~); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@dupli,Duplicate dice|Change Tools on 2nd use|,2,givedice([d[;]d]); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@vise,Get 2 of the difference|Change Tools on 2nd use|,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,,NORMAL|NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@roll,Reroll this dice|Change Tools on 2nd use|,2,givedice(); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,NORMAL,,GRAY,,,,,2,YES,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thieving Tools@screw,Do [sword]<d6> damage|Change Tools on 2nd use|,2,attack(d); sfxdamage(target[;] d); trace(e.usesleft); if(e.usesleft == 0) { var a = new elements.Skill(~thiefyboi~); var act = new motion.actuators.SimpleActuator(null[;] 0.1[;] null); act.onRepeat(a.execute[;] [self[;]target]); act.move(); },,MAX5,,GRAY,,,,,2,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Backhand,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX3|MIN3,,RED,change_power,changetotal9,,,0,NO,NO,,,,,,,,,,,,,
Backhand_upgraded,Do [fire]<d6> damage|Inflict [sting]Sting,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~); inflict(~Sting~);,,MAX4|MIN4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Segway,Gain [dodge]1 dodge,2,inflictself(DODGE); sfx(~_dodge~);,,COUNTDOWN,12,YELLOW,threequartercountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Climate Change,Inflict enemy's [fire] amount|as [ice][;] and vice versa,2,inflict(ICE[;] getstatus(FIRE)); inflict(FIRE[;] getstatus(ICE)); sfx(~_ice~); sfx(~_fire~);,Blue Flame,COUNTDOWN,6,RED,reducesize,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Contained Blast,Do [fire]2 dmg per [fire] on enemy|Do [ice]2 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 2[;] FIRE); attack(getstatus(ICE) * 2[;] ICE); sfxdamage(target[;] getstatus(ICE) * 2); sfxdamage(target[;] getstatus(FIRE) * 2);,Blue Flame,EVEN|EVEN,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Contained Blast_upgraded,Do [fire]3 dmg per [fire] on enemy|Do [ice]3 dmg per [ice] on enemy,2,attack(getstatus(FIRE) * 3[;] FIRE); attack(getstatus(ICE) * 3[;] ICE); sfxdamage(target[;] getstatus(ICE) * 3)); sfxdamage(target[;] getstatus(FIRE) * 3));,Firebomb,NORMAL|NORMAL,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Heavily Wrapped Gift,Contains...|The Best Item in the Game,2,giveequipment(~The Best Item in the Game~[;] true[;] false[;] e); sfx(~_thinghappens~);,,COUNTDOWN,50,YELLOW,halfcountdown,noeffect,,,0,YES,NO,,,e.remainingcountdown = self.getvar(~count~);,self.setvar(~count~[;]e.remainingcountdown);,,,,,,,,,
The Best Item in the Game,Drain [heart]<double>,2,drain(d * 2); sfx(~_drain~);,,MAX5,,RED,simplify,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Present Shotgun,Do [sword]<double> damage|Gain a random item,2,attack(d * 2); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~]))[;] -1); sfxdamage(target[;] d * 2);,,MAX3,,RED,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Present Shotgun_downgraded,Do [sword]<d6> damage|Gain a random item,2,attack(d); sfx(~_thinghappens~); giveequipment(rand(getequipmentlist(null[;][][;][~skillcard~[;]~excludefromrandomlists~[;]~robotonly~[;]~witchonly~[;]~onceperbattle~]))[;] -1); sfxdamage(target[;] d);,,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Combat Bump,Dice value +1|,2,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,,,,,,2,YES,NO,shockavoid|weakenavoid|curseavoid|cannotsteal,,,,,,,,,,,,
Combat Roll@witch,Reroll a dice|[gray](Reuseable),2,givedice();,,NORMAL,,,,,,,2,YES,NO,cannotsteal|excludefromrandomlists|shockavoid|weakenavoid|curseavoid,,,,,,,,,,,,
Peck,Do [sword]1 damage,1,attack(1); sfxdamage(target[;] 1);,Pea Gun,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,
Peck_upgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Pea Gun,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,,,,,,,,,,,,,
Final Frost[],[blue]frost|Do [ice]2 damage|per [ice] on enemy,2,attack(getstatus(ICE) * 2); sfxdamage(target[;] getstatus(ICE) * 2); sfx(~_ice~);,,,,BLUE,,noeffect,,,0,NO,NO,finale|powercard,,,,,,,,,,,,
Warm Coat,Do [fire]2 damage,1,attack(2[;] FIRE); sfxdamage(target[;] 2);,,REQUIRE1,,RED,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Warm Coat_upgraded,Do [fire]4 damage,1,attack(4[;] FIRE); sfxdamage(target[;] 4);,,REQUIRE1,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Christmas Dagger,Do [sword]<d6> damage|([red]Ch[green]an[red]ge[green]s[red] [green]C[red]o[green]lo[red]r[green]s)|,1,attack(d); sfxdamage(target[;] d); e.changecolour(rand([~RED~[;]~GREEN~]));,Pea Gun,MAX3,,RED,change_power,decreaserange,,,-1,NO,NO,,,,,e.changecolour(rand([~RED~[;]~GREEN~]));,,e.changecolour(rand([~RED~[;]~GREEN~]));,e.changecolour(rand([~RED~[;]~GREEN~]));,,,,,
Christmas Dagger_upgraded,Do [sword]<d6> damage|([red]Ch[green]an[red]ge[green]s[red] [green]C[red]o[green]lo[red]r[green]s)|,1,attack(d); sfxdamage(target[;] d); if (e.equipmentcol == 2) { inflict(~FIRE~); sfx(~_fire~); } else if (e.equipmentcol == 3) { attackself(-3); sfx(~_heal~); },Pea Gun,MAX3,,RED,,,,,-1,NO,NO,,,,,e.changecolour(rand([~RED~[;]~GREEN~]));,,e.changecolour(rand([~RED~[;]~GREEN~]));,e.changecolour(rand([~RED~[;]~GREEN~]));,,,,,
Time Travel,Switches Ghost types,1,var ghost = rand([~Ghost of Future~[;]~Ghost of Present~[;]~Ghost of Past~]); self.name = ghost; sfx(~_thinghappens~); bonus(1000000000000000000000000); if(self.name == ~Ghost of Future~) { self.destroyallequipment(); giveequipment([~Space Food~][;]true[;]false); giveequipment([~Laser Rifle~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); } if(self.name == ~Ghost of Present~) { self.destroyallequipment(); giveequipment([~Global Warming~][;]true[;]false); giveequipment([~Pollution~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); } if(self.name == ~Ghost of Past~) { self.destroyallequipment(); giveequipment([~Tap Dance~][;]true[;]false); giveequipment([~Lead Pipe Hit~][;]true[;]false); giveequipment([~Time Travel~][;]true[;]false); },,COUNTDOWN,2,GREEN,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Lead Pipe Hit,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE4,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Lead Pipe Hit_upgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX4|FREE6,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance,Do [sword]<d6> damage|on 6 or 2[;] gain [dodge],1,attack(d); if(d == 6) inflictself(DODGE); if(d == 6) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_upgraded,Do [sword]<d6> damage|on 8 or 2[;] gain [dodge],1,attack(d); if(d == 8) inflictself(DODGE); if(d == 8) { sfx(~_dodge~[;]~~[;]0.2); } if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX5|MAX5,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Tap Dance_downgraded,Do [sword]<d6> damage|on 2[;] gain [dodge],1,attack(d); if(d == 2) inflictself(DODGE); if(d == 2) { sfx(~_dodge~[;]~~[;]0.2); } sfxdamage(target[;]d);,,MAX4|MAX4,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Space Food,Heal [heal]2 health|If excess[;] do [sword]4 damage|,2,attackself(-2); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(4); sfxdamage(target[;]4); },,ODD,,GREEN,change_power,doublerequirements,,,2,YES,NO,,,,,,,,,,if(self.hp + 2 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Space Food_upgraded,Heal [heal]4 health|If excess[;] do [sword]6 damage|,2,attackself(-4); sfx(~_heal~); if(self.hp + 2 > self.maxhp) { attack(6); sfxdamage(target[;]6); },,ODD,,GREEN,,,,,2,YES,NO,,,,,,,,,,if(self.hp + 4 > self.maxhp) { e.castdirection = -1; } else { e.castdirection = 1; },,,
Laser Rifle,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,ODD|FREE1,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Laser Rifle_upgraded,Do [sword]<d6> damage|,1,attack(d); sfxdamage(target[;] d);,,EVEN|FREE1,,RED,,,,,2,NO,NO,,,,,,,,,,,,,
Pollution,Inflict 3[poison] poison,2,inflict(POISON[;] 3); sfx(~_poison~);,,MAX2|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Global Warming,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX3,,RED,change_power,removereusable,,,2,NO,NO,,,,,,,,,,,,,
Global Warming_upgraded,Do [fire]<d6> +<timesused> damage|Add 1 for each time used|,1,attack(d[;] FIRE); sfxdamage(target[;] d); attack(e.timesused+1);,,MAX4,,RED,,,,,3,NO,NO,,,,,,,,,,,,,
Pollution_upgraded,Inflict 5[poison] poison,2,inflict(POISON[;] 5); sfx(~_poison~);,,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,,,,,,,,,,,,,
BOOO!,Enemy loses [song]1,1,removestatus(~Song~); sfx(~_song~);,,COUNTDOWN,10,ORANGE,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
BOOO!_upgraded,Enemy loses [song]2,1,removestatus(~Song~[;] 2); sfx(~_song~);,,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Cycle,Choose another card|,2,,,NORMAL,,GRAY,,,,,-1,YES,NO,cannotsteal,,self.setvar(~wj-initialized~[;]0);,for(eq in self.equipment) { eq.removetag(~chained~); eq.removetag(~alreadyunchained~); },runscript(~christmasspecial/jester_beforestartturn~[;][self]);,,if(!onlimit) { var eq = self.lastequipmentused; if((!eq.hastag(~immunetochain~)) && (eq.usesleft == 0 # eq == e)) runscript(~christmasspecial/jester_dochaining~[;][self]); },,,,,,
Ice Skates,Gain [dodge]Dodge[;] but get|[ice]Frozen next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Ice Skates~[;]~receive [ice]1 freeze~[;]~Receive [ice]1 freeze~[;]~inflictself(ICE); sfx(\~_ice\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,BRIGHTCYAN,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Fire Boots,Gain [dodge]Dodge[;] but get|[fire]Burned next turn,1,inflictself(DODGE); sfx(~_dodge~); sfx(~_thinghappens~[;]~~[;]0.2); jinx(~Fire Boots~[;]~receive [fire]1 burn~[;]~Receive [fire]1 burn~[;]~inflictself(FIRE); sfx(\~_fire\~);~[;]self[;]self[;]1[;]0);,Quick Thinking,DOUBLES|DOUBLES,,RED,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Shiny Sword,Do [sword]<d6> damage. On start|of turn[;] if active[;] do [sword]3,2,attack(d); sfxdamage(target[;]d);,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,,if(e.availablethisturn) { e.animate(~flashandshake~); attack(3); sfxdamage(target[;]3); },,,,,,,
Chaingun,Do [sword]<d6> dmg[;] cycle cards|(ignores cycle),1,attack(d); sfxdamage(target[;]d); runscript(~christmasspecial/jester_dochaining~[;][self]);,,MAX5,,GRAY,simplify,complicate,,,0,NO,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Chainbump,Dice value +1|(ignores cycle),1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,change_power,complicate,,,0,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Chainbump_upgraded,Dice +1 (ignores cycle)|,1,if(d >= 6){ givedice([6[;] 1]); } else { givedice(d + 1); },,NORMAL,,GRAY,,,,,2,YES,NO,immunetochain|excludefromrandomlists,,,,,,,,,,,,
Christmas Revolver,Do [sword]<var:6rolls> damage|+3 per 6 rolled,2,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname); attack(arrayname); sfxdamage(target[;] arrayname);,,REQUIRE6,,RED,simplify,doublerequirements,,,0,NO,NO,,,,,,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,var arrayname = 0; for(dicename in self.dicepool) { if(dicename.basevalue == 6) { arrayname += 3; } } self.setvar(~6rolls~[;]arrayname);,,,,,
Christmas Pistol,Do [sword]2 damage|On <var:randomdice> return dice|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Christmas Pistol_upgraded,Do [sword]2 damage|On <var:randomdice> return dice likely on 6|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,5,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6[;]6[;]6[;]6]));,,,,,,,,,,
Christmas Pistol_downgraded,Do [sword]2 damage|On <var:randomdice> return dice|,1,if(d == self.getvar(~randomdice~)){ givedice(d); }  self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6])); attack(2); sfxdamage(target[;]d);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,,,self.setvar(~randomdice~[;]rand([1[;]2[;]3[;]4[;]5[;]6]));,,,,,,,,,,
Pip Master,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_upgraded,Reroll a dice|Do [sword]2 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack((large - small) * 2); sfxdamage(target[;] (large - small) * 2); },,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,givedice();
Pip Master_downgraded,Reroll a dice|Do [sword]1 per pip changed,1,var rand = rand([1[;]2[;]3[;]4[;]5[;]6]); givedice(rand); if (rand != d) { var large = d; var small = rand; if(rand > d) { large = rand; small = d; } attack(large - small); sfxdamage(target[;] large - small); },,MIN4,,GREEN,,,,,0,NO,NO,,,,,,,,,,,,,givedice();
Doom and Gloom,Do [sword]<d6> damage|[80%]On even inflict [skipturn]Timely_Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Doom and Gloom_upgraded,Do [sword]<d6> damage|[80%]On even inflict [skipturn]2 Timely_Demise,2,attack(d); if(d % 2 == 0) inflict(~Demise~[;] 2); if(d % 2 == 1) { sfxdamage(target[;]d); } else { sfxdamage(target[;]d); sfx(~_curse~[;]~~[;]0.2); },Plasma Gun,NORMAL,,BLACK,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas,Do [sword]3 damage|Inflict [skipturn]3 Timely Demise,1,attack(3); sfxdamage(target[;]3); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 3);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
12 Days Of Christmas_upgraded,Do [sword]4 damage|Inflict [skipturn]4 Timely Demise,1,attack(4); sfxdamage(target[;]4); sfx(~_curse~[;]~~[;]0.2); inflict(~Demise~[;] 4);,,COUNTDOWN,10,BLACK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
[BEGIN REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Gatling Pea,Do [sword]2 damage[;] roll a 1|,1,attack(2); sfxdamage(target[;]2); givedice(1);,Pea Gun,COUNTDOWN,3,RED,change_power,change_power,,,-1,NO,NO,rs,,,,,,,,,,,,
Gatling Pea_upgraded,[sword]2 damage[;] return excess|,1,var dice = self.getvar(~dice~); attack(2); sfxdamage(target[;]2); if(dice > 0) { givedice(dice); };,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,self.setvar(~dice~[;]e.dicehistory[e.dicehistory.length-1].basevalue - e.remainingcountdown); trace(~excess: ~ + self.getvar(~dice~) + ~ cd: ~ + e.remainingcountdown);,,,,,
Gatling Pea_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,,,,,,
Bloody Drill,Do [sword]<d6> damage[;] drain|[heart]1 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_upgraded,Do [sword]<d6> damage[;] drain|[heart]2 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu,Inflict [ice]2 freeze|On double 3: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d == 3) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Frosty Bufu_upgraded,Inflict [ice]2 freeze|On double odd: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d % 2 == 1) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu_downgraded,Do [ice]6 damage,1,attack(6[;]ICE); sfxdamage(target[;]6);,Arctic Storm,REQUIRE3|REQUIRE3,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi,Inflict [fire]2 burn|On double 3: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d == 3) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Burning Agi_upgraded,Inflict [fire]2 burn|On double odd: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d % 2 == 1) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi_downgraded,Do [fire]6 damage,1,attack(6[;]FIRE); sfxdamage(target[;]6);,Hellfire,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 3[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 3) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_upgraded,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 5[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 5) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX5,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_downgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken,1,attack(d[;]WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Quake Sigma,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX3|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,rs,1,,,,,,,,,,,
Quake Sigma_upgraded,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler,Inflict [shock]<d6> shock[;]|reroll the dice,2,inflict(SHOCK[;]d); sfx(~_shock~); givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,Zap,MAX3,,YELLOW,change_power,decreaserange,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler_upgraded,Inflict [shock]<d6> shock[;]|reroll with higher value,2,inflict(SHOCK[;]d); sfx(~_shock~); var finalv = []; for(dicev in (d+1)...7) { finalv.push(dicev); }; givedice(rand(finalv));,Zap,MAX3,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade,Do [sword]<d6> damage[;]|on 1 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 5 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX4|FREE1,,ORANGE,change_power,change_power,weaken,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_upgraded,Do [sword]<d6> damage[;]|on 1 or 6[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 7 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_downgraded,Do [sword]<d6> damage[;]|on 2 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 2 # d == 4) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX2|MAX2,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch,Do [sword]2 damage 3-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_upgraded,Do [sword]2 damage 5-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_downgraded,Do [sword]2 damage 3-6 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch,Do [sword]7 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(14); sfxdamage(target[;]14); self.textparticle(~Success!~); } else { attack(7); sfxdamage(target[;]7); };,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Lucky Punch_upgraded,Do [sword]9 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(18); sfxdamage(target[;]18); self.textparticle(~Success!~); } else { attack(9); sfxdamage(target[;]9); };,Power Up,NORMAL|NORMAL,9,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch_downgraded,Do [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele,Do [shock]<d6> damage[;]|on 5[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 5) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_downgraded,Do [shock]<d6> damage|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_upgraded,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 6) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Worm Scarf,At the start of each turn[;]|gain [reduce]1 reduce,1,inflictself(REDUCE); sfx(~_magic~);,Protection,,,PURPLE,change_power,change_power,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,1,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_upgraded,At the start of each turn[;]|gain [reduce]1 reduce[;] [thorns]1 thorn,1,inflictself(REDUCE); inflictself(THORNS); sfx(~_magic~);,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Worm Scarf_downgraded,No effect,1,,Protection,,,PURPLE,,,,,0,YES,NO,cannotreuse|excludefromrandomlists|rs,,,,,,,,,,,,
Melon Cauldron,Do [sword]3 damage[;]|get two new dice,1,attack(3); sfxdamage(target[;]3); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_upgraded,Do [ice]3 dmg[;] +[ice]1 freeze[;]|get two new dice,1,attack(3[;] ICE); inflict(ICE); sfxdamage(target[;]3); sfx(~_ice~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;] rand([1[;]2[;]3[;]4[;]5[;]6])]);
Melon Cauldron_downgraded,Do [sword]3 damage[;]|get a new dice,1,attack(3); sfxdamage(target[;]3); givedice();,Random Roll,REQUIRE6,,GREEN,,,,,0,NO,NO,rs,,,,,,,,,,,,givedice();
Eternity Cannon,Do [sword]5 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(5); sfxdamage(target[;]5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,change_power,change_power,,,0,NO,YES,rs,2,,,,,,,,,,,
Eternity Cannon_upgraded,Do [sword]5 damage now[;] and|at the start of each turn,1,attack(5); sfxdamage(target[;]5); inflictself(~eternitycannon~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Eternity Cannon_downgraded,Do [sword]3 damage now[;] and|at the start of each turn|[gray](once per battle),1,attack(3); sfxdamage(target[;]3); inflictself(~eternitycannondowngraded~); sfx(~_thinghappens~);,Plasma Gun,COUNTDOWN,20,YELLOW,,,,,0,NO,YES,rs,,,,,,,,,,,,
Enchanted Missile,Do [sword]<evar:enchantedmissiledmg> dmg on start turn|Use to add [sword]3,1,e.setvar(~enchantedmissiledmg~[;]e.getvar(~enchantedmissiledmg~)+3); sfx(~_mana~);,Plasma Gun,EVEN|EVEN,,YELLOW,simplify,change_power,,,0,YES,NO,excludefromrandomlists|rs,1,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,var enchdmg = e.getvar(~enchantedmissiledmg~); if(enchdmg > 0) { attack(enchdmg); sfxdamage(target[;]enchdmg); e.animate(~flashandshake~); },,,,,,,
Enchanted Missile_downgraded,Do [sword]5 damage,1,attack(5); sfxdamage(target[;]5);,Plasma Gun,EVEN|EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|rs,,e.resetvar(~enchantedmissiledmg~);,e.resetvar(~enchantedmissiledmg~);,,,,,,,,,
[END REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Brace,Gain [shield]2 shield[;]|on 4[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d==4){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_requirements,change_power,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_upgraded,Gain [shield]2 shield[;]|on even[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d%2 == 0){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Electric Arc,[shock]2 damage to everyone|Return the dice,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_upgraded,[shock]2 damage to everyone|Dice value +1,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d+1);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_downgraded,[shock]1 damage to everyone|Return the dice,1,attack(1[;]SHOCK); attackself(1[;]SHOCK); sfxdamage(target[;]1); sfxdamage(self[;]1); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook,Burn [fire]<d6> dice,1,inflict(FIRE[;]d); sfx(~_fire~);,Hellfire,MAX3,,RED,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,
Matchbook_upgraded,Burn [fire]<d6> dice|Do [fire]2 damage,1,inflict(FIRE[;]d); sfx(~_fire~); attack(2[;]FIRE); sfxdamage(target[;]d);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook_downgraded,Burn a dice,1,inflict(FIRE); sfx(~_fire~);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray,Freeze [ice]<d6> dice,1,inflict(ICE[;]d); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,change_power,change_power,ice,none,0,NO,NO,gb,1,,,,,,,,,,,
Ice Tray_upgraded,Freeze [ice]<d6> dice|Do [ice]2 damage,1,inflict(ICE[;]d); sfx(~_ice~); attack(2[;]ICE); sfxdamage(target[;]2);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray_downgraded,Freeze a dice,1,inflict(ICE); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Wide Spatula,Flip this dice and|another random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } givedice(7-d); if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Wide Spatula_upgraded,Flip this dice and your|lowest remaining dice,1,var poss = []; var low = 7; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue < low){ poss.push(mydice); low = mydice.basevalue; } } givedice(7-d); if(poss.length > 0){ var rdice = poss[poss.length - 1]; rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Wide Spatula_downgraded,Flip a random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron,Gain [thorns]1 thorn[;]|get a new dice,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Cactus Cauldron_upgraded,Gain [thorns]1 thorn[;] reroll dice|,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron_downgraded,Get a new dice,1,givedice();,Needle,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
False Swipe,Do [sword]10 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(10); sfxdamage(target[;]10);,Blood Sip,COUNTDOWN,8,GREEN,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_upgraded,Do [sword]12 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(12); sfxdamage(target[;]12);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_downgraded,Do [sword]5 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(5); sfxdamage(target[;]5);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting,Do [sword]<d6> damage[;]|25% chance to add [poison]2,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_upgraded,Do [sword]<d6> damage[;]|75% chance to add [poison]2,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver,Do [sword]<d6> damage[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,PURPLE,reducesize,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_deckupgrade,Do [sword]<d6> dmg[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL|FREE1,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Pin Missile,Do [sword]1 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,change_power,change_power,,none,2,NO,NO,gb,1,,,,,,,,,,,
Pin Missile_upgraded,Do [sword]2 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(2); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,2,NO,NO,gb,,,,,,,,,,,,
Pin Missile_downgraded,Do [sword]1 damage 2-5 times,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Wave,Do [sword]<d6> damage[;]|Inflict [poison]2 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,change_power,complicate,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Wave_upgraded,Do [sword]<d6> damage[;]|Inflict [poison]3 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Caustic Cauldron,Inflict [poison]1 poison[;]|get a new dice,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,givedice();
Caustic Cauldron_upgraded,Inflict [poison]1[;] reroll dice|,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,2,NO,NO,gb,,,,,,,,,,,,givedice();
Caustic Cauldron_downgraded,Inflict [poison]1 poison,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sealing Stamp,Do [sword]4 damage|(At end of turn: do [sword]2),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,if(target.hp > 0){ attack(2); sfxdamage(target[;]2); },,,,
Sealing Stamp_upgraded,Do [sword]4 damage|(At end of turn: do [sword]3),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,if(target.hp > 0){ attack(3); sfxdamage(target[;]3); },,,,
Sealing Stamp_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Decantation,Both dice values -1[;]|roll a 2,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Decantation_upgraded,Both values -1[;] roll a 2|,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Decantation_downgraded,Both dice values -1,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror,In [jinx]2 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Fogged Mirror_upgraded,In [jinx]2 turns[;] +1 dice|,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror_downgraded,In [jinx]3 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]3[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Sludge Spear,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,2,,,,,,,,,,,
Sludge Spear_upgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,MIN4,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Spear_downgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6|REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Transporter,Duplicate part of a dice,1,var parts = split(d); givedice([d[;]parts[0]]);,Clone Device,MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Transporter_upgraded,Duplicate most of a dice,1,if(d > 1){ givedice([d[;]d-1]); } else{ givedice([d[;]d]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Transporter_downgraded,Duplicate a small|part of a dice,1,var parts = split(d); if(parts[0] < parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
[END GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Nine Iron,Deal [sword]<d6> damage|On 6[;] deal [sword]3 more,2,if(d == 6){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]3 more,2,if(d % 2 == 0){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shrug,Gain [shield]4 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]4); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_upgraded,Gain [shield]6 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]6); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_downgraded,Gain [shield]3 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Budge,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Budge_upgraded,Odd: value +1[;] Even: value -1|[grey](3 uses this turn),1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,,,,,3,YES,NO,mf,,,,,,,,,,,,
Budge_downgraded,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Asklepios,Deal [sword]6 damage|Restore [heal]3 health,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_upgraded,Deal [sword]8 damage|Restore [heal]3 health,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_downgraded,Deal [sword]3 damage|Restore [heal]3 health,2,attack(3); sfxdamage(target[;]3); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_upgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_downgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_upgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_downgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Rock Crusher,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,change_power,change_power,,,2,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_upgraded,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,4,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_downgraded,Dice value -1[;]|then split it in two,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Flame Lance,Burn [fire]all dice,1,inflict(FIRE[;]ALL); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_upgraded,Burn [fire]all dice[;] deal [fire]1|damage per dice burned,1,inflict(FIRE[;]ALL); sfx(~_fire~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]FIRE); sfxdamage(target[;]s);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_downgraded,Burn [fire]2 dice,1,inflict(FIRE[;]2); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance,Freeze [ice]all dice,1,inflict(ICE[;]ALL); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_upgraded,Freeze [ice]all dice[;] deal [ice]1|damage per dice frozen,1,inflict(ICE[;]ALL); sfx(~_ice~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]ICE); sfxdamage(target[;]s);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_downgraded,Freeze [ice]2 dice,1,inflict(ICE[;]2); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Minigun,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,change_power,change_power,,none,1,NO,NO,mf,,,,e.usesleft = turn; e.updatereuseabledescription();,,,,,,,,
Minigun_upgraded,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,,,,none,2,NO,NO,mf,,,,e.usesleft = turn+1; e.updatereuseabledescription();,,,,,,,,
Minigun_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whelm,MAX4,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shielding Potion,Gain [shield]12 shield|[gray](once per battle),2,inflictself(SHIELD[;]12); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_upgraded,Gain [shield]15 shield|[gray](once per battle),2,inflictself(SHIELD[;]15); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_downgraded,Gain [shield]8 shield|[gray](once per battle),2,inflictself(SHIELD[;]8); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Cherry Bomb,Start of turn: deal [sword]5 dmg|[gray](once per battle),1,attack(5); sfxdamage(target[;]5);,Throwing Knife,,,RED,change_power,change_power,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,1,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Cherry Bomb_upgraded,Start of turn: deal [sword]8 dmg|[gray](once per battle),1,attack(8); sfxdamage(target[;]8);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Cherry Bomb_downgraded,Start of turn: deal [sword]1 dmg|[gray](once per battle),1,attack(1); sfxdamage(target[;]1);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Sacridice,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN3,,RED,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Sacridice_upgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN2,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Sacridice_downgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN5,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Precognition,Gain a random blessing|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]self[;]1[;]d); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,donothing();,
Precognition_upgraded,Gain 2 random blessings|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; for(x in [0[;]0]){ var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]target[;]1[;]d); }; sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Precognition_downgraded,Get nothing next turn,1,jinx(~Precognition-~[;]~Do nothing~[;]~do nothing~[;]~inflict(\~nothing\~); sfx(\~_thinghappens[;]~); ~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Mass Grimoire,Activate equipment that|can take a single <slotdoubles>,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|mf,2,,,,,,,,,,,
Mass Grimoire_upgraded,Activate items that take <slotdoubles>|,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,2,YES,NO,excludefromrandomlists|mf,,,,,,,,,,,,
Mass Grimoire_downgraded,No effect,1,sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists|mf,,,,,,,,,,,,
Magnum Opus,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Magnum Opus_upgraded,Deal [sword]<d6> damage|Gain [shield]4 shield,1,attack(d); inflictself(SHIELD[;]4); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]4); sfx(~_shield~);
Magnum Opus_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Blood Pact,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blood Pact_upgraded,Lose [heart]3 health[;] then|drain [heart]<d6> health,1,pierceattackself(3); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4|FREE1,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(3); sfx(~_drain~);
Blood Pact_downgraded,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Push Knife,[sword]2[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(2); sfxdamage(target[;]2); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_upgraded,[sword]3[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(3); sfxdamage(target[;]3); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_downgraded,Deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Megabump,MIN2,,RED,,,,none,-1,NO,NO,mf,,,,,,,,,,,,
Philosopher's Stone,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_upgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Molten Core,Deal [sword]20 damage|Gain [shield]10 shield,1,attack(20); sfxdamage(target[;]20); sfx(~_magic~); inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,change_power,change_power,,,0,NO,NO,mf,2,,,,,,,,,,,inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);
Molten Core_upgraded,Deal [sword]25 damage|Gain [shield]15 shield,1,attack(25); sfxdamage(target[;]25); sfx(~_magic~); inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);
Molten Core_downgraded,Deal [sword]10 damage|Gain [shield]5 shield,1,attack(10); sfxdamage(target[;]10); sfx(~_magic~); inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);
[END FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Power Glove,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_upgraded,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_downgraded,Do [sword]<d6> damage|[80%][gray]''It's so bad!''[],1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Innovate,Get a dice you don't have,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,ncr,2,,,,,,,,,,,
Innovate_upgraded,Get a dice you don't have|,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Innovate_downgraded,Get a 4[;] if you don't have one,1,var flag = true; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue == 4) { flag = false; } } if (flag == false) { givedice(d); self.textparticle(~You've got a 4!~); } else { givedice(4); },Reroll,NORMAL,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector,Gain [shield]2 shield|[gray](single usen't),1,inflictself(SHIELD[;]2);,Safeguard,MIN3,,ORANGE,change_power,change_power,,,4,YES,NO,ncr,1,,,,,,,,,,,
Pocket Protector_upgraded,Gain [shield]3 shield|[gray](single usen't),1,inflictself(SHIELD[;]3);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector_downgraded,Gain [shield]1 shield|[gray](single usen't),1,inflictself(SHIELD[;]1);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Dime,Roll 2 sixes,2,givedice([6[;]6]); /* 'dime a dozen' */,Rollout,EVEN|EVEN,,GREEN,change_power,change_power,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_downgraded,Roll 2 sixes,2,givedice([6[;]6]);,Rollout,REQUIRE6|EVEN,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_upgraded,Roll 2 sixes|,2,givedice([6[;]6]);,Rollout,EVEN|EVEN,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Sickle,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]1 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,reducesize,change_power,,none,0,NO,NO,ncr,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Sickle_downgraded,Do [shock]<d6> damage,2,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_weakened,Do [shock]<d6> damage,1,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_deckupgrade,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]2 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK[;]2); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Lightreaver,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Lightreaver_upgraded,Deal [sword]<d6> damage. On even[;]|copy a dice for next turn,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Lightreaver_downgraded,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket,Get a new dice[;]|inflict [lock]Lock,1,givedice(); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Locket_upgraded,Get a new dice[;] do [sword]2[;]|inflict [lock]Lock,1,givedice(); attack(2); sfxdamage(target[;]2); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket_downgraded,Inflict [lock]Lock,1,inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Biohazard,Inflict [poison]<d6> poison|[gray](once per battle),2,inflict(POISON[;]d);,Anthrax,NORMAL,,PURPLE,change_power,complicate,,,0,NO,YES,ncr,,,,,,,,,,,,
Biohazard_upgraded,Inflict [poison]<d6> poison|[gray](cooldown of 3 turns),2,inflict(POISON[;]d); e.setvar(~biocooldown~[;]3);,Anthrax,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,e.setvar(~biocooldown~[;]0);,e.setvar(~biocooldown~[;]0);,if(e.getvar(~biocooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = ~On cooldown~; e.unavailabledetails = [~Available in ~ + e.getvar(~biocooldown~) + ~turns.~]; e.setvar(~biocooldown~[;]e.getvar(~biocooldown~) - 1); },,,,,,,,
Silver Sword,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Silver Sword_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Silver Sword_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Technology,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A little overbearing sometimes''[],1,attack(d);,Emulator,MAX4,,YELLOW,change_power,change_function,,,0,NO,NO,ncr,1,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Technology_upgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A modern quasi-religion''[],1,attack(d);,Emulator,NORMAL,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Technology_downgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''Technology works.''[],1,attack(d);,Emulator,MAX4,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Smoke Signal,Stash dice for next|turn[;] then return it,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~); givedice(d);,Light Switch,MIN4,,RED,simplify,complicate,,,0,YES,NO,ncr,1,,,,,,,,,,,
Loud Yelling,Weaken [weaken]2 equipment,1,inflict(WEAKEN[;]2);,Scream,REQUIRE5,,ORANGE,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Yelling_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Scream,REQUIRE5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Loud Brostep,Shock [shock]2 equipment,1,inflict(SHOCK[;]2);,Electrify,REQUIRE5,,YELLOW,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Brostep_downgraded,Shock [shock]1 equipment,1,inflict(SHOCK);,Electrify,REQUIRE5,,YELLOW,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Raw Energy,Do [vanish]<d6> damage[;]|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); /*inferno*/,Delude,NORMAL|NORMAL,,PINK,change_power,complicate,,,0,NO,NO,ncr,1,,,,,,,,,,,
Raw Energy_upgraded,Do [vanish]<d6> damage[;]|Inflict [vanish]2 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2);,Delude,NORMAL|NORMAL,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sheer Will,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); bonus(1000); /*burning light*/,Delude,MIN4,,PINK,simplify,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Sheer Will_downgraded,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~);,Delude,MAX3,,PINK,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop,Do [sword]3 damage. On 6[;]|drain [heart]2 health instead,1,if(d == 6) { drain(2); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); } /*originally 'on snap; drain 2 health instead' but you will not believe how difficult it is to *replace* the effect of a card on snap rather than adding to it: https:/* github.com/TerryCavanagh/diceydungeons.com/issues/1889*/ */,Rejuvenate,MIN3,,PINK,change_power,change_power,,none,0,NO,NO,ncr,1,,,,,,,,,,,
Bop Bop_upgraded,Do [sword]3 damage. On 6[;]|drain [heart]3 health instead,1,if(d == 6) { drain(3); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop_downgraded,Do [sword]3 damage. On 6[;]|heal [heart]2 health instead,1,if(d == 6) { attackself(-2); sfx(~_heal~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,if(d == 6) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 6) { attackself(-2); sfx(~_heal~); }
Magic Axe,Do [sword]<double> damage|[gray](once per battle),1,attack(d / 0.5); sfxdamage(target[;]d / 0.5); /*every day it becomes stranger and stranger that i've never touched drugs in my life*/,Fury,MAX5,,PURPLE,simplify,complicate,,,0,NO,YES,ncr,1,,,,,,,,,,,
Boiling Cauldron,Take [fire]2 damage[;]|get 2 new dice,1,attackself(2[;]FIRE); sfxdamage(self[;]2); sfx(~_fire~); givedice([for(i in 0...2) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,change_power,change_power,,,0,YES,NO,ncr,1,,,,,,,,,,,
Boiling Cauldron_upgraded,Take [fire]3 damage[;]|get 3 new dice,1,attackself(3[;]FIRE); sfxdamage(self[;]3); sfx(~_fire~); givedice([for(i in 0...3) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Boiling Cauldron_downgraded,Take [fire]1 damage[;]|get a new dice,1,attackself(1[;]FIRE); sfxdamage(self[;]1); sfx(~_fire~); givedice();,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Polarized Cauldron,Do [sword]1 damage|Get a dice of different parity,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_upgraded,Do [sword]1 damage|Get a dice of different parity|,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Pulsing Cauldron,Do [sword]1 damage|On low (1-3)[;] get a high dice|On high (4-6)[;] get a low dice,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_upgraded,Do [sword]1 damage|On 1-3[;] get 4-6. On 4-6[;] get 1-3|,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sparkthrower,Do [sword]2 damage|[shock]<timesused> shock[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,ncr,1,,,,,,,,,,,
Sparkthrower_downgraded,Do [sword]1 damage|[shock]<timesused> shock[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sparkthrower_upgraded,Do [sword]3 damage|[shock]<timesused> shock[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Earsplitter,Do [sword]2 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,1,,,,,,,,,,,
Earsplitter_downgraded,Do [sword]1 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Earsplitter_upgraded,Do [sword]3 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Silver Sword@witch,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,witchonly|ncr,2,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword?@witch,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,ODD|FREE5,,GRAY,change_power,change_power,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,2,,,,,,,,,,,
Silver Sword?@witch_downgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,REQUIRE5|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Silver Sword?@witch_upgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,FREE5|ODD|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
[END NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Blighted Zap,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Blighted Zap_upgraded,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blighted Zap_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bet,Deal +[sword]1 each attack|until you take [sword]10 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 10) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 1); },,,removestatusself(~Permaboost~[;] 1); removestatusself(~Permadown~[;] 1);,,,,
Bet_upgraded,Deal +[sword]1 each attack|until you take [sword]16 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 16) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 2); },,,removestatusself(~Permaboost~[;] 1);,,,,
Roulette,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> damage,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,MAX4,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Roulette_upgraded,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> damage,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,NORMAL|FREE1,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Roulette_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,PINK,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Countvalanche,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Countvalanche_upgraded,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Countvalanche_downgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parry,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Parry_downgraded,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Double Parry,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Double Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Double Parry_downgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Parrying Sword,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX4,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parrying Sword_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parrying Sword_downgraded,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parrying Claw,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parrying Claw_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Parrying Claw_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Power Up,Deal [sword]1 extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,REQUIRE1,,RED,change_power,noeffect,,,0,YES,NO,,1,,,,,,,,,,,
Power Up_upgraded,Deal [sword]<d6> extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,MAX2,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Forbidden Magic,Do [sword]<d6> damage[;]|inflict [curse]Curse,1,attack(d); inflict(CURSE); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Forbidden Magic_upgraded,Do [sword]<d6> damage[;]|inflict [curse]2 curse,1,attack(d); inflict(CURSE[;] 2); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Forbidden Magic_downgraded,Do [sword]<d6> damage,1,attack(d) sfxdamage(target[;] d);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,,,,,,,,,,,,,
Regen Ale,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,Regenerative Ablity,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,regenitem,1,,,,,,,,,,,
Regen Ale_upgraded,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,,MAX3,,GREEN,,,,,0,YES,NO,regenitem,,,,,,,,,,,,
Regen Ale_downgraded,Heal [heal]2 HP,1,attackself(-2); sfx(~_cure~);,,REQUIRE2,,GREEN,,,,,0,YES,NO,regenitem,,,,,,,,,,,,
[END INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Vise Flip,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Gadget,DOUBLES|DOUBLES,,GRAY,change_power,noeffect,,,0,YES,NO,appearsforparts,1,,,,,,,,,,,
Vise Flip_upgraded,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Gadget,NORMAL|NORMAL,,GRAY,change_power,noeffect,,,0,YES,NO,appearsforparts,,,,,,,,,,,,
Poor Yorick,Curse both fighters[;]|count -3 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,e.reducecountdownby = 3;,,,,,,
Poor Yorick_upgraded,Curse both fighters[;]|count -4 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,e.reducecountdownby = 4;,,,,,,
Poor Yorick_downgraded,Curse yourself[;]|count -3 on each item use,1,inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,e.reducecountdownby = 3;,,,,,,
Unwanted Present,Confuse enemy,1,inflict(CONFUSE); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Unwanted Present_downgraded,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Unwanted Present_weakened,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,9,ORANGE,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Curse Remote,[sword]<d6> dmg[;] consume [curse]Curse|to cast it on the enemy,1,attack(d); sfxdamage(target[;]d); if(self.getvar(~willremovecurse~) == 1) { inflict(CURSE); sfx(~_curse~[;]~~[;]0.1); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,,1,,,,,,,,if(getstatusself(CURSE) >= 1) { removestatusself(CURSE); self.setvar(~willremovecurse~[;]1); },,,
Curse Remote_upgraded,[sword]<d6>[;] consume all [curse]Curse|to cast it on the enemy,1,attack(d); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,,,,,,,,,,if(getstatusself(CURSE) >= 1) { self.setvar(~willremovecurse~[;]getstatusself(CURSE)); removestatusself(CURSE[;]getstatusself(CURSE)); },,,
Luck Prayer,Reduce [curse]Curse odds|this turn to 25%,1,inflictself(~cursesuppressor~); sfx(~useitem~);,Dramatic Pause,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,,1,,,,,,,,,,,
Nimble Hands,Do [sword]<d6>[;] steal an item with|[sword] symbol until next turn,2,attack(d); sfxdamage(target[;]d); if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn && eq.fulldescription.indexOf(~[sword]~) != -1){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Borrowed~; randomequipment.unavailabledetails = [~Say goodbye to Christmas!~[;]~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); } } } else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,MAX5,,PINK,simplify,complicate,,,0,NO,NO,excludefromrandomlists|cannotsteal|curseavoid|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sponge@sizesmall,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Sponge~[;] true[;] false[;] e);,,,,,,,,,
Sponge,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_upgraded,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Falling Anvil+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_upgraded,Do [sword]<d6> damage|Size increaced,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_weakened,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,if(!flee) giveequipment(~Falling Anvil+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_weakened,Do [sword]<d6> damage|Size increaced,2,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tableful,At the start of the second|turn[;] everyone heals [heart]4 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-4); attack(-4); sfx(~_heal~); },,,,,,,
Tableful_upgraded,At the start of the second|turn[;] everyone heals [heart]6 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-6); attack(-6); sfx(~_heal~); },,,,,,,
Tableful_downgraded,At the start of the second|turn[;] everyone heals [heart]2 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-2); attack(-2); sfx(~_heal~); },,,,,,,
Artificial Snow,Do [ice]<d6> damage[;] on 4[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d == 4) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Artificial Snow_upgraded,Do [ice]<d6> damage[;] on even[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d % 2 == 0) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Artificial Snow_downgraded,Do [ice]<d6> damage,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,MAX3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Renunciation,You can't roll <d6>|this fight,1,var totalamount  = 0; for(a in 1...7) { if(getstatusself(~forget~ +a) > 0) { totalamount += 1; } } if(totalamount < 6) { inflictself(~forget~ +d); sfx(~magic_gaindice~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Infinity Mirror,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Flame Whip,Do [fire]<d6> damage[;]|burn yourself,2,attack(d[;]FIRE); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2);
Flame Whip_upgraded,Do [fire]<d6> damage[;]|roll a burning dice,2,attack(d[;]FIRE); inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);
Frozen Gloves,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d[;]ICE); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);
Frozen Gloves_upgraded,Do [ice]<d6> damage[;]|roll a one,2,attack(d[;]ICE); givedice(1); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,,,givedice(1); sfx(~_ice~[;]~~[;]0.1);
Night By The Fireplace,[90%]When you are hit by fire[;] it|[90%]will heal you instead of damage,1,inflictself(~fireplace~); sfx(~_cure~); sfx(~_cure~);,Cruciroll,COUNTDOWN,12,PINK,threequartercountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Keyflare,Do [fire]3 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(3[;]FIRE); sfxdamage(target[;]3); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Keyflare_upgraded,Do [fire]4 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(4[;]FIRE); sfxdamage(target[;]4); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Keyflare_downgraded,Return burning <d6>,1,inflictself(FIRE); givedice(d); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Snowball Launcher,Do [ice]<double> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 2[;]ICE); sfxdamage(target[;]d * 2); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,,,,,,,,,,,,,
Snowball Launcher_upgraded,Do [ice]<triple> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 3[;]ICE); sfxdamage(target[;]d * 3); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,,,,,,,,,,,,,
Scoop,Do [sword]<d6> damage|Flip the dice on its side,1,var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval)); attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,increaserange,change_function,,,0,NO,NO,,,,,,,,,,,,,
Scoop_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Snowdrift,Enemy goes first|(Always offered as scrap),1,,Time Stop,,,GRAY,change_power,,,,0,NO,NO,weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },,,,,,,,,,
Snowdrift_upgraded,Enemy goes first[;] but|you take an extra turn (Always offered as scrap),1,,Time Stop,,,GRAY,change_power,weakenavoid|shockavoid,,,0,NO,NO,weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },if(turn == 1) { e.animate(~flashandshake~); e.changecolour(~BLACK~); inflictself(EXTRATURN); sfx(~_recycle~[;]~~[;]0.1); },,,,,,,,,
Wizard's Hat,Turn the enemy|into an animal,1,var enemylist = [~Loud Bird~[;]~Dire Wolf~[;]~Baby Squid~[;]~Rat King~[;]~Sneezy~[;]~Bear~]; sfx(~_thinghappens~); var lvl = target.level; var totaldice = target.dice; var totalbonusdice =  target.bonusdice; var totalextradice =  target.extradice; var randomanimal = rand(enemylist); if(randomanimal == ~Bear~) { inflict(~instanttransform~); } else { switchenemy(target[;]randomanimal); target.dice == totaldice; target.bonusdice == totalbonusdice; target.extradice == totalextradice; target.level = lvl; },Bearish Spell,COUNTDOWN,14,PINK,threequartercountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Bear's Cusre,Turn the enemy into|a bear[;] curse him each turn,2,inflict(~bearcurse~); sfx(~_curse~[;]~~[;]0.1); sfx(~_roar~);,Bearish Spell,COUNTDOWN,20,ORANGE,reducesize,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Mortal Sin,Do [sword]<triple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 3); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 3);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_upgraded,Do [sword]<quadruple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 4); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 4);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_downgraded,Do [sword]<d6> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Spare Parts,Permanently delete random|equipment[;] make a gadget out of it,1,if(!simulation){ if(target != null) { var selfequipment = []; var scrapequipment = []; for (eq in self.equipment){ if(!eq.hastag(~appearsforparts~) && !eq.hastag(~skillcard~) && eq.ready){ selfequipment.push(eq); } }  for (eq in self.equipment){ if(eq.hastag(~appearsforparts~) && eq.ready){ scrapequipment.push(eq) ; } } if(scrapequipment.length > 0){ var randomscrapequipment = rand(scrapequipment); randomscrapequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomscrapequipment.gadget[;]true); removeequipment(randomscrapequipment[;]self); } else if(selfequipment.length > 0){ var randomequipment = rand(selfequipment); randomequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomequipment.gadget[;]true); removeequipment(randomequipment[;]self); } } } else { bonus(-1000); self.textparticle(~No effect!~); },Stardust,COUNTDOWN,8,GRAY,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,,
Sticker,Combine dice|[gray](Reuseable),1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Magic Spanner,MAX2|MAX2,,GREEN,increaserange,removereusable,,,3,YES,NO,,1,,,,,,,,,,,
Contract,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]12 gold,2,if(self.gold > 12){ self.gold -= 12 ; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 12) { Rules.upgradeplayerequipment = true; },,,
Contract_upgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]9 gold,2,if(self.gold > 9){ self.gold -= 9; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 9) { Rules.upgradeplayerequipment = true; },,,
Contract_downgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]24 gold,2,if(self.gold > 24){ self.gold -= 24; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 24) { Rules.upgradeplayerequipment = true; },,,
Better Yourself,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Better Yourself_upgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Better Yourself_downgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Creative Crisis,[95%]Don't create new gadgets[newline][95%]after this fight,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.changeslots([]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight [gray](activated)~; var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } },Randomizer,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,YES,NO,cannotsteal,,e.setvar(~sourceequipment~[;]e); Rules.inventor_inspiration = true; e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight~;,e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight~; e.resetvar(~sourceequipment~);,e.setvar(~sourceequipment~[;]e);,,,,,,,,
Creative Crisis_downgraded,No effect,1,,Randomizer,,,PURPLE,change_power,change_power,,,0,YES,NO,cannotsteal,,,,,,,,,,,,
Consumerism,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~);,Perfect Cut,COUNTDOWN,10,PINK,halfcountdown,noeffect,,,0,YES,NO,cannotsteal,,,Rules.inventor_setgadgets(2 + getstatusself(~consumerism~));,,,,,,,,,
Petri Dish,Do [sword]2 damage[;] copy|Petri Dish after the battle,1,attack(2); sfxdamage(target[;]2);,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_upgraded,Do [sword]2 damage[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,attack(2); sfxdamage(target[;]2);,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Petri Dish_downgraded,No effect[;] copy|Petri Dish after the battle,1,,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_weakened,No effect[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Stomp,Do [shock]<d6> dmg +[shock]Shock[;]|repeat for next [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]2[;]d); jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1); inflict(SHOCK);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Antler,Do [sword]2 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target) + getjinx(target)); sfxdamage(target[;]getjinx(target) + getjinx(target)); if(getjinx(target) + getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
Acceleration Kick,Every third turn[;] reduce all|jinx on the enemy by [jinx]1,1,,Time Stop,,,PINK,,,,,0,NO,NO,excludefromrandomlists|weakenavoid|weakenimmune|shockavoid,,,,,if(turn % 3 == 0) { boostjinxcountdowns(target[;] 1); sfx(~useitem~); e.animate(~flashandshake~); },,,,,,,
Stomp_downgraded,Do [shock]<d6> dmg +[shock]Shock[;]|repeat in [jinx]2 turns,1,jinx(e.name + e.namemodifier[;]~take [shock]%VAR% dmg +[shock]Shock~[;]~Take [shock]%VAR% dmg +[shock]Shock~[;]~attack(%VAR%[;]SHOCK); sfxdamage(target[;]%VAR%); sfx(\~_shock\~[;]\~\~[;]0.2);inflict(SHOCK);~[;]target[;]self[;]3[;]d); attack(d[;]SHOCK); sfxdamage(target[;]d); sfx(~_shock~[;]~~[;]0.1);,Static Shock,MAX3,,PINK,increaserange,change_power,,,0,NO,NO,,,,,,,,,,,,,
Iron Helmet,Add [shield]<double> shield[;] in two|turns[;] take [sword]<double> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;](d * 2)); inflictself(SHIELD[;]d * 2); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Iron Helmet_upgraded,Add [shield]<double> shield[;] in two|turns[;] take [sword]<d6> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;]d); inflictself(SHIELD[;]d * 2); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Iron Helmet_downgraded,Add [shield]<d6> shield[;] in two|turns[;] take [sword]<double> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;](d * 2)); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Creative Crisis_upgraded,[95%]Don't create new gadgets[newline][95%]after this fight (save the previous gadgets),1,if(!simulation){ inflictself(~creativecrisis+~); screenshake(); sfx(~upgradeequipment~); e.changeslots([]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle[;][gray](activated)~; var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } },Randomizer,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,YES,NO,cannotsteal,,e.setvar(~sourceequipment~[;]e); Rules.inventor_inspiration = true; e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle (save the previous gadgets)~;,e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle~; e.resetvar(~sourceequipment~);,e.setvar(~sourceequipment~[;]e);,,,,,,,,
Dune,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,ODD,,ORANGE,change_power,change_power,,,0,NO,NO,,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_downgraded,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,REQUIRE5,,ORANGE,,,,,0,NO,NO,,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Dune_upgraded,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_weakened,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Boar Spear,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock both,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(FIRE); delay(0.3);,Blowtorch,MAX4,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Boar Spear_downgraded,Do [sword]<d6> damage[;]|[95%][fire]Burn and [shock]Shock yourself,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Blowtorch,REQUIRE5,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stabbing Blade,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock both,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(ICE); delay(0.3);,Flash Freeze,MAX4,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stabbing Blade_downgraded,Do [sword]<d6> damage[;]|[95%][ice]Freeze and [shock]Shock yourself,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Flash Freeze,REQUIRE5,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Shock Absorber,[90%]Unshock all shocked equipment[comma]|[90%]do [shock]<d6> per each unshocked,1,if (self.equipment.length > 0) { var dmgamount = 0; var unshockdelay = 2; for (eq in self.equipment) { if (eq.shockedsetting > 0) { eq.unshockingtimer = unshockdelay * 0.1; dmgamount += 1; unshockdelay += 2; } } if(dmgamount > 0) { bonus(100000); attack(dmgamount * d[;]SHOCK); sfxdamage(target[;]dmgamount * d); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Jackhammer,MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,,1,,,,,,,,,,,
Banhammer,Do [shock]9 damage|(Gain [shock]6 shock if not used),2,attack(9[;]SHOCK); sfxdamage(target[;]9); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Banhammer_downgraded,Do [shock]6 damage|(Gain [shock]6 shock if not used),2,attack(6[;]SHOCK); sfxdamage(target[;]6); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Aftershock,[95%]Roll a dice per each shocked|[95%]equipment you have,1,if (self.equipment.length > 0) { var dicepush = []; for (eq in self.equipment) { if (eq.shockedsetting > 0) { dicepush.push(rand([1[;]2[;]3[;]4[;]5[;]6])); } } if(dicepush.length > 0) { bonus(100000); givedice(dicepush); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Zap,EVEN,,YELLOW,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Evangel,Do [weaken]<d6> damage|75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
Evangel_upgraded,Do [weaken]<d6> damage|75% chance to gain [weaken]3,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); eqlist.remove(itemtoweakensec); } if(eqlist.length > 2) { var itemtoweakenth = rand(eqlist); if(itemtoweakenth.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakenth.animate(WEAKEN); eqlist.remove(itemtoweakenth); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Evangel_downgraded,75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; }self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } },Theremin,MAX5,,ORANGE,,,,,0,YES,NO,,,,,,,,,,,,,
Clock Hands,Reduce countdown on|all equipment by half,1,if(!simulation){ var selfequipment = []; sfx(~useitem~); for (eq in self.equipment){ if(eq.countdown > 1 && eq.slots.indexOf(~COUNTDOWN~) == 0 && eq.availablethisturn && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ boostcountdowns(0); for(eq in selfequipment) { eq.reducecountdownby = eq.remainingcountdown * 0.5; } } else { bonus(1000 + (self.dicepool.length * 500)); } },Accelerate,REQUIRE6,,GREEN,simplify,complicate,,,0,YES,NO,,,,,,,,,,,,,
Haunted House,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_upgraded,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 15;,,,,,,,,
Haunted House_downgraded,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_weakened,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,,,,,e.remainingcountdown = 15;,,,,,,,,
Dullplicate,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Dullplicate_downgraded,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Dullplicate_upgraded,Duplicate all unused <d6>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Arcsine,First dice +1[comma] second dice -1|[gray](Reuseable),1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Random Roll,DOUBLES|DOUBLES,,GREEN,change_power,removereusable,,,3,YES,NO,,1,,,,,,,,,,,
Arcsine_upgraded,First dice +1[comma] second dice -1|[gray](Reuseable),1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Random Roll,DOUBLES|DOUBLES,,GREEN,change_power,removereusable,,,4,YES,NO,,,,,,,,,,,,,
Next Volume,Get the second spellbook|Current spellbook: <var:currentspellbook>,1,sfx(~_thinghappens~); var booknum = self.getvar(~currentspellbook~); for(i in 1...7) { if(Spellbook.isempty(i)) { self.setvar(~spellbook~+booknum+~slot~+i[;]~Empty slot~); } else { self.setvar(~spellbook~+booknum+~slot~+i[;]Spellbook.spellname(i)); } } for(eq in self.equipment){ if(eq.name == e.name){ eq.animate(~flashandshake~); } } self.setvar(~currentspellbook~[;]self.getvar(~currentspellbook~) + 1); if(self.getvar(~currentspellbook~) == 4) { self.setvar(~currentspellbook~[;]1); } booknum = self.getvar(~currentspellbook~); for(q in 1...7) { if(self.getvar(~spellbook~+booknum+~slot~+q) != ~Empty slot~) { Spellbook.changespellflash(q[;]self.getvar(~spellbook~+booknum+~slot~+q)); } else { Spellbook.erase(q); } },Time Stop,NORMAL,,GRAY,,,,,-1,YES,NO,excludefromrandomlists|hidereuseable|weakenavoid|curseavoid|altpoisonavoid|shockavoid|cannotsteal,1,inflictself(~silencenextvolume~);,,if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.hasstatus(SILENCE)) { e.availablethisturn = false; e.unavailabletext = ~Unavailable~; e.unavailabledetails = [~Break silence to unlock~]; }if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },if(self.getvar(~currentspellbook~) == 1) { e.fulldescription = ~Get the second spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 2) { e.fulldescription = ~Get the third spellbook[newline]Current spellbook: <var:currentspellbook>~; } else if(self.getvar(~currentspellbook~) == 3) { e.fulldescription = ~Get the first spellbook[newline]Current spellbook: <var:currentspellbook>~; },,,,,,
Stolen Heart,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stolen Heart_downgraded,Never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~);,,REQUIRE5|REQUIRE5,,YELLOW,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Stolen Heart_upgraded,-1 dice to enemy this fight[comma]|never roll 5,1,inflictself(~never5~); sfx(~magic_gaindice~); if(!simulation) { target.extradice--; if(target.dice + target.extradice < 1) { target.extradice = 1- target.dice; } },,REQUIRE5,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Last Word,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_downgraded,Never roll 2,1,inflictself(~never2~); sfx(~magic_gaindice~);,,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Last Word_upgraded,Survive next fatal blow[comma]|never roll 2,1,inflictself(SURVIVE); sfx(~_survive~); inflictself(~never2~);,,MAX2,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_downgraded,Never roll 1,1,inflictself(~never1~); sfx(~magic_gaindice~);,,REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Warming Light_upgraded,Get immunity to freeze[comma]|never roll 1,1,self.innate.push(~immunefreeze~); sfx(~useitem~); inflictself(~never1~);,,MAX2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_downgraded,Add [shield]3 shield[comma]|never roll 4,1,inflictself(SHIELD[;]3); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4|REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Glass Wall_upgraded,Add [shield]6 shield[comma]|never roll 4,1,inflictself(SHIELD[;]6); sfx(~_shield~[;]~~[;]0.2); inflictself(~never4~);,,REQUIRE4,,ORANGE,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Weird Glare,Add [poison]5 poison[comma]|never roll 3,1,inflict(POISON[;]5); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_downgraded,Add [poison]3 poison[comma]|never roll 3,1,inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Weird Glare_upgraded,Add [poison]6 poison[comma]|never roll 3,1,inflict(POISON[;]6); sfx(~_poison~[;]~~[;]0.2); inflictself(~never3~);,,REQUIRE3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Stalemate,Do [sword]12 damage[comma]|Inflict [threshold]2 threshold,1,attack(12); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]12);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_upgraded,Do [sword]14 damage[comma]|Inflict [threshold]2 threshold,1,attack(14); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]14);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
Stalemate_downgraded,Do [sword]8 damage[comma]|Inflict [threshold]2 threshold,1,attack(8); inflict(~threshold~[;]2); sfx(~jester_delete~[;]~~[;]0.2); sfxdamage(target[;]8);,,REQUIRE6|REQUIRE6|REQUIRE6,,PINK,change_power,change_function,,,0,NO,NO,,,,,,,,,,,,,
LOL Sword,XD,1,var odds = 20; if(getstatusself(~luck~) > 0){ odds = 10; } if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = rand([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,,1,,,,,,,,,,,
LOL Sword_downgraded,ha ha very funny,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,MAX3,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
LOL Sword_upgraded,LMAO,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL|FREE1,,YELLOW,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Honey Pot,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 3 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,1,,,,,,,,,,,
Honey Pot_upgraded,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 4 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,witchonly,,,,,,,,,,,,
Christmas Bell,-1 to dice value|(Cost [mana]1[]: roll a one),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BLUE,change_power,change_power,,,0,YES,NO,,1,,,,,,,,,,,
Christmas Bell_downgraded,-1 to dice value,1,givedice(d - 1);,Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Christmas Bell_upgraded,-1 to dice value|(Cost [mana]1[]: also duplicate),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]d - 1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Coffee Pot,Do [sword]1 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,1,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_upgraded,Do [sword]2 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(2); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_downgraded,Do [sword]1 damage[comma]|roll a new dice,1,attack(1); givedice(); givedice([d - 1[;]1]); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,,,,,,,,,,,,,
Antler_downgraded,Do [sword]1 damage for|each [jinx]Jinx on enemy,2,attack(getjinx(target)); sfxdamage(target[;]getjinx(target)); if(getjinx(target) <= 0) { bonus(-1000); },Plasma Gun,COUNTDOWN,16,PINK,threequartercountdown,change_power,,,0,NO,NO,,,,,,,,,,,,,
[END FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Roll Tracker,Tracks your rolls,2,,,,,GRAY,change_power,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); },,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Roll Tracker_upgraded,Tracks your rolls|Odd rolls reduce CPU,2,,,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists,,,,self.setvar(~rollindex~[;]0); if(self.getvar(~baserolls~).length == null) { trace(~selfvar error!~); e.fulldescription = ~Something went wrong![newline]Please report this!![newline][newline](Clicking calculate will[newline]abruptly crash your game)~; } else { self.setvar(~rolls~[;]self.getvar(~baserolls~)); self.setvar(~updatecounter~[;]0); var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join(); } inflictself(~oddcpureduce~);,,if(self.getvar(~updatecounter~)) { var i = self.getvar(~rollindex~); var rolls = self.getvar(~rolls~); var roll_list = rolls.slice(i[;]rolls.length-1); roll_list = roll_list.concat(rolls.slice(0[;]i)); e.fulldescription = ~Your next rolls are:[newline]~ + roll_list.join() + ~[newline][newline]Odd rolls reduce CPU[newline]instead of increasing it.~; e.animate(~flash~); self.setvar(~updatecounter~[;]0); },,,,,,
Reset,Reset cpu (testing)|,1,adjustrobotcounter(-self.roll_total);,,NORMAL,,GRAY,,,,none,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Flip,Flip next rolls|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = []; for(v in self.getvar(~rolls~)) { newrolls.push(7-v); } newrolls[newrolls.length-1] = 0; trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~updatecounter~[;]1);,,,
Reverse,Reverse roll order|,1,,,NORMAL,,ORANGE,,,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,var newrolls = self.getvar(~rolls~); newrolls.reverse(); newrolls.push(0); newrolls.shift(); trace(newrolls); self.setvar(~rolls~[;]newrolls); self.setvar(~rollindex~[;]newrolls.length - self.getvar(~rollindex~)); self.setvar(~updatecounter~[;]1);,,,
Freeze,Set rolls to|111111,1,,,NORMAL,,BRIGHTCYAN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rolls~[;][1[;]1[;]1[;]1[;]1[;]1[;]0]); self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Confetti Popper,Do [sword]<d6> damage|Skip the next dice roll,1,attack(d); sfxdamage(target[;]d);,,MAX5,,YELLOW,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,self.setvar(~rollindex~[;]self.getvar(~rollindex~)+1); if(!self.getvar(~rolls~)[self.getvar(~rollindex~)]) self.setvar(~rollindex~[;]0); self.setvar(~updatecounter~[;]1);,,,
Garbage Collector,Next roll reduces CPU|instead of increasing it,1,inflictself(~reversecpu~);,,EVEN,,GRAY,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sequence Break,Skip the next <d6> rolls,1,,,MAX3,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,var i = self.getvar(~rollindex~); i+=d; if(i >= self.getvar(~rolls~).length) i-=self.getvar(~rolls~).length; if(!self.getvar(~rolls~)[i]) i = 0; self.setvar(~rollindex~[;]i); self.setvar(~updatecounter~[;]1);,,,
Wrong Answer,Do [sword]1 damage[;] and|heal completely,2,attack(1); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_upgraded,Do [sword]3 damage[;] and|heal completely,2,attack(3); attackself(-self.maxhp); target.removestatus(ALL); sfxdamage(target[;]3);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wrong Answer_downgraded,Heal completely,2,attackself(-self.maxhp); target.removestatus(ALL);,,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Frozen Gloves@robot,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d); sfxdamage(target[;]d); inflictself(~robotfreeze~);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(~robotfreeze~);
Commandments,Use all items to|get a bonus next turn,2,,,,,GRAY,,,,,0,NO,YES,excludefromrandomlists,,,,e.fulldescription = ~Use all items to[newline]get a bonus next turn~,,var found = 0; for (eq in self.equipment) if (eq.ready) found++; /*found should be 1 including the skillcard*/ if (found == 1) { e.fulldescription = ~Got bonus!~; var forbiddendice = rand([[~odds~[;] [1[;]3[;]5]][;][~evens~[;] [2[;]4[;]6]][;][~1s~[;][1]][;][~2s~[;][2]][;][~3s~[;][3]][;][~4s~[;][4]][;][~5s~[;][5]][;][~6s~[;][6]]]); self.setvar(~forbiddendice~[;]forbiddendice); var bonus = rand([~do [sword]5 damage~[;]~do [sword]10 damage~[;]~inflict [fire]2~]); self.setvar(~commandbonus~[;]bonus); jinx(~Commandment~[;]~don't use ~ + forbiddendice[0] + ~.[newline]Reward: ~ + bonus[;]~Follow command for bonus~[;]~inflict(\~Commandment\~);~[;]self[;]self[;]1);},,,,,,
Frozen Slash_upgraded,Do [ice]<d6> damage|inflicts [bleed]1 Bleed,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(~Bleed~); sfx(~_poison~);,,NORMAL|FREE3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Smirk,Do [sword]<d6> damage[;] snap 3|at once to do [sword]4 damage,2,attack(d); sfxdamage(target[;] d);,,MAX3,,RED,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,if(snap >= 3) attack(4);,,
Cold Stare,Do [ice]2 damage|Snap to Freeze 1 dice,2,attack(2[;] ICE); sfxdamage(target[;]2); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,inflict(ICE);,,
Cold Stare_upgraded,Do [ice]4 damage|Snap to Freeze 1 dice,2,attack(4[;] ICE); sfxdamage(target[;]4); sfx(~_ice~);,,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,,,,,,,,,,,inflict(ICE);,,
Eyebrow Raise,Heal [heal]2 hp|Snap to gain [dodge] dodge,2,attackself(-2); sfx(~_heal~);,,COUNTDOWN,2,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,inflictself(DODGE); sfx(~_dodge~);,,
Eyebrow Raise_upgraded,Heal [heal]3 hp|Snap to gain [dodge] dodge,2,attackself(-3); sfx(~_heal~);,,COUNTDOWN,1,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,inflictself(DODGE); sfx(~_dodge~);,,
Eyebrow Raise_downgraded,Heal [heal]1 hp,2,attackself(-1); sfx(~_heal~);,,COUNTDOWN,2,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Ho Ho Ho,Do [sword]5 damage|25% to reroll dice,2,attack(5); sfxdamage(target[;] 5); if(chance(25)){ givedice(); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ho Ho Ho_downgraded,Do [sword]3 damage|25% to reroll dice,2,attack(3); sfxdamage(target[;] 3); if(chance(25)){ givedice(); },,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Ho Ho Ho_upgraded,Do [sword]5 damage|30% to return 2 dice,2,attack(5); sfxdamage(target[;] 5); if(chance(30)){ givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])][;]~~[;]true); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Emote,Do a random thing|1. Eyebrow raise|2. Cold stare|3. Smirk,2,var emote = rand([1[;]2[;]3]); if (emote == 1){ attackself(-2); sfx(~_heal~); } else if (emote == 2){ attack(2[;] ICE); sfxdamage(target[;]2); sfx(~_ice~); } else if (emote == 3){ attack(3); sfxdamage(target[;]3); },Random Hit,COUNTDOWN,5,PINK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Emote_upgraded,Do a random thing|1. Eyebrow raise +|2. Cold stare +|3. Smirk +,2,var emote = rand([1[;]2[;]3]); if (emote == 1){ attackself(-4); sfx(~_heal~); } else if (emote == 2){ attack(4[;] ICE); sfxdamage(target[;]4); sfx(~_ice~); } else if (emote == 3){ attack(5); sfxdamage(target[;]5); },Random Hit,COUNTDOWN,5,PINK,change_power,noeffect,,,0,NO,NO,,,,,,,,,,,,,
Tasty Treat,heal 25% current hp,2,attackself(-(self.hp / 4)); sfx(~_cure~);,,COUNTDOWN,10,GREEN,halfcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
Tasty Treat_downgraded,Heal 5 hp,2,attackself(-5); sfx(~_cure~);,,COUNTDOWN,10,GREEN,halfcountdown,change_power,,,0,YES,NO,,,,,,,,,,,,,
Gentle Smile,Heal self [heal]5 hp|Heal enemy for [heal]2 hp,2,attackself(-5); attack(-2); sfx(~_heal~);,,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Gentle Smile_upgraded,Heal self [heal]7 hp|Heal enemy for [heal]3 hp,2,attackself(-7); attack(-3); sfx(~_heal~);,,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Blink,Inflict [stun]1_stun|Next turn blind 2 of your dice,2,jinx(~Blink~[;]~Blind [blind]%VAR% dice~[;]~Blind [blind]%VAR% Dice~[;]~inflict(\~blind\~[;]%VAR%); sfx(\~_blind\~);~[;]self[;]self[;]1[;](2)); sfx(~_thinghappens~); inflict(~Stun~); sfx(~_shock~);,,MIN5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blink_downgraded,Inflict [stun]1_stun|Next turn blind ALL your dice,2,jinx(~Blink~[;]~Blind [blind]%VAR% dice~[;]~Blind [blind]%VAR% Dice~[;]~inflict(\~blind\~[;]%VAR%); sfx(\~_blind\~);~[;]self[;]self[;]1[;](ALL)); sfx(~_thinghappens~); inflict(~Stun~); sfx(~_shock~);,,MIN5,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Blink_upgraded,Inflict [stun]1_stun|Next turn blind 1 of your dice,2,jinx(~Blink~[;]~Blind [blind]%VAR% dice~[;]~Blind [blind]%VAR% Dice~[;]~inflict(\~blind\~[;]%VAR%); sfx(\~_blind\~);~[;]self[;]self[;]1[;](1)); sfx(~_thinghappens~); inflict(~Stun~); sfx(~_shock~);,,MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Wink,Drain [heart]2 hp|Reroll dice,2,drain(2); sfx(~_drain~); givedice();,,MAX4,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Wink_upgraded,Drain [heart]2 hp,2,drain(2); sfx(~_drain~); givedice();,,NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
Concerned Look,Shock [shock]1 item|Do [shock]3 damage|Return dice,2,attack(3[;] SHOCK); sfxdamage(target[;] 3); inflict(SHOCK); sfx(~_shock~); givedice(d);,,NORMAL,,YELLOW,change_power,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Concerned Look_upgraded,Shock [shock]2 item|Do [shock]5 damage|Return dice,2,attack(5[;] SHOCK); sfxdamage(target[;] 5); inflict(SHOCK[;] 2); sfx(~_shock~); givedice(d);,,NORMAL,,YELLOW,,,,,0,NO,NO,,,,,,,,,,,,,
Disgusted Look,Do damage equal to poison|Then Inflict [poison]3 posion,2,attack(getstatus(POISON)); sfxdamage(target[;]getstatus(POISON)); inflict(POISON[;] 3); sfx(~_poison~);,,COUNTDOWN,4,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Disgusted Look_upgraded,Do damage equal to poison|Then Inflict [poison]4 posion,2,attack(getstatus(POISON)); sfxdamage(target[;]getstatus(POISON)); inflict(POISON[;] 4); sfx(~_poison~);,,COUNTDOWN,4,PURPLE,change_power,,,,0,NO,NO,,,,,,,,,,,,,
Disgusted Look_downgraded,Inflict [poison]3 posion,2,inflict(POISON[;] 3); sfx(~_poison~);,,COUNTDOWN,4,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Look Away!,Inflict [vanish] Vanish|,2,inflict(VANISH); sfx(~_vanish~);,,REQUIRE2,,PINK,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Eye Contact,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d);,,NORMAL,,ORANGE,add1,complicate,,,0,NO,NO,finale,,,,,,,,,,,,
Cheeky Look,Do [sword]3 damage|30% chance to curse enemy,1,attack(3); sfxdamage(target[;] 3); if(chance(30)){ inflict(CURSE); sfx(~_curse~); },,MIN3,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cheeky Look_upgraded,Do [sword]3 damage|35% chance to curse enemy,1,attack(3); sfxdamage(target[;] 3); if(chance(35)){ inflict(CURSE); sfx(~_curse~); },,MIN2,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Cheeky Look_downgraded,Do [sword]3 damage|10% chance to curse enemy,1,attack(3); sfxdamage(target[;] 3); if(chance(10)){ inflict(CURSE); sfx(~_curse~); },,MIN4,,PURPLE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Grim Look,Reduce enemies hp by 15%,2,attack(target.hp * 0.15); sfx(~_magic~);,,ODD,,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Grim Look_upgraded,Reduce enemies hp by 20%,2,attack(target.hp * 0.2); sfx(~_magicdamage~);,,ODD,,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Grim Look_downgraded,Reduce enemies hp by 5%,2,attack(target.hp * 0.05); sfx(~_magicdamage~);,,ODD,,,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sly Wink,Do [weaken]2 damage |[90%]Weaken an item per unused dice|Current [weaken]: <unassigneddice>,2,var temp = 0; for(d in self.dicepool) { if(d.available()) temp++; }  attack(2); sfxdamage(target[;] 2); inflict(WEAKEN[;] temp); sfx(~_weaken~);,,EVEN,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Sly Wink_downgraded,Do [weaken]2 damage,2,attack(2); sfxdamage(target[;] 2); sfx(~_weaken~);,,EVEN,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
rs test,Gives you Reference Stuff stuff,1,inflictself(~rs~); sfx(~_thinghappens~);,,NORMAL,,RED,,,,,0,YES,NO,,,,,,,,,,,,,
Head of Krampus,Deal dmg equal to 20%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 5); attack(target.hp / 5);,Hellfire,ODD,,RED,change_power,complicate,,,0,NO,NO,,1,,,,,,,,,,,
Head of Krampus_upgraded,Deal dmg equal to 25%|of enemy's current HP,1,sfxdamage(target[;]target.hp / 4); attack(target.hp / 4);,Hellfire,ODD,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe,Do [sword]<d6> damage|Next turn do [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,RANGE24,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_upgraded,Do [sword]<d6> damage|Next turn do [sword]<d6> damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]target[;]self[;]2[;]d); sfx(~_thinghappens~);,,RANGE24,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Axe_downgraded,Do [sword]<d6> damage|Next turn take [sword]<d6>/ 2 damage,2,attack(d); sfxdamage(target[;] d); jinx(~Repeater~[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(null[;] %VAR%);~[;]self[;]self[;]2[;]d/2); sfx(~_thinghappens~);,,RANGE24,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Incantation,Roll 2 6's next turn,2,inflictself(~stash~+6[;]2); inflictself(~illuminate~);,,MIN5,,RED,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Soul Crush,Drain [heart]<d6> health|Get 2 3's,2,drain(d); sfx(~_drain~); givedice([3[;]3]);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Soul Crush_downgraded,Drain [heart]<d6> health,2,drain(d); sfx(~_drain~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Throwing Dagger,Do [sword]<var:dagger> damage|+[sword]1 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_downgraded,Do [sword]<var:dagger> damage|+[sword]1 each use,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 1); sfxdamage(target[;] self.getvar(~dagger~) + 1);,,NORMAL,,RED,change_power,change_power,,,0,NO,NO,,,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,self.setvar(~dagger~[;] 1);,,,,,,,,
Divine Throwing Dagger_upgraded,Do [sword]<var:dagger> damage|+[sword]3 each use|,2,attack(self.getvar(~dagger~)); self.setvar(~dagger~[;] self.getvar(~dagger~) + 2); sfxdamage(target[;] self.getvar(~dagger~) + 2);,,NORMAL,,RED,change_power,change_power,,,2,NO,NO,,,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,self.setvar(~dagger~[;] 2);,,,,,,,,
Divine Grip,Get 2 of the difference|Between the dice|,2,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice([(bigdice - smalldice)[;](bigdice - smalldice)][;] ~combinedice~);,,NORMAL|NORMAL,,GREEN,reuseable,changetotal9,,,0,YES,NO,,,,,,,,,,,,,
Divine Zap,Drain [heart]<var:hp> health|,2,drain(self.getvar(~hp~)); sfx(~_drain~);,,EVEN|ODD|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~hp~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Zap_upgraded,Drain [heart]<var:hp> health|,2,drain(self.getvar(~hp~)); sfx(~_drain~);,,EVEN|REQUIRE3,,RED,change_power,noeffect,,,0,NO,NO,,,,,,self.setvar(~hp~[;] target.hp*0.40); e.animate(~flashandshake~);,,,,,,,
Divine Microphone,Do [weaken]<d6> damage|Weaken 2 items,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); inflict(WEAKEN[;] 2); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Microphone_downgraded,Do [weaken]<d6> damage,2,attack(d[;] WEAKEN); sfxdamage(target[;] d); sfx(~_weaken~);,,REQUIRE6,,ORANGE,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer,Do [ice]<d6> damage|Freeze 2 dice,2,attack(d[;] ICE); sfxdamage(target[;] d); inflict(ICE[;] 2); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Snowhammer_downgraded,Do [ice]<d6> damage,2,attack(d[;] ICE); sfxdamage(target[;] d); sfx(~_ice~);,,REQUIRE6,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe,Do [fire]<d6> damage|Burn 2 dice,2,attack(d[;] FIRE); sfxdamage(target[;] d); inflict(FIRE[;] 2); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Fire Axe_downgraded,Do [fire]<d6> damage,2,attack(d[;] FIRE); sfxdamage(target[;] d); sfx(~_fire~);,,REQUIRE6,,RED,simplify,change_power,,,0,NO,NO,,,,,,,,,,,,,
Divine Storm,Inflict [threshold]2_Storm|On enemy,2,inflict(~Storm~[;] 2); sfx(~_curse~);,,COUNTDOWN,14,,threequartercountdown,noeffect,,,0,NO,NO,,,,,,,,,,,,,
