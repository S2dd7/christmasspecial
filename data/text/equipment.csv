Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Tags,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: On any countdown reduce,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury,Script: On Dodge
[BEGIN ESSENTIALS],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
Inventor Gadgets,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Robot Calculate,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Robot Request,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Thief Stolen Card,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Witch Spellbook,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Witch Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Jester Deck,(special),2,,,,,GRAY,,,,none,0,NO,NO,cannotsteal|skillcard,,,,,,,,,,,,
Combat Roll,Reroll a dice|[gray](Reuseable),2,givedice();,Random Roll,NORMAL,,GRAY,,,,,3,YES,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
[END ESSENTIALS],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN ENEMY EQUIPMENT],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
Magic Missile,Do [sword]5 damage,1,attack(5);,Magic Dice,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Missile_upgraded,Do [sword]8 damage,1,attack(8);,Magic Dice,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Shield,Add [shield]3 shield,1,inflictself(SHIELD| 3);,Barricade,ODD,,ORANGE,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Shield_upgraded,Add [shield]4 shield,1,inflictself(SHIELD| 4);,Barricade,ODD,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Infliction,Do [sword]3 damage,1,attack(3);,Bubble Gun,NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Infliction_upgraded,Do [sword]4 damage,1,attack(4);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon,Do [sword]10 damage,1,attack(10);,Accelerate,COUNTDOWN,20,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon_weakened,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,15,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Cannon_downgraded,Do [sword]5 damage,1,attack(5);,Accelerate,COUNTDOWN,20,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel,Do [weaken]<d6> damage[;]|on 6[;] inflict [weaken]1 weaken,2,attack(d | WEAKEN); if(d == 6) inflict(WEAKEN); if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },Burrower,NORMAL,,ORANGE,change_power,change_power,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel_upgraded,Do [weaken]<d6> damage[;]|on even[;] inflict [weaken]1 weaken,2,attack(d | WEAKEN); if(d % 2 == 0) inflict(WEAKEN); if(d % 2 == 1) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_weaken~|~~|0.2); },Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shovel_downgraded,Do [weaken]<d6> damage,2,attack(d | WEAKEN);,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d| FIRE); inflict(FIRE| 1);,Hellfire,EVEN,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_upgraded,Deal [fire]<d6> damage|Burn [fire]2 dice,1,attack(d| FIRE); inflict(FIRE| 2);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_downgraded,Deal [sword]<d6> damage,1,attack(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath,Do [fire]4 damage|Burn [fire]1 dice,2,attack(4| FIRE); inflict(FIRE| 1);,Hellfire,COUNTDOWN,5,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath_upgraded,Do [fire]6 damage|Burn [fire]1 dice,2,attack(6| FIRE); inflict(FIRE| 1);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Breath_downgraded,Do [sword]4 damage,2,attack(4);,Hellfire,COUNTDOWN,5,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath,Do [ice]4 damage|Inflict [ice]1 freeze,2,attack(4| ICE); inflict(ICE| 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath_upgraded,Do [ice]6 damage|Inflict [ice]1 freeze,2,attack(6| ICE); inflict(ICE| 1);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Breath_downgraded,Do [sword]3 damage,2,attack(3);,Arctic Storm,COUNTDOWN,5,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ray Gun,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Plasma Gun,MIN3,,RED,change_power,complicate,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ray Gun_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Plasma Gun,MIN3,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Plasma Blaster,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX5,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Slime Ball,Add [poison]2 poison,1,inflict(POISON| 2);,Emetic,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Slime Ball_upgraded,Add [poison]3 poison,1,inflict(POISON| 3);,Emetic,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze,Do [sword]<d6> damage[;]|on 6[;] add [poison]2 poison,2,attack(d); if(d == 6) inflict(POISON | 2); if(d >= 6) { sfx(~_poison~|~~|0.2); } sfxdamage(target|d); ,Emetic,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze_downgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]1 poison,2,attack(d); if(d == 6) inflict(POISON | 1); if(d >= 6) { sfx(~_poison~|~~|0.2); } sfxdamage(target|d); ,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Toxic Ooze_upgraded,Do [sword]<d6> damage[;]|on 6[;] add [poison]3 poison,2,attack(d); if(d == 6) inflict(POISON | 3); if(d >= 6) { sfx(~_poison~|~~|0.2); } sfxdamage(target|d); ,Emetic,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadsword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE2,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Broadsword_upgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|FREE3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Small Shield,Add [shield]<d6> shield,1,inflictself(SHIELD| d);,Protection,MAX3,,ORANGE,add1,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Two Handed Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL|NORMAL,,RED,change_power,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Two Handed Sword_upgraded,Do [sword]<d6> damage[;]|on 12[;] lock [lock]1 dice,2,attack(d); if(d == 12) inflict(LOCK | 1); if(d >= 12) { sfx(~_lock~|~~|0.2); } sfxdamage(target|d); ,Plasma Gun,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Woof Woof Woof,Repeat next action,2,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,8,RED,halfcountdown,noeffect,fury,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Wolf Puppy Bite,Do [sword]4 damage,2,attack(4);,Lucky Shot,EVEN,,YELLOW,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wolf Puppy Bite_upgraded,Do [sword]5 damage,2,attack(5);,Lucky Shot,EVEN,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rosewood Spear,Do [sword]<d6> damage[;]|gain [thorns]2 thorns,2,attack(d); inflictself(THORNS | 2);,Needle,EVEN,,GREEN,change_power,complicate,thorns,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(THORNS | 2); sfx(~_thorns~|~~|0.2);
Rosewood Spear_upgraded,Do [sword]<d6> damage[;]|gain [thorns]3 thorns,2,attack(d); inflictself(THORNS | 3);,Needle,EVEN,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,inflictself(THORNS | 3); sfx(~_thorns~|~~|0.2);
Poison Slingshot,Add [poison]4 poison,1,inflict(POISON| 4); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,change_countdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Slingshot_downgraded,Add [poison]2 poison,1,inflict(POISON| 2); bonus(1000);,Poison Arrow,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Slingshot_upgraded,Add [poison]4 poison,1,inflict(POISON| 4); bonus(1000);,Poison Arrow,COUNTDOWN,9,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Venus Fly Trap,Do [sword]<d6> damage[;]|on 6[;] restore [heal]2 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-2); } if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_heal~|~~|0.2); },Regenerate,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6) { attackself(-2); sfx(~_heal~|~~|0.2); }
Venus Fly Trap_downgraded,Do [sword]<d6> damage[;]|on 3[;] restore [heal]1 health,2,attack(d); if(d == 3) { bonus(2000); attackself(-1); } if(d < 3) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_heal~|~~|0.2); },Regenerate,MAX3,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 3) { attackself(-1); sfx(~_heal~|~~|0.2); }
Venus Fly Trap_upgraded,Do [sword]<d6> damage[;]|on 6[;] restore [heal]3 health,2,attack(d); if(d == 6) { bonus(2000); attackself(-3); } if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_heal~|~~|0.2); },Regenerate,NORMAL,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 6) { attackself(-3); sfx(~_heal~|~~|0.2); }
Detonator,Do [sword]1 damage for|every [poison]1 on enemy,1,attack(getstatus(POISON));,Emetic,EVEN,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ink Splat,Blind [blind]1 dice,2,inflict(BLIND| 1);,Oh No!,ODD,,PURPLE,change_power,complicate,blind,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Ink Splat_upgraded,Blind [blind]1 dice|[gray](Reuseable),2,inflict(BLIND| 1);,Oh No!,ODD,,PURPLE,,,,,-1,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Headbutt,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN,,PURPLE,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Headbutt_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Plasma Gun,EVEN|FREE1,,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bump,Dice value +1,1,if(d >= 6){ givedice([6| 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Bump_upgraded,Dice value +1|[gray](Reuseable),1,if(d >= 6){ givedice([6| 1]); } else { givedice(d + 1); },Megabump,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pickpocket,Steals [gold]1 gold|[gray](once per battle),1,bonus(1000); self.gold += 1; target.gold -= 1; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,change_power,complicate,,,0,NO,YES,excludefromrandomlists|showgold,,,,,,,,,,,,
Pickpocket_upgraded,Steals [gold]2 gold|[gray](once per battle),1,bonus(1000); self.gold += 2; target.gold -= 2; if(target.gold < 0) target.gold = 0; screenshake();,Harvest,EVEN,,GREEN,,,,,0,NO,YES,excludefromrandomlists|showgold,,,,,,,,,,,,
Run away!,Run away!,2,flee();,Jetpack,COUNTDOWN,20,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_upgraded,Run away!,2,flee();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_downgraded,No effect,2,donothing();,Jetpack,COUNTDOWN,20,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Run away!_weakened,No effect,2,donothing();,Jetpack,COUNTDOWN,15,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spiky Potion,Do [sword]8 damage|[gray](once per battle),2,attack(8);,Shuriken,COUNTDOWN,8,GRAY,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Spiky Potion_downgraded,Do [sword]4 damage|[gray](once per battle),2,attack(4);,Shuriken,COUNTDOWN,8,GRAY,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Toxic Potion,Inflict [poison]5 poison|[gray](once per battle),2,inflict(POISON| 5);,Poison Arrow,COUNTDOWN,8,PURPLE,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Toxic Potion_downgraded,Inflict [poison]3 poison,2,inflict(POISON| 3);,Poison Arrow,COUNTDOWN,8,PURPLE,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fire Potion,[fire]8 damage[;] burn all dice|[gray](once per battle),2,attack(8| FIRE); inflict(FIRE| ALL);,Ember,COUNTDOWN,8,RED,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fire Potion_downgraded,Do [fire]4 damage|[gray](once per battle),2,attack(4| FIRE);,Ember,COUNTDOWN,8,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Potion,[ice]8 damage[;] freeze all dice|[gray](once per battle),2,attack(8| ICE); inflict(ICE| ALL);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Potion_downgraded,Do [ice]4 damage|[gray](once per battle),2,attack(4| ICE);,Refrigerator,COUNTDOWN,8,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Bear Potion,Transform into a bear[;]|recover [heal]12 health,2,attackself(-12); beartransform();,Time Stop,COUNTDOWN,8,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Bear Potion_downgraded,Transform into a bear,2,beartransform();,Time Stop,COUNTDOWN,8,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,delay(1.0);,,,
Snowball,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d| ICE); inflict(ICE| 1);,Refrigerator,ODD,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball_upgraded,Do [ice]<d6> damage|Freeze [ice]1 dice,1,attack(d| ICE); inflict(ICE| 1);,Refrigerator,ODD|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snowball_downgraded,Do [sword]<d6> damage,1,attack(d);,Refrigerator,ODD,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d| FIRE); inflict(FIRE| 1);,Hellfire,EVEN,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_upgraded,Deal [fire]<d6> damage|Burn [fire]2 dice,1,attack(d| FIRE); inflict(FIRE| 2);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fireball_downgraded,Deal [sword]<d6> damage,1,attack(d);,Hellfire,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Mystery Box,Very mysterious,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~))| true);,Reversal,NORMAL,,YELLOW,change_power,noeffect,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Mystery Box_upgraded,Contents upgraded,1,giveequipment(rand(loadtext(~diceydungeons/mysterybox~)) + ~+~| true);,Reversal,NORMAL,,YELLOW,,,,,0,YES,NO,excludefromrandomlists|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Electric Shock,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d| SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Electric Shock_downgraded,Do [shock]<d6> damage[;]|[]+[shock]1 shock,1,attack(d| SHOCK); inflict(SHOCK);,Zap,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Burning Light,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d| FIRE); inflict(FIRE| 1); bonus(1000);,Ember,MIN4,,RED,simplify,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Burning Light_downgraded,Deal [fire]<d6> damage|Burn [fire]1 dice,1,attack(d| FIRE); inflict(FIRE| 1);,Ember,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d| ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,change_power,ice,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Ice Shard_downgraded,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d| ICE); inflict(ICE);,Refrigerator,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Spear,Do [sword]10 damage,1,attack(10);,Magic Six,REQUIRE6,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,2,,,,,,,,,,,
Magic Spear_downgraded,Do [sword]5 damage,1,attack(5);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Spear_upgraded,Do [sword]14 damage,1,attack(14);,Magic Six,REQUIRE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Magic Dagger,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Shuriken,NORMAL,,RED,change_power,complicate,,,-1,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Magic Dagger_upgraded,Do [sword]3 damage|[gray](Reuseable),1,attack(3);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d| SHOCK); inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,change_requirements,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_downgraded,[shock]Shocks the enemy,1,inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_upgraded,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d| SHOCK); inflict(SHOCK);,Plasma Gun,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d|ICE); if(d == 6) { inflict(ICE| 1); } sfx(~_ice~|~~|0.2); sfxdamage(target|d);,Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament_upgraded,Do [ice]<d6> damage[;]|on 6[;] inflict [ice]1 freeze,2,attack(d|ICE); if(d == 7) { inflict(ICE| 1); } sfx(~_ice~|~~|0.2); sfxdamage(target|d);,Arctic Storm,NORMAL|FREE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lament_downgraded,Do [ice]<d6> damage,2,attack(d|ICE); sfx(~_ice~|~~|0.2); ,Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Drain,Drain [heart]<d6> health,1,drain(d);,Blood Sip,MAX3,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Inferno,Do [fire]<d6> damage[;]|Burn [fire]1 dice,1,attack(d| FIRE); inflict(FIRE);,Ember,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Inferno_upgraded,Do [fire]<d6> damage[;]|Burn [fire]2 dice,1,attack(d| FIRE); inflict(FIRE| 2);,Ember,NORMAL|NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock,2,attack(d | SHOCK); if(d == 6) inflict(SHOCK); if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_shock~|~~|0.2); },Jackhammer,NORMAL,,YELLOW,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_downgraded,Do [shock]<d6> damage,2,attack(d | SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_weakened,Do [shock]<d6> damage,1,attack(d | SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Hammer_deckupgrade,Do [shock]<d6> damage|[shock]Shocks the enemy,2,attack(d| SHOCK); inflict(SHOCK);,Jackhammer,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]1 burn,2,attack(d| FIRE); if(d == 6) inflict(FIRE);,Blowtorch,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip_upgraded,Do [fire]<d6> damage[;]|on 6[;] inflict [fire]2 burn,2,attack(d| FIRE); if(d == 6) inflict(FIRE| 2);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Whip_downgraded,Do [fire]<d6> damage,2,attack(d| FIRE);,Blowtorch,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sonic Wave,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d| WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,weaken,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Sonic Wave_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,1,attack(d| WEAKEN); inflict(WEAKEN);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sonic Wave_downgraded,[weaken]Weakens enemy,1,inflict(WEAKEN);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Echo Blast,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d| WEAKEN); inflict(WEAKEN| 2);,Plasma Gun,ODD,,ORANGE,change_power,complicate,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Echo Blast_upgraded,Do [weaken]<d6> damage|[]+[weaken]2 weaken,2,attack(d| WEAKEN); inflict(WEAKEN| 2);,Plasma Gun,ODD|FREE1,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell,Deal [ice]5 damage|Freeze [ice]2 dice,1,attack(5 | ICE); inflict(ICE| 2);,Refrigerator,REQUIRE1,,BRIGHTCYAN,change_power,change_power,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell_downgraded,Deal [ice]5 damage|Freeze [ice]1 dice,1,attack(5 | ICE); inflict(ICE| 1);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Freeze Spell_upgraded,Deal [ice]5 damage|Freeze [ice]ALL dice,1,attack(5 | ICE); inflict(ICE| ALL);,Refrigerator,REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell,Deal [fire]5 damage|Burn [fire]2 dice,1,attack(5| FIRE); inflict(FIRE| 2);,Hellfire,REQUIRE2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell_upgraded,Deal [fire]6 damage|Burn [fire]ALL dice,1,attack(6| FIRE); inflict(FIRE| ALL);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Spell_downgraded,Deal [sword]5 damage,1,attack(5);,Hellfire,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Spell,Inflict [poison]4 poison,1,inflict(POISON| 4);,Poison Arrow,REQUIRE3,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Spell_upgraded,Inflict [poison]5 poison,1,inflict(POISON| 5);,Poison Arrow,REQUIRE3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell,Deal [shock]5 damage|Shock [shock]2 equipment,1,attack(5 | SHOCK); inflict(SHOCK| 2);,Jackhammer,REQUIRE4,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell_downgraded,Deal [shock]5 damage|Shock [shock]1 equipment,1,attack(5 | SHOCK); inflict(SHOCK| 1);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Thunder Spell_upgraded,Deal [shock]5 damage|Shock [shock]3 equipment,1,attack(5 | SHOCK); inflict(SHOCK| 3);,Jackhammer,REQUIRE4,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Teleport Spell,Dodge next attack,1,inflictself(DODGE);,Quick Thinking,REQUIRE5,,YELLOW,simplify,noeffect,dodge,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Hall of Mirrors,[]+1 dice this fight,1,if(simulation) { bonus(1000); } else{ self.extradice++; },Focus,REQUIRE6,,PURPLE,simplify,doublerequirements,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Sneeze,Reduce the countdowns|on all equipment by <slotdoubles>,2,boostcountdowns(d);,Accelerate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sneeze_upgraded,Reduce the countdowns|on all equipment to zero,2,boostcountdowns(-1);,Accelerate,DOUBLES|DOUBLES,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sneeze_downgraded,Reduce the countdowns|on all equipment by 6,2,boostcountdowns(6);,Accelerate,REQUIRE6|REQUIRE6,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Spike,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,6,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_upgraded,Do [sword]3 damage,1,attack(3);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_weakened,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,4,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spike_downgraded,Do [sword]1 damage,1,attack(1);,Pea Gun,COUNTDOWN,6,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Needle,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,change_power,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Needle_upgraded,Inflict [poison]1 poison|[gray](Reuseable),1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,5,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Needle_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pirate Hook,Do [sword]<d6> damage[;]|on 4[;] you can re-use this,2,attack(d); if(d==4) bonus(1000);,Efficiency,MAX5,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,excludefromrandomlists,,,self.setvar(~piratehookkludge~|0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~|0); furykludge = true; } } } if(d == 4 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~|~~|0.2); },,if(d == 4) self.setvar(~piratehookkludge~|1);,
Pirate Hook_upgraded,Do [sword]<d6> damage[;]|on 5[;] you can re-use this,2,attack(d); if(d==5) bonus(1000);,Efficiency,NORMAL,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,self.setvar(~piratehookkludge~|0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~|0); furykludge = true; } } } if(d == 5 && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_recycle~|~~|0.2); },,if(d == 5) self.setvar(~piratehookkludge~|1);,
Pirate Hook_downgraded,Do [sword]<d6> damage,2,attack(d);,Efficiency,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire,Deal [fire]6 damage|Burn [fire]1 dice,2,attack(6| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire_upgraded,Deal [fire]8 damage|Burn [fire]1 dice,2,attack(8| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cannon Fire_downgraded,Deal [fire]3 damage|Burn [fire]1 dice,2,attack(3| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,8,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Chocolate Cookie,Repeat next action,1,if(getstatusself(FURY) == 0) { bonus(1000); } else { bonus(-1000); } inflictself(FURY);,Fury,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,fury,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Chocolate Cookie_downgraded,Next equipment has|+1 use this turn,1,inflictself(REEQUIPNEXT);,Fury,COUNTDOWN,12,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Cauldron,Do [sword]1 damage[;]|get a new dice,1,attack(1); givedice();,Random Roll,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Cauldron_upgraded,Do [sword]1 damage[;] reroll dice|[gray](Reuseable),1,attack(1); givedice();,Random Roll,NORMAL,,PURPLE,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice();
Cauldron_downgraded,Do [sword]1 damage,1,attack(1);,Random Roll,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lock 1,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6,Unlocks Keyblade[;]|return the dice,1,giveequipment(~Keyblade~|true|false|e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,change_power,doublerequirements,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 1_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE1,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 2_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE2,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 3_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE3,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 4_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE4,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 5_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE5,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Lock 6_upgraded,Unlocks Keyblade+[;]|return the dice,1,giveequipment(~Keyblade+~|true|false|e); givedice(d);,Magic Dice,REQUIRE6,,GRAY,,,,,0,YES,YES,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Keyblade,Do [sword]3 damage[;]|return the dice,1,attack(3); givedice(d);,Magic Dice,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice(d);
Keyblade_upgraded,Do [sword]4 damage[;]|return the dice,1,attack(4); givedice(d);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Keyblade_downgraded,Do [sword]1 damage,1,attack(1);,Magic Dice,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rock,Do [sword]<d6> damage|[gray](once per battle),1,attack(d);,Shuriken,NORMAL,,RED,add2,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Fists,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fists_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Knuckle Duster,Do [sword]3 damage|[gray](Reuseable),2,attack(3); if(d <= 3) bonus(1000);,Shuriken,NORMAL,,RED,change_power,removereusable,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Knuckle Duster_upgraded,Do [sword]4 damage|[gray](Reuseable),2,attack(4); if(d <= 4) bonus(1000);,Shuriken,NORMAL,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spanner,Combine dice,1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d| ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Spanner_upgraded,Combine dice|[gray](Reuseable),1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d| ~combinedice~);,Battle Wrench,NORMAL|NORMAL,,GREEN,,,,,3,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Pea Shooter,Do [sword]2 damage|[gray](Reuseable),1,attack(2);,Pea Gun,COUNTDOWN,5,RED,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pea Shooter_downgraded,Do [sword]1 damage|[gray](Reuseable),1,attack(1);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pea Shooter_upgraded,Do [sword]4 damage|[gray](Reuseable),1,attack(4);,Pea Gun,COUNTDOWN,5,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Age,Freeze all dice,2,inflict(ICE | ALL); bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Age_upgraded,Freeze all dice,2,inflict(ICE | ALL);  bonus(1000);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Age_downgraded,Freeze all dice,2,inflict(ICE | ALL);  bonus(1000);,Arctic Storm,REQUIRE1|REQUIRE1|REQUIRE1|REQUIRE1,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blizzard,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,1,attack(d| ICE); inflict(ICE);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Blizzard_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]2 dice,1,attack(d| ICE); inflict(ICE| 2);,Arctic Storm,NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud,Inflict [poison]<d6> poison,1,inflict(POISON| d);,Poison Arrow,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud_downgraded,Inflict [poison]<d6> poison,1,inflict(POISON| d);,Poison Arrow,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Poison Cloud_upgraded,Inflict [poison]3 poison,1,inflict(POISON| 3);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blight,Double [poison] poison,1,inflict(POISON| getstatus(POISON));,Poison Arrow,COUNTDOWN,24,PURPLE,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blight_weakened,Increase [poison] poison|by 50 percent,1,inflict(POISON| getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,18,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Blight_downgraded,Increase [poison] poison|by 50 percent,1,inflict(POISON| getstatus(POISON) * 0.5);,Poison Arrow,COUNTDOWN,24,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Spear,Do [sword]<d6> damage[;]|+[sword]1 for each [thorns] thorn,2,attack(d + getstatusself(THORNS));,Needle,EVEN,,GREEN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Spear_upgraded,Do [sword]<d6> damage[;]|+[sword]2 for each [thorns] thorn,2,attack(d + (getstatusself(THORNS) * 2));,Needle,EVEN,,GREEN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cactus Shield,Add [thorns]1 thorns|[gray](Reuseable),2,inflictself(THORNS| 1);,Needle,ODD,,GREEN,simplify,complicate,,,-1,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Dust Cloud,Do [sword]<d6> damage[;]|on 6[;] blind [blind]2 dice,2,attack(d); if(d == 6) { bonus(2000); inflict(BLIND| 2); } if(d < 6) { sfxdamage(target|d); } else { sfxdamage(target|d); sfx(~_blind~|~~|0.2); },Regenerate,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Dust Cloud_upgraded,Do [sword]<d6> damage[;]|blind [blind]2 dice,2,attack(d); inflict(BLIND| 2);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Dust Cloud_downgraded,Do [sword]<d6> damage,2,attack(d);,Regenerate,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Blood Suck,Drain [heart]<d6> health,2,drain(d);,Blood Sip,MAX4,,RED,simplify,decreaserange,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole,Inflict [weaken]3 weaken,2,inflict(WEAKEN| 3); bonus(-200);,Scream,COUNTDOWN,12,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole_downgraded,Inflict [weaken]2 weaken,2,inflict(WEAKEN| 2); bonus(-100);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sinkhole_upgraded,Inflict [weaken]4 weaken,2,inflict(WEAKEN| 4); bonus(-300);,Scream,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe,Do [sword]<double> damage,2,attack(d * 2); bonus(200);,Scream,MAX4,,YELLOW,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_downgraded,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_weakened,Do [sword]<double> damage,1,attack(d * 2);,Scream,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Battle Axe_deckupgrade,Do [sword]<double> damage,2,attack(d * 2);,Scream,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt,Do [sword]5 damage[;]|Lock [lock]1 dice,2,attack(5); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt_upgraded,Do [sword]8 damage[;]|Lock [lock]1 dice,2,attack(8); inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Beetle Headbutt_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,COUNTDOWN,12,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl,Curse enemy,2,inflict(CURSE);,Cackle,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_upgraded,Curse enemy,2,inflict(CURSE);,Cackle,COUNTDOWN,10,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_downgraded,Curse enemy,2,inflict(CURSE);,Cackle,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dire Wolf Howl_weakened,No effect,2,donothing(); bonus(-10000);,Cackle,COUNTDOWN,10,PURPLE,,,,_whoosh,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON| 1);,Poison Arrow,MAX3,,PURPLE,change_requirements,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw_downgraded,Do [sword]<d6> damage,1,attack(d);,Poison Arrow,MAX3,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Claw_upgraded,Do [sword]<d6> damage[;]|and add [poison]1 poison,1,attack(d); inflict(POISON| 1);,Poison Arrow,MAX5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Camouflage,Blind [blind]2 dice,2,inflict(BLIND| 2);  bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,change_power,change_power,blind,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Camouflage_upgraded,Blind [blind]4 dice,2,inflict(BLIND| 4);  bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Camouflage_downgraded,Blind [blind]1 dice,2,inflict(BLIND);  bonus(1000);,Oh No!,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Deep Sea Howl,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE4,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Deep Sea Howl_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm_upgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,EVEN,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Overwhelm_downgraded,[sword]<timesused> dmg[;] +[sword]1 each use|[gray](Reuseable),2,attack(e.timesused+1);,Magic Dice,REQUIRE6,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Crystallize,Create a random|crystal weapon,2,giveequipment(rand([~Earth~|~Fire~|~Air~|~Ice~|~Power~|~Smokey~|~Life~|~Hollow~]) + ~ Crystal~| true| false| e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,change_requirements,change_power,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_upgraded,Create a random|crystal weapon,2,giveequipment(rand([~Earth~|~Fire~|~Air~|~Ice~|~Power~|~Smokey~|~Life~|~Hollow~]) + ~ Crystal+~| true| false| e); bonus(-1000);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Crystallize_downgraded,No effect,2,bonus(-1500);,Magic Six,COUNTDOWN,6,GRAY,,,,,0,YES,NO,excludefromrandomlists|cannotreuse|curseavoid,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Earth Crystal,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,attack(d| WEAKEN); inflict(WEAKEN);,Plasma Gun,ODD,,ORANGE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fire Crystal,Deal [fire]<d6> damage|Burn [fire]1 dice,2,attack(d| FIRE); inflict(FIRE);,Ember,EVEN,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Crystal,Do [shock]<d6> damage[;]|[]+[shock]1 shock,2,attack(d| SHOCK); inflict(SHOCK);,Zap,EVEN,,YELLOW,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Crystal,Do [ice]<d6> damage[;]|Freeze [ice]1 dice,2,attack(d| ICE); inflict(ICE);,Refrigerator,ODD,,BRIGHTCYAN,simplify,complicate,ice,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Power Crystal,Gain a random blessing,2,var randomstatus = SHIELD; if(getstatusself(FURY) == 0) { randomstatus = rand([SHIELD|FURY|REDUCE|REEQUIPNEXT|DODGE]); }else { randomstatus = rand([SHIELD|REDUCE|REEQUIPNEXT|DODGE]); } var a = 1; if (randomstatus == SHIELD) a = 4; if (randomstatus == REDUCE) a = 2; inflictself(randomstatus | a); if(randomstatus == REEQUIPNEXT) randomstatus = ~recycle~; if(randomstatus == REDUCE) randomstatus = ~shield~; sfx(~_~ + randomstatus.toLowerCase()|~~|0.2);,Power Up,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,donothing();,
Smokey Crystal,Curse enemy,2,inflict(CURSE);,Cackle,ODD,,PURPLE,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Life Crystal,Recover [heal]<d6> health,2,attackself(-d);,Regenerate,MAX4,,GREEN,increaserange,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hollow Crystal,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff,Deal [fire]9 damage|Burn [fire]2 dice,2,attack(9| FIRE); inflict(FIRE| 2);,Blowtorch,COUNTDOWN,12,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff_weakened,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,9,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Staff_downgraded,Deal [fire]5 damage|Burn [fire]1 dice,2,attack(5| FIRE); inflict(FIRE| 1);,Blowtorch,COUNTDOWN,12,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff,Deal [ice]9 damage|Inflict [ice]2 freeze,2,attack(9| ICE); inflict(ICE| 2);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff_weakened,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wicker Gemstaff_downgraded,Deal [ice]5 damage|Inflict [ice]1 freeze,2,attack(5| ICE); inflict(ICE| 1);,Flash Freeze,COUNTDOWN,12,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
First Aid Kit,Heal [heal]8 health,1,attackself(-8);,Regenerate,COUNTDOWN,16,GREEN,threequartercountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
First Aid Kit_downgraded,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,16,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
First Aid Kit_weakened,Heal [heal]4 health,1,attackself(-4);,Regenerate,COUNTDOWN,12,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Squawk,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk_upgraded,Do [sword]2 damage|Silence Enemy,2,attack(2); inflict(SILENCE); bonus(1000);,Dial Up Sounds,DOUBLES|DOUBLES,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Squawk_downgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE6|REQUIRE6,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Flight,Dodge next attack,2,inflictself(DODGE);,Quick Thinking,EVEN,,YELLOW,simplify,complicate,dodge,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core,Reduce health by half,2,pierceattack((target.hp / 2));,Time Stop,COUNTDOWN,16,RED,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core_weakened,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,12,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rotten Core_downgraded,Reduce health by one third,2,pierceattack((target.hp / 3));,Time Stop,COUNTDOWN,16,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,MIN4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Worm Bite_upgraded,Do [sword]3 damage,2,attack(3);,Bubble Gun,NORMAL,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire,Inflict [vanish]Vanish,2,inflict(VANISH);,Cackle,COUNTDOWN,12,PINK,halfcountdown,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire_downgraded,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,12,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Fool's Fire_weakened,Burns [fire]1 dice,2,inflict(FIRE);,Cackle,COUNTDOWN,6,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,change_requirements,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter_downgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Six Shooter_upgraded,Do [sword]<d6> damage|[gray](Reuseable),2,attack(d);,Fury,REQUIRE6,,RED,,,,,6,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Midnight Charm,Roll 2 sixes,1,givedice([6| 6]);,Focus,COUNTDOWN,10,GREEN,halfcountdown,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Midnight Charm_weakened,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,5,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Midnight Charm_downgraded,Roll 1 six,1,givedice(6);,Focus,COUNTDOWN,10,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Rat,Inflict [poison]1 poison[;]|roll a new dice,1,inflict(POISON); givedice();,Emetic,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,givedice();
Rat_downgraded,Inflict [poison]1 poison,1,inflict(POISON);,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Rat_upgraded,Inflict [poison]1 poison[;] roll a|dice with value 3 or more,1,inflict(POISON); givedice(rand([3|4|5|6]));,Emetic,COUNTDOWN,5,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(rand([3|4|5|6]));
Shooting Star,Do [sword]<d6> damage[;]|inflict [confuse]Confuse,2,attack(d); inflict(CONFUSE);,Stardust,ODD,,YELLOW,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Stardust,EVEN,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow_upgraded,Do [sword]<d6> damage[;]|add 2x random status,2,attack(d); var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfxdamage(target|d); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Stardust,NORMAL,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Dark Shadow_downgraded,Add 2x random status,2,var randstatus = rand([CURSE|LOCK|FIRE|ICE|WEAKEN|SHOCK|POISON]); inflict(randstatus|2); sfx(~_~ + randstatus.toLowerCase()|~~|0.2);,Stardust,EVEN,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Wail,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,REQUIRE5,,PURPLE,change_requirements,doublerequirements,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Wail_upgraded,Silence Enemy,2,inflict(SILENCE); bonus(1000);,Dial Up Sounds,MIN5,,PURPLE,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
Shriek,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,REQUIRE2,,PURPLE,change_power,doublerequirements,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shriek_upgraded,Curse enemy,2,inflict(CURSE); bonus(1000);,Cackle,MAX2,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare,Do [sword]999 damage,2,attack(999);,Reversal,COUNTDOWN,99,PURPLE,threequartercountdown,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare_downgraded,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,99,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Nightmare_weakened,Do [sword]998 damage,2,attack(998);,Reversal,COUNTDOWN,74,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cardboard Sword,Do [sword]<cardboardsword> damage|Lose [sword]2 each use,2,var amount = 9 - (e.timesused * 2); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cardboard Sword_upgraded,Do [sword]<upgradedcardboardsword> damage|Lose [sword]1 each use,2,var amount = 9 - (e.timesused); if(amount >= 1){ attack(amount); } else { attack(1); },Stardust,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glue,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,change_power,removereusable,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glue_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,ODD,,PURPLE,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d| WEAKEN); inflict(WEAKEN);,Scream,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse_upgraded,Do [weaken]<d6> damage|[weaken]Weakens enemy,2,bonus(1000); attack(d| WEAKEN); inflict(WEAKEN);,Scream,MAX5,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Sad Verse_downgraded,Do [weaken]<d6> damage,2,bonus(1000); attack(d| WEAKEN);,Scream,MAX4,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note,Do [weaken]12 damage,2,attack(12|WEAKEN);,Scream,COUNTDOWN,20,ORANGE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note_upgraded,Do [weaken]12 damage|[weaken]Weakens enemy,2,attack(12|WEAKEN); inflict(WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
High Note_downgraded,Do [weaken]9 damage,2,attack(9|WEAKEN);,Scream,COUNTDOWN,20,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Avalanche,Do [sword]3 damage[;]|reroll with lower value,1,attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN3,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_upgraded,Do [sword]4 damage[;]|reroll with lower value,1,attack(4); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN3,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Avalanche_downgraded,Do [sword]3 damage[;]|reroll with lower value,1,attack(3); var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));,Shuriken,MIN4,,GRAY,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,var outcome = []; for(i in 1 ... d) { outcome.push(i); } givedice(rand(outcome));
Glare,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,change_power,change_power,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glare_upgraded,Lock [lock]1 dice|[gray](Reuseable),2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Glare_downgraded,Lock [lock]1 dice,2,inflict(LOCK);,Stardust,REQUIRE1,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet,Do [sword]<twicetimesused> damage|Add +2 each use,2,attack((e.timesused * 2) + 4);,Magic Dice,COUNTDOWN,7,RED,reducesize,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_downgraded,Do [sword]<twicetimesused> damage,2,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_weakened,Do [sword]<twicetimesused> damage,1,attack((e.timesused * 2) + 4); e.timesused--;,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Electromagnet_deckupgrade,Do [sword]<twicetimesused_plus1> damage|Add +2 each use,2,attack((e.timesused * 2) + 5);,Magic Dice,COUNTDOWN,7,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Yoink,Borrow equipment|until next turn,2,if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Yoinked!~; randomequipment.unavailabledetails = [~I've borrowed this.~|~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); }}} else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,EVEN,,PINK,simplify,complicate,,,0,NO,NO,excludefromrandomlists|cannotsteal|curseavoid|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Campfire,[fire]<timesused> dmg[;] burn a dice|Add +[fire]1 each use,2,attack(e.timesused + 1| FIRE); inflict(FIRE); bonus(1000);,Ember,EVEN,,RED,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Campfire_upgraded,[fire]<timesused> dmg[;] burn two dice|Add +[fire]1 each use,2,attack(e.timesused + 1| FIRE); inflict(FIRE| 2); bonus(1000);,Ember,EVEN,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Conditioner,[ice]<timesused> dmg[;] inflict [ice]1 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1| ICE); inflict(ICE); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Air Conditioner_upgraded,[ice]<timesused> dmg[;] inflict [ice]2 freeze|Add +[ice]1 each use,2,attack(e.timesused + 1| ICE); inflict(ICE| 2); bonus(1000);,Flash Freeze,EVEN,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE1,,RED,change_power,change_power,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife_upgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3|FREE2,,RED,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Pocket Knife_downgraded,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Plasma Gun,MAX3,,RED,,,,,3,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake,Weaken [weaken]3 equipment[;]|do [weaken]6 damage,2,attack(6| WEAKEN); inflict(WEAKEN| 3);,Scream,COUNTDOWN,10,ORANGE,change_power,change_power,weaken,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake_downgraded,Weaken [weaken]2 equipment[;]|do [weaken]6 damage,2,attack(6| WEAKEN); inflict(WEAKEN| 2);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Earthquake_upgraded,Weaken [weaken]3 equipment[;]|do [weaken]9 damage,2,attack(9| WEAKEN); inflict(WEAKEN| 3);,Scream,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD| d);,Protection,MAX5,,ORANGE,change_power,change_power,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield_downgraded,Add [shield]<d6> shield,2,inflictself(SHIELD| d);,Protection,MAX5,,ORANGE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Tower Shield_upgraded,Add [shield]<d6> shield|[gray](Reuseable),2,inflictself(SHIELD| d);,Protection,NORMAL,,ORANGE,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,12,ORANGE,change_power,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!_upgraded,Bash with shield[;]|do [shield]<myshield> damage,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100);,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Charge!_downgraded,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD| getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,12,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,removestatusself(SHIELD| getstatusself(SHIELD));
Charge!_weakened,Bash with shield[;] do [shield]<myshield>|damage[;] but lose all shield,2,attack(getstatusself(SHIELD)); bonus(getstatusself(SHIELD) * 100); removestatusself(SHIELD| getstatusself(SHIELD));,Plasma Gun,COUNTDOWN,9,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,removestatusself(SHIELD| getstatusself(SHIELD));
Shield Bash,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,DOUBLES|DOUBLES,,ORANGE,change_requirements,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shield Bash_downgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,REQUIRE6|REQUIRE6,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Shield Bash_upgraded,Bash with shield[;]|do [shield]<myshield> damage,1,attack(getstatusself(SHIELD));,Plasma Gun,EVEN,,ORANGE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud,Inflict [poison]3 poison|and [blind]3 blind,2,inflict(POISON| 3); inflict(BLIND| 3);,Poison Arrow,COUNTDOWN,15,PURPLE,change_poison,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud_downgraded,Inflict [poison]3 poison,2,inflict(POISON| 3);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Smog Cloud_upgraded,Inflict [poison]4 poison|and [blind]4 blind,2,inflict(POISON| 4); inflict(BLIND| 4);,Poison Arrow,COUNTDOWN,15,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE1,,PURPLE,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse_upgraded,Do [sword]<d6> damage[;]|Inflict curse,1,attack(d); inflict(CURSE);,Cackle,REQUIRE1|FREE4,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Curse_downgraded,Inflict curse,1,inflict(CURSE);,Cackle,REQUIRE1,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK| 2);,Overload,REQUIRE2|FREE2,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind_upgraded,Do [sword]<d6> damage[;]|Lock [lock]2 dice,1,attack(d); inflict(LOCK| 2);,Overload,REQUIRE2|FREE4,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Wind_downgraded,Lock [lock]2 dice,1,inflict(LOCK| 2);,Overload,REQUIRE2,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Shadow,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND| 3);,Overload,REQUIRE3|FREE3,,GRAY,change_power,change_power,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Shadow_upgraded,Do [sword]<d6> damage[;]|Blind [blind]3 dice,1,attack(d); inflict(BLIND| 3);,Overload,REQUIRE3|FREE5,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Shadow_downgraded,Blind [blind]3 dice,1,inflict(BLIND| 3);,Overload,REQUIRE3,,GRAY,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Cold,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d| ICE); inflict(ICE| 4);,Arctic Storm,REQUIRE4|FREE4,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Cold_upgraded,Do [ice]<d6> damage[;]|Freeze [ice]4 dice,1,attack(d| ICE); inflict(ICE| 4);,Arctic Storm,REQUIRE4|FREE5,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Cold_downgraded,Freeze [ice]4 dice,1,inflict(ICE| 4);,Arctic Storm,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d| FIRE); inflict(FIRE| 5);,Ember,REQUIRE5|FREE5,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes_upgraded,Do [fire]<d6> damage[;]|Burn [fire]5 dice,1,attack(d| FIRE); inflict(FIRE| 5);,Ember,REQUIRE5|FREE6,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Ashes_downgraded,Burn [fire]5 dice,1,inflict(FIRE| 5);,Ember,REQUIRE5,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Storm,Do [shock]<d6> damage[;]|Inflict [shock]6 shock,1,attack(d| SHOCK); inflict(SHOCK | 6);,Zap,REQUIRE6|FREE6,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
The Storm_upgraded,Do [shock]<d6> damage[;]|Shock [shock]6 and silence,1,attack(d| SHOCK); inflict(SHOCK | 6); inflict(SILENCE);,Zap,REQUIRE6|FREE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists|cannotsteal,,,,,,,,,,,,
The Storm_downgraded,Inflict [shock]6 shock,1,inflict(SHOCK | 6);,Zap,REQUIRE6,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting,Do [shock]4 damage[;]|Inflict [shock]1 shock,1,attack(4| SHOCK); inflict(SHOCK | 1);,Zap,COUNTDOWN,5,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting_upgraded,Do [shock]6 damage[;]|Inflict [shock]1 shock,1,attack(6| SHOCK); inflict(SHOCK | 1);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bee Sting_downgraded,Do [sword]4 damage,1,attack(4);,Zap,COUNTDOWN,5,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
[END ENEMY EQUIPMENT],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN BEAR],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
Bear Maul,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE| ALL); } attack(d);,Bear Smash,NORMAL|FREE2,,RED,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bear Maul_upgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE| ALL); } attack(d);,Bear Smash,NORMAL|FREE4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Bear Maul_downgraded,Do [sword]<d6> damage,2,if(getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE| ALL); } attack(d);,Bear Smash,MAX4,,RED,,,,,0,NO,NO,,,,,,,,,,,,,
Hibernate,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX4,,GREEN,change_power,change_power,,,0,YES,NO,,,,,,,,,,,,,
Hibernate_upgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,NORMAL,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Hibernate_downgraded,Recover [heal]<d6> health,1,attackself(-d);,Time Stop,MAX2,,GREEN,,,,,0,YES,NO,,,,,,,,,,,,,
Bear Roar,Weaken [weaken]3 equipment,1,inflict(WEAKEN| 3);,Bear Smash,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,NO,NO,,,,,,,,,,,,,
Bear Roar_upgraded,Weaken [weaken]4 equipment,1,inflict(WEAKEN| 4);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Bear Roar_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Bear Smash,COUNTDOWN,10,ORANGE,,,,,0,NO,NO,,,,,,,,,,,,,
Bear Charge,Repeat next action,1,inflictself(FURY);,Fury,COUNTDOWN,10,PURPLE,halfcountdown,noeffect,,,0,YES,NO,,,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;,
Picnic Basket,Keep a <d6> for next turn,1,inflictself(~stash~+d|1); inflictself(~illuminate~);,,NORMAL,,PINK,change_power,complicate,,,0,YES,NO,,,,,,,,,,,,,
Picnic Basket_upgraded,Keep a <d6> for next turn|[gray](Reuseable),1,inflictself(~stash~+d|1); inflictself(~illuminate~);,,NORMAL,,PINK,,,,,2,YES,NO,,,,,,,,,,,,,
Marmalade,Get a [dice]6 next turn,1,inflictself(~stash~+6|1); inflictself(~illuminate~);,,REQUIRE1,,ORANGE,simplify,doublerequirements,,,0,YES,NO,,,,,,,,,,,,,
Bear Trap,Lock [lock]1 dice,1,inflict(LOCK| 1); bonus(1000);,Random Roll,REQUIRE1,,PURPLE,increaserange,doublerequirements,,,0,NO,NO,,,,,,,,,,,,,
Bearpick,Shred a big dice into|other[;] smaller dice,1,var splitamount = rand([2|2|2|3|3|4]); givedice(split(d|splitamount)| ~splitdice~);,Steal,MIN5,,GREEN,increaserange,decreaserange,,,0,YES,NO,,,,,,,,,,,,,
Honey,Reroll the dice[;] get a|higher value than before,1,if(d == 1) { givedice(rand([2|3|4|5|6])); } else if(d == 2) { givedice(rand([3|4|5|6])); } else if(d == 3) { givedice(rand([4|5|6])); } else if(d == 4) { givedice(rand([5|6])); } else if(d >= 5) { givedice(6); },Megabump,MAX4,,YELLOW,increaserange,decreaserange,,,0,YES,NO,,,,,,,,,,,,,
Bear Swipe,Do [sword]<d6> damage[;]|return the dice,1,attack(d); givedice(d);,Shuriken,MAX3,,RED,increaserange,decreaserange,,,0,NO,NO,,,,,,,,,,,,,givedice(d);
Bear Hug,Do [sword]<double> damage[;]|lose a dice,2,attack(d * 2); self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1- self.dice;,,NORMAL,,YELLOW,add1,complicate,,,0,NO,NO,,,,,,,,,,,,,self.extradice--; if(self.dice + self.extradice < 1) self.extradice = 1 - self.dice; sfx(~magic_gaindice~|~~|0.2);
[END BEAR],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN MISC USED IN MOD],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
Snowblower,[ice]<d6> dmg[;] +[ice]2 freeze|[gray](once per battle),1,attack(d| ICE); inflict(ICE| 2);,Flash Freeze,NORMAL|NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Snowblower_upgraded,[ice]<d6> dmg[;] +[ice]4 freeze|[gray](once per battle),2,attack(d| ICE); inflict(ICE| 4);,Flash Freeze,NORMAL|NORMAL|NORMAL|NORMAL,,BRIGHTCYAN,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Flamethrower,[fire]<d6> dmg[;] +[fire]2 burn|[gray](once per battle),1,attack(d| FIRE); inflict(FIRE| 2);,Blowtorch,NORMAL|NORMAL,,RED,change_power,complicate,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Flamethrower_upgraded,[fire]<d6> dmg[;] +[fire]4 burn|[gray](once per battle),2,attack(d| FIRE); inflict(FIRE| 4);,Blowtorch,NORMAL|NORMAL|NORMAL|NORMAL,,RED,,,,,0,NO,YES,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3) | ICE); } else { attack((d) | ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter_upgraded,Do [ice]<d6> damage[;]|double if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d * 2) | ICE); } else { attack((d) | ICE); },Arctic Storm,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Ice Shatter_downgraded,Do [ice]<d6> damage[;]|+[ice]3 if enemy is frozen,2,if(getstatus(ICE) > 0) { attack((d + 3) | ICE); } else { attack((d) | ICE); },Arctic Storm,MAX3,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3) | FIRE); } else { attack((d) | FIRE); },Hellfire,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter_upgraded,Do [fire]<d6> damage[;]|double if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d * 2) | FIRE); } else { attack((d) | FIRE); },Hellfire,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Flame Shatter_downgraded,Do [fire]<d6> damage[;]|+[fire]3 if enemy is burnt,2,if(getstatus(FIRE) > 0) { attack((d + 3) | FIRE); } else { attack((d) | FIRE); },Hellfire,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Last Laugh,Enemy will survive the|next fatal blow,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,survive,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Last Laugh?,Enemy will survive for|the next three turns...,1,inflict(SURVIVE);,Still Standing,COUNTDOWN,24,PURPLE,threequartercountdown,noeffect,,,0,NO,YES,excludefromrandomlists|alternateversion,,,,,,,,,,,,
Iced Latte,Self inflict [ice]1 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE|1); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Iced Latte_upgraded,Roll an extra 1|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); givedice(1);,,,,,,,
Iced Latte_downgraded,Self inflict [ice]2 freeze|(Always offered as scrap),1,,Flash Freeze,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(ICE|2); sfx(~_ice~);,e.animate(~flashandshake~);,,,,,,,
Scrap Kettle,Self inflict [fire]1 burn|(Always offered as scrap),1,,Ember,,,GRAY,change_power,change_power,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(FIRE|1); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Scrap Kettle_upgraded,Roll a burning dice|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,,e.animate(~flashandshake~); inflictself(FIRE|1); givedice(); sfx(~_fire~);,,,,,,,
Scrap Kettle_downgraded,Self inflict [fire]2 burns|(Always offered as scrap),1,,Ember,,,GRAY,,,,none,0,NO,NO,excludefromrandomlists|appearsforparts,,,,inflictself(FIRE|2); sfx(~_fire~);,e.animate(~flashandshake~);,,,,,,,
Boop,Do [sword]2 damage,2,attack(2);,Bubble Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Boop_upgraded,Do [sword]2 damage[;]|return the dice,2,attack(2); givedice(d);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(d);
Boop_downgraded,Do [sword]1 damage,2,attack(1);,Bubble Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Bop,Do [sword]3 damage,2,attack(3); if(!simulation){ self.setvar(~bopcount~| self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Bop_upgraded,Do [sword]5 damage,2,attack(5);  if(!simulation){ self.setvar(~bopcount~| self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Bop_downgraded,Do [sword]2 damage,2,attack(2);  if(!simulation){ self.setvar(~bopcount~| self.getvar(~bopcount~) + 1); },Bubble Gun,MIN3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,self.setvar(~bopcount~| 0);,self.setvar(~bopcount~| 0);,,,,,,,,,
Spiked Shield,Even: [sword]<evendice_d6> damage|Odd: [shield]<odddice_d6> shield,2,if(d%2 == 0){ attack(d); sfxdamage(target|d); } else { inflictself(SHIELD| d); sfx(~_shield~); },Protection,MAX5,,RED,simplify,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,if(d%2 == 0){ e.castdirection = 1; } else { e.castdirection = -1; },,,
Boomerang,Do [sword]<double> to enemy[;]|but [sword]<d6> to yourself,1,attack(2 * d); boomerang(d);,Fury,NORMAL,,RED,change_boomerang,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,attackself(d); sfxdamage(self|d);
Boomerang_upgraded,Do [sword]<double> to enemy[;]|but [sword]3 to yourself,1,attack(2 * d); boomerang(3);,Fury,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,attackself(3); sfxdamage(self|3);
Short Sword,Do [sword]<d6> damage,1,attack(d);,Plasma Gun,MAX4,,RED,increaserange,complicate,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d| SHOCK); inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,change_requirements,change_function,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_downgraded,[shock]Shocks the enemy,1,inflict(SHOCK);,Plasma Gun,MAX3,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Tazer_upgraded,Do [shock]<d6> damage|[shock]Shocks the enemy,1,attack(d| SHOCK); inflict(SHOCK);,Plasma Gun,MAX5,,YELLOW,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Call for Backup Warrior?,Warrior Charge|Add 3 to Kapow damage,2,self.setvar(~kapowcount~| self.getvar(~kapowcount~) + 3); sfx(~_magic~);,,,,BRIGHTCYAN,,change_power,,none,0,YES,NO,excludefromrandomlists|alternateversion|powercard|curseavoid,,,,,,,,,,,,
Call for Backup Warrior?_downgraded,Pea Gun|Do [sword]3 damage,2,attack(3);,Lucky Shot,,,BRIGHTCYAN,,,,none,0,NO,NO,excludefromrandomlists|powercard|curseavoid,,,,,,,,,,,,
Buster Sword,Do [sword]<d6> damage[;]|immune to errors,1,attack(d);,Plasma Gun,NORMAL,,GRAY,add2,complicate,,,0,NO,NO,excludefromrandomlists|errorimmune|robotonly,,,,,,,,,,,,
Sun Beam,Do [sword]5 damage|(Cost [mana]2[]: double damage),1,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); attack(10); } else { attack(5); } ,,EVEN,,BRIGHTCYAN,simplify,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(getstatusself(MANA) >= 2) { removestatusself(MANA|2); }
Lucky 7,Do [sword]7[;] return a dice,1,attack(7); var returndice = rand([actualdice[0].basevalue|actualdice[1].basevalue]); givedice(returndice);,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,var returndice = rand([actualdice[0].basevalue|actualdice[1].basevalue]); givedice(returndice);
Lucky 7_upgraded,Do [sword]7[;] return first dice,1,attack(7); givedice(actualdice[0].basevalue);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,givedice(actualdice[0].basevalue);
Lucky 7_downgraded,Do [sword]7 damage,1,attack(7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Moon Beam,Do [sword]5 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(10); } else { attack(5); } ,,EVEN,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Moon Beam_upgraded,Do [sword]7 damage|(If [mana]>=7: double damage),1,if(getstatusself(MANA) >= 7) { attack(14); } else { attack(7); } ,,EVEN,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Cold Snap,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE | 1); sfx(~_ice~|~~|0.2); } else { attack(5); sfxdamage(target|5); } ,Refrigerator,ODD,,PURPLE,change_power,complicate,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,
Cold Snap_upgraded,Do [sword]5 damage|(If [mana]>=2: inflict freeze),1,if(getstatusself(MANA) >= 2) { attack(5); inflict(ICE | 1); sfx(~_ice~|~~|0.2); } else { attack(5); sfxdamage(target|5); } ,Refrigerator,NORMAL,,PURPLE,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Duplicate,Duplicate a dice,1,givedice([d| d]);,Clone Device,MIN4,,GREEN,simplify,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lunasa,Replace the spell in slot <slotdoubles>|with a random spell,1,Spellbook.changespellflash(d|rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,YES,NO,excludefromrandomlists|witchonly,1,,,,,,,,,,,
Lunasa_upgraded,Replace the spell in slot <d6>|with a random spell,1,Spellbook.changespellflash(d|rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,NORMAL,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Lunasa_downgraded,Replace the spell in slot 1|with a random spell,1,Spellbook.changespellflash(1|rand(loadtext(~diceydungeons/unexpectedspells_remix~)));,,REQUIRE1|REQUIRE1,,ORANGE,,,,,0,YES,NO,excludefromrandomlists|witchonly,,,,,,,,,,,,
Mirror Cauldron,Get a new dice[;] on 6|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d == 6) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Mirror Cauldron_upgraded,Get a new dice[;] on even|get +1 dice this fight,1,if(simulation) { givedice(); bonus(1000); } else{ givedice(); if(d % 2 == 0) { self.extradice++; sfx(~magic_gaindice~); } },Focus,MIN4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Mirror Cauldron_downgraded,Get a new dice,1,givedice();,Focus,MIN4,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Crowbar,Reduce the countdowns|on all equipment by <d6>,1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Crowbar_upgraded,Reduce countdowns by <d6>|[gray](Reuseable),1,boostcountdowns(d);,Accelerate,NORMAL,,GREEN,,,,,2,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Skeleton Key,Set all dice to <slotdoubles>,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,Replicate,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Skeleton Key_upgraded,Set all dice to <d6>,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(d| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,Replicate,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Skeleton Key_downgraded,Set all dice to 2,1,var c = 0; for (mydice in self.dicepool){ if (mydice.available()){ mydice.animatereroll(2| self.screenposition()| c * 0.05); c++; } } sfx(~diceroll~);,Replicate,REQUIRE2|REQUIRE2,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hacksaw,Split a dice in three,1,givedice(split(d| 3)| ~splitdice~);,Magic Lockpick,MIN3,,GREEN,change_power,complicate,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Hacksaw_upgraded,Split a dice in three,1,givedice(split(d| 3)| ~splitdice~);,Magic Lockpick,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire,Lose [heart]5 health,1,pierceattackself(5);,Infinity Mirror,REQUIRE1,,PURPLE,change_backfire,change_power,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Backfire_downgraded,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire_weakened,Lose [heart]15 health,1,pierceattackself(15);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Backfire_upgraded,Lose [heart]10 health,1,pierceattackself(10);,Infinity Mirror,REQUIRE1,,PURPLE,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword,Do [sword]<double> damage,2,attack(d * 2);,Plasma Gun,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword_upgraded,Do [sword]<triple> damage,2,attack(d * 3);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Very Good Sword_downgraded,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon,[sword]2 dmg[;] [sword]4 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(4); } else { attack(2); },Pea Gun,COUNTDOWN,4,YELLOW,change_power,change_power,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon_downgraded,[sword]1 dmg[;] [sword]2 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(2); } else { attack(1); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Spud Cannon_upgraded,[sword]3 dmg[;] [sword]6 on jackpot|[gray](Reuseable),1,if (self.roll_jackpot > 0){ attack(6); } else { attack(3); },Pea Gun,COUNTDOWN,4,YELLOW,,,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Snapdragon,Do [sword]3 damage[;]|on 6[;] gain [mana]2 mana,1,attack(3); if(d == 6) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~|~~|0.2); } else { sfxdamage(target|3); },,NORMAL,,RED,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(d == 6) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Snapdragon_upgraded,Do [sword]3 damage[;]|on even[;] gain [mana]2 mana,1,attack(3); if(d % 2 == 0) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~|~~|0.2); } else { sfxdamage(target|3); },,NORMAL,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d % 2 == 0) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Snapdragon_downgraded,Do [sword]3 damage[;]|on 3[;] gain [mana]2 mana,1,attack(3); if(d == 3) { inflictself(MANA|2); sfxdamage(target|3);  sfx(~_mana~|~~|0.2); } else { sfxdamage(target|3); },,MAX3,,RED,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(d == 3) { inflictself(MANA|2); sfx(~_mana~|~~|0.2); }
Fruit Bowl,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,excludefromrandomlists,1,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); }
Fruit Bowl_upgraded,Do [sword]1 damage[;] reroll dice|(Cost [mana]1[]: return two dice)|[gray](Reuseable),1,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); } attack(1);,,NORMAL,,BRIGHTCYAN,,,,,2,NO,NO,excludefromrandomlists,,,,,,,,,,,,if(getstatusself(MANA) > 0) { removestatusself(MANA|1); givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); } else { givedice(); }
Fruit Bowl_downgraded,Do [sword]1 damage,1,attack(1);,,NORMAL,,BRIGHTCYAN,,,,,0,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Daffodil,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN4,,YELLOW,change_power,decreaserange,,,0,YES,NO,excludefromrandomlists,1,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,,
Daffodil_upgraded,Dice value -1|(At start of turn: get [mana]1),1,if(d >= 2) givedice(d - 1);,,MIN2,,YELLOW,,,,,0,YES,NO,excludefromrandomlists,,,,,e.animate(~flashandshake~); inflictself(MANA|1);,,,,,,,
Dagger,Do [sword]<d6> damage|[gray](Reuseable),1,attack(d);,Steal,MAX3,,RED,add1,complicate,,,-1,NO,NO,excludefromrandomlists,,,,,,,,,,,,
Lockpick,Split a dice in two,1,givedice(split(d)| ~splitdice~);,Steal,NORMAL,,GREEN,change_power,change_function,,,0,YES,NO,excludefromrandomlists,1,,,,,,,,,,,
Lockpick_downgraded,Split value in two,1,givedice(d / 2);,Steal,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Lockpick_upgraded,Split a dice in two|On six[;] split into three,1,if(d==6){ givedice(split(d| 3)| ~splitdice~); } else { givedice(split(d)| ~splitdice~); },Steal,NORMAL,,GREEN,,,,,0,YES,NO,excludefromrandomlists,,,,,,,,,,,,
Sword,Do [sword]<d6> damage,2,attack(d);,Plasma Gun,NORMAL,,RED,add1,decreaserange,,,0,NO,NO,,,,,,,,,,,,,
[END MISC USED IN MOD],,1,,,,,,,,,,,,,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Gatling Pea,Do [sword]2 damage[;] roll a 1|,1,attack(2); sfxdamage(target[;]2); givedice(1);,Pea Gun,COUNTDOWN,3,RED,change_power,change_power,,,-1,NO,NO,rs,,,,,,,,,,,,
Gatling Pea_upgraded,[sword]2 damage[;] return excess|,1,var dice = self.getvar(~dice~); attack(2); sfxdamage(target[;]2); if(dice > 0) { givedice(dice); };,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,self.setvar(~dice~[;]e.dicehistory[e.dicehistory.length-1].basevalue - e.remainingcountdown); trace(~excess: ~ + self.getvar(~dice~) + ~ cd: ~ + e.remainingcountdown);,,,,,
Gatling Pea_downgraded,Do [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Pea Gun,COUNTDOWN,3,RED,,,,,-1,NO,NO,rs,,,,,,,,,,,,
Bloody Drill,Do [sword]<d6> damage[;] drain|[heart]1 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_upgraded,Do [sword]<d6> damage[;] drain|[heart]2 hp per turn for <d6> turns,2,attack(d); sfxdamage(target[;]d); for (jinxnum in 1...d+1) { jinx(~Bloody Drill~[;]~enemy leeches [heart]%VAR% health~[;]~Enemy leeches [heart]%VAR% health~[;]~drain(%VAR%); sfx(\~_drain\~)~[;]target[;]self[;]jinxnum[;]1); }; sfx(~_thinghappens~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Bloody Drill_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Blood Sip,NORMAL,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu,Inflict [ice]2 freeze|On double 3: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d == 3) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Frosty Bufu_upgraded,Inflict [ice]2 freeze|On double odd: [ice]2x<slotdoubles> dmg,1,inflict(ICE[;]2); if(d % 2 == 1) { attack(d*2[;]ICE); sfxdamage(target[;]d*2); } sfx(~_ice~);,Arctic Storm,DOUBLES|DOUBLES,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Frosty Bufu_downgraded,Do [ice]6 damage,1,attack(6[;]ICE); sfxdamage(target[;]6);,Arctic Storm,REQUIRE3|REQUIRE3,,BRIGHTCYAN,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi,Inflict [fire]2 burn|On double 3: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d == 3) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Burning Agi_upgraded,Inflict [fire]2 burn|On double odd: [fire]2x<slotdoubles> dmg,1,inflict(FIRE[;]2); if(d % 2 == 1) { attack(d*2[;]FIRE); sfxdamage(target[;]d*2); } sfx(~_fire~);,Hellfire,DOUBLES|DOUBLES,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Burning Agi_downgraded,Do [fire]6 damage,1,attack(6[;]FIRE); sfxdamage(target[;]6);,Hellfire,REQUIRE3|REQUIRE3,,RED,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 3[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 3) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX3,,ORANGE,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_upgraded,[weaken]<d6> dmg[;] inflict [weaken]1 weaken|On 5[;] inflict [weaken]1 more,1,attack(d[;]WEAKEN); inflict(WEAKEN); if(d == 5) { inflict(WEAKEN); }; sfx(~_weaken~);,Burrower,MAX5,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Sandbag_downgraded,Do [weaken]<d6> damage[;]|inflict [weaken]1 weaken,1,attack(d[;]WEAKEN); inflict(WEAKEN); sfx(~_weaken~);,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Quake Sigma,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX3|MAX3,,PURPLE,change_power,decreaserange,,,0,NO,NO,rs,1,,,,,,,,,,,
Quake Sigma_upgraded,Do [sword]<d6> damage[;]|+[curse]1 curse,1,attack(d); sfxdamage(target[;]d); inflict(CURSE); sfx(~_curse~);,Dramatic Pause,MAX4|MAX4,,PURPLE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler,Inflict [shock]<d6> shock[;]|reroll the dice,2,inflict(SHOCK[;]d); sfx(~_shock~); givedice(rand([1[;]2[;]3[;]4[;]5[;]6]));,Zap,MAX3,,YELLOW,change_power,decreaserange,,,0,NO,NO,rs,,,,,,,,,,,,
Dazzler_upgraded,Inflict [shock]<d6> shock[;]|reroll with higher value,2,inflict(SHOCK[;]d); sfx(~_shock~); var finalv = []; for(dicev in (d+1)...7) { finalv.push(dicev); }; givedice(rand(finalv));,Zap,MAX3,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade,Do [sword]<d6> damage[;]|on 1 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 5 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX4|FREE1,,ORANGE,change_power,change_power,weaken,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_upgraded,Do [sword]<d6> damage[;]|on 1 or 6[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 7 # d == 2) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,NORMAL|FREE1,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
Shovel Blade_downgraded,Do [sword]<d6> damage[;]|on 2 or 4[;] inflict [weaken]1|weaken,2,attack(d); sfxdamage(target[;]d); if(d == 2 # d == 4) { inflict(WEAKEN); sfx(~_weaken~); };,Shuriken,MAX2|MAX2,,ORANGE,,,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch,Do [sword]2 damage 3-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_upgraded,Do [sword]2 damage 5-10 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([5[;]6[;]7[;]8[;]9[;]10]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
The Monarch_downgraded,Do [sword]2 damage 3-6 times|[80%][gray]The deadly sting of the monarch!,1,var monarchrage = rand([3[;]4[;]5[;]6]); for(i in 0...monarchrage){ attack(2); } sfxdamage(target[;]2*monarchrage); self.textparticle(monarchrage + ~ hits!~);,Plasma Gun,COUNTDOWN,16,RED,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch,Do [sword]7 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(14); sfxdamage(target[;]14); self.textparticle(~Success!~); } else { attack(7); sfxdamage(target[;]7); };,Power Up,NORMAL|NORMAL,7,PINK,change_power,change_power,,,0,NO,NO,rs,1,,,,,,,,,,,
Lucky Punch_upgraded,Do [sword]9 damage[;]|40% chance to do double,1,var odds = 40; if(getstatusself(~luck~) > 0){ odds += 40; } if(getstatusself(~luck+~) > 0){ odds = 100; }; if(chance(odds)) { attack(18); sfxdamage(target[;]18); self.textparticle(~Success!~); } else { attack(9); sfxdamage(target[;]9); };,Power Up,NORMAL|NORMAL,9,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Lucky Punch_downgraded,Do [sword]7 damage,1,attack(7); sfxdamage(target[;]7);,Power Up,NORMAL|NORMAL,7,PINK,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele,Do [shock]<d6> damage[;]|on 5[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 5) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,change_power,change_power,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_downgraded,Do [shock]<d6> damage|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,ODD,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
Ukulele_upgraded,Do [shock]<d6> damage[;]|on 6[;] inflict [shock]1 shock|50% chance to [shock]shock,2,var odds = 50; if(getstatusself(~luck~) > 0){ odds += 50; } if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d[;]SHOCK); sfxdamage(target[;]d); if(d == 6) { inflict(SHOCK); sfx(~_shock~); }; if(chance(odds)) { inflict(SHOCK); sfx(~_shock~); };,Static Shock,NORMAL,,YELLOW,,,,,0,NO,NO,rs,,,,,,,,,,,,
[END REFERENCE STUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Brace,Gain [shield]2 shield[;]|on 4[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d==4){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,change_requirements,change_power,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_upgraded,Gain [shield]2 shield[;]|on even[;] gain [reduce]1 reduce,1,inflictself(SHIELD[;]2); if(d%2 == 0){ inflictself(REDUCE); } sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Brace_downgraded,Gain [shield]2 shield,1,inflictself(SHIELD[;]2); sfx(~_shield~);,Barricade,MAX4,,ORANGE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Electric Arc,[shock]2 damage to everyone|Return the dice,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_upgraded,[shock]2 damage to everyone|Dice value +1,1,attack(2[;]SHOCK); attackself(2[;]SHOCK); sfxdamage(target[;]2); sfxdamage(self[;]2); sfx(~_shock~); givedice(d+1);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Electric Arc_downgraded,[shock]1 damage to everyone|Return the dice,1,attack(1[;]SHOCK); attackself(1[;]SHOCK); sfxdamage(target[;]1); sfxdamage(self[;]1); sfx(~_shock~); givedice(d);,Static Shock,NORMAL,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook,Burn [fire]<d6> dice,1,inflict(FIRE[;]d); sfx(~_fire~);,Hellfire,MAX3,,RED,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,
Matchbook_upgraded,Burn [fire]<d6> dice|Do [fire]2 damage,1,inflict(FIRE[;]d); sfx(~_fire~); attack(2[;]FIRE); sfxdamage(target[;]d);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Matchbook_downgraded,Burn a dice,1,inflict(FIRE); sfx(~_fire~);,Hellfire,MAX3,,RED,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray,Freeze [ice]<d6> dice,1,inflict(ICE[;]d); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,change_power,change_power,ice,none,0,NO,NO,gb,1,,,,,,,,,,,
Ice Tray_upgraded,Freeze [ice]<d6> dice|Do [ice]2 damage,1,inflict(ICE[;]d); sfx(~_ice~); attack(2[;]ICE); sfxdamage(target[;]2);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Ice Tray_downgraded,Freeze a dice,1,inflict(ICE); sfx(~_ice~);,Arctic Storm,MAX3,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Wide Spatula,Flip this dice and|another random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } givedice(7-d); if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Wide Spatula_upgraded,Flip this dice and your|lowest remaining dice,1,var poss = []; var low = 7; for(mydice in self.dicepool){ if(mydice.available() && mydice.basevalue < low){ poss.push(mydice); low = mydice.basevalue; } } givedice(7-d); if(poss.length > 0){ var rdice = poss[poss.length - 1]; rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Wide Spatula_downgraded,Flip a random dice,1,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); } } if(poss.length > 0){ var rdice = rand(poss); rdice.animatereroll(7 - rdice.basevalue[;]self.screenposition()); sfx(~useitem~); },Megaflip,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron,Gain [thorns]1 thorn[;]|get a new dice,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Cactus Cauldron_upgraded,Gain [thorns]1 thorn[;] reroll dice|,1,inflictself(THORNS); sfx(~_thorns~); givedice();,Needle,NORMAL,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Cactus Cauldron_downgraded,Get a new dice,1,givedice();,Needle,NORMAL,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
False Swipe,Do [sword]10 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(10); sfxdamage(target[;]10);,Blood Sip,COUNTDOWN,8,GREEN,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_upgraded,Do [sword]12 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(12); sfxdamage(target[;]12);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
False Swipe_downgraded,Do [sword]5 damage[;] but can't|bring target below [heart]5 HP,2,var leavewith = 5; if(target.hp < leavewith){ leavewith = target.hp; } inflictself(~falseswipe~[;]leavewith); attack(5); sfxdamage(target[;]5);,Blood Sip,COUNTDOWN,8,GREEN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting,Do [sword]<d6> damage[;]|25% chance to add [poison]2,1,var odds = 25; if(getstatusself(~luck~) > 0){ odds += 25 * getstatusself(~luck~); } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_upgraded,Do [sword]<d6> damage[;]|75% chance to add [poison]2,1,var odds = 75; if(getstatusself(~luck~) > 0){ odds = 100; } else if(getstatusself(~luck+~) > 0){ odds = 100; }; attack(d); sfxdamage(target[;]d); if(chance(odds)) { self.textparticle(~Success!~); inflict(POISON[;]2); sfx(~_poison~); };,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Poison Sting_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Poison Arrow,NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver,Do [sword]<d6> damage[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL,,PURPLE,reducesize,change_power,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_deckupgrade,Do [sword]<d6> dmg[;] double|if your limit is charged,2,if(self.limitready()){ attack(d*2); sfxdamage(target[;]d*2); } else{ attack(d); sfxdamage(target[;]d); },Plasma Gun,NORMAL|FREE1,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_downgraded,Do [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Braver_weakened,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX3,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Pin Missile,Do [sword]1 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,change_power,change_power,,none,2,NO,NO,gb,1,,,,,,,,,,,
Pin Missile_upgraded,Do [sword]2 damage 2-5 times|,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(2); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,2,NO,NO,gb,,,,,,,,,,,,
Pin Missile_downgraded,Do [sword]1 damage 2-5 times,1,var a = rand([2[;]3[;]4[;]5]); for(b in 0...a){ attack(1); sfx(~_damage~[;]~~[;]b*0.05); },Pea Gun,EVEN,,YELLOW,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Wave,Do [sword]<d6> damage[;]|Inflict [poison]2 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]2); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,change_power,complicate,,none,0,NO,NO,gb,1,,,,,,,,,,,
Sludge Wave_upgraded,Do [sword]<d6> damage[;]|Inflict [poison]3 poison,1,attack(d); sfxdamage(target[;]d); inflict(POISON[;]3); sfx(~_poison~[;]~~[;]0.2);,Toxic,NORMAL|NORMAL,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Caustic Cauldron,Inflict [poison]1 poison[;]|get a new dice,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,,,,,givedice();
Caustic Cauldron_upgraded,Inflict [poison]1[;] reroll dice|,1,inflict(POISON); givedice(); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,2,NO,NO,gb,,,,,,,,,,,,givedice();
Caustic Cauldron_downgraded,Inflict [poison]1 poison,1,inflict(POISON); sfx(~_poison~[;]~~[;]0.2);,Stinger,EVEN,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sealing Stamp,Do [sword]4 damage|(At end of turn: do [sword]2),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,change_power,change_power,,none,0,NO,NO,gb,1,,,,,,,if(target.hp > 0){ attack(2); sfxdamage(target[;]2); },,,,
Sealing Stamp_upgraded,Do [sword]4 damage|(At end of turn: do [sword]3),1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,if(target.hp > 0){ attack(3); sfxdamage(target[;]3); },,,,
Sealing Stamp_downgraded,Do [sword]4 damage,1,attack(4); sfxdamage(target[;]4);,Shuriken,ODD,,BRIGHTCYAN,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Decantation,Both dice values -1[;]|roll a 2,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Decantation_upgraded,Both values -1[;] roll a 2|,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1[;]2][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Decantation_downgraded,Both dice values -1,1,givedice([actualdice[0].basevalue-1[;]actualdice[1].basevalue-1][;]~splitdice~);,Meganudge,MIN2|MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror,In [jinx]2 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Fogged Mirror_upgraded,In [jinx]2 turns[;] +1 dice|,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]2[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,2,YES,NO,gb,,,,,,,,,,,,
Fogged Mirror_downgraded,In [jinx]3 turns[;] gain|+1 dice this fight,1,jinx(~Fogged Mirror~[;]~gain +1 dice this fight~[;]~Gain +1 dice this fight~[;]~target.extradice++; sfx(\~magic_gaindice\~);~[;]self[;]self[;]3[;]1); sfx(~_thinghappens~);,Infinity Mirror,NORMAL,,PURPLE,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Sludge Spear,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6,,PURPLE,change_power,change_power,,none,0,NO,NO,gb,2,,,,,,,,,,,
Sludge Spear_upgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,MIN4,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Sludge Spear_downgraded,Inflict [poison]4 poison,1,inflict(POISON[;]4); sfx(~_poison~);,Poison Arrow,REQUIRE6|REQUIRE6,,PURPLE,,,,none,0,NO,NO,gb,,,,,,,,,,,,
Transporter,Duplicate part of a dice,1,var parts = split(d); givedice([d[;]parts[0]]);,Clone Device,MIN2,,GREEN,change_power,change_power,,none,0,YES,NO,gb,1,,,,,,,,,,,
Transporter_upgraded,Duplicate most of a dice,1,if(d > 1){ givedice([d[;]d-1]); } else{ givedice([d[;]d]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
Transporter_downgraded,Duplicate a small|part of a dice,1,var parts = split(d); if(parts[0] < parts[1]){ givedice([d[;]parts[0]]); } else{ givedice([d[;]parts[0]]); },Clone Device,MIN2,,GREEN,,,,none,0,YES,NO,gb,,,,,,,,,,,,
[END GRABBAG],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Nine Iron,Deal [sword]<d6> damage|On 6[;] deal [sword]3 more,2,if(d == 6){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,change_power,change_power,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_upgraded,Deal [sword]<d6> damage|On even[;] deal [sword]3 more,2,if(d % 2 == 0){ attack(d+3); sfxdamage(target[;]d+3); }else{ attack(d); sfxdamage(target[;]d); };,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Nine Iron_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Plasma Gun,NORMAL,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shrug,Gain [shield]4 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]4); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_upgraded,Gain [shield]6 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]6); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Shrug_downgraded,Gain [shield]3 shield|Roll a new dice,2,givedice(); inflictself(SHIELD[;]3); sfx(~_shield~);,Barricade,COUNTDOWN,8,ORANGE,,,,,0,YES,NO,mf,,,,,,,,,,,,
Budge,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Budge_upgraded,Odd: value +1[;] Even: value -1|[grey](3 uses this turn),1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,NORMAL,,GREEN,,,,,3,YES,NO,mf,,,,,,,,,,,,
Budge_downgraded,Odd: dice value +1|Even: dice value -1,1,if(d%2 == 0){ givedice(d-1); } else { givedice(d+1); };,Magic Dice,MIN4,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Asklepios,Deal [sword]6 damage|Restore [heal]3 health,2,attack(6); sfxdamage(target[;]6); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_upgraded,Deal [sword]8 damage|Restore [heal]3 health,2,attack(8); sfxdamage(target[;]8); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Asklepios_downgraded,Deal [sword]3 damage|Restore [heal]3 health,2,attack(3); sfxdamage(target[;]3); sfx(~_magic~); attackself(-3); sfx(~_heal~[;]~~[;]0.2);,Regenerate,COUNTDOWN,8,GREEN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_upgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Dynamite Shotgun_downgraded,Deal [fire]<triple> damage|to everyone,1,attack(d*3[;]FIRE); sfx(~_fire~); sfxdamage(target[;]d*3); attackself(d*3[;]FIRE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_upgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX5,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Icicle Shotgun_downgraded,Deal [ice]<triple> damage|to everyone,1,attack(d*3[;]ICE); sfx(~_ice~); sfxdamage(target[;]d*3); attackself(d*3[;]ICE); sfxdamage(self[;]d*3);,Boom!,MAX3,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Rock Crusher,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,change_power,change_power,,,2,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_upgraded,Dice value -1[;] then split it|,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,4,YES,NO,mf,,,,,,,,,,,,
Rock Crusher_downgraded,Dice value -1[;]|then split it in two,1,if(d <= 1){ self.textparticle(~Nice try~); }else if(d == 2){ givedice([1]); }else if(d > 6){ givedice(d-1); }else{ givedice(split(d-1)); };,Magic Lockpick,MIN3,,GREEN,,,,,0,YES,NO,mf,,,,,,,,,,,,
Flame Lance,Burn [fire]all dice,1,inflict(FIRE[;]ALL); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_upgraded,Burn [fire]all dice[;] deal [fire]1|damage per dice burned,1,inflict(FIRE[;]ALL); sfx(~_fire~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]FIRE); sfxdamage(target[;]s);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Flame Lance_downgraded,Burn [fire]2 dice,1,inflict(FIRE[;]2); sfx(~_fire~);,Heat Ray,COUNTDOWN,9,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance,Freeze [ice]all dice,1,inflict(ICE[;]ALL); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_upgraded,Freeze [ice]all dice[;] deal [ice]1|damage per dice frozen,1,inflict(ICE[;]ALL); sfx(~_ice~); var s = target.dice+target.extradice+target.bonusdice; attack(s[;]ICE); sfxdamage(target[;]s);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Frost Lance_downgraded,Freeze [ice]2 dice,1,inflict(ICE[;]2); sfx(~_ice~);,Arctic Storm,COUNTDOWN,9,BRIGHTCYAN,,,,,0,NO,NO,mf,,,,,,,,,,,,
Minigun,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,change_power,change_power,,none,1,NO,NO,mf,,,,e.usesleft = turn; e.updatereuseabledescription();,,,,,,,,
Minigun_upgraded,Deal [sword]<d6> damage|Gains +1 use each turn|[gray](Reuseable),2,attack(d); sfxdamage(target[;]d);,Whelm,MAX5,,RED,,,,none,2,NO,NO,mf,,,,e.usesleft = turn+1; e.updatereuseabledescription();,,,,,,,,
Minigun_downgraded,Deal [sword]<d6> damage,2,attack(d); sfxdamage(target[;]d);,Whelm,MAX4,,RED,,,,none,0,NO,NO,mf,,,,,,,,,,,,
Shielding Potion,Gain [shield]12 shield|[gray](once per battle),2,inflictself(SHIELD[;]12); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_upgraded,Gain [shield]15 shield|[gray](once per battle),2,inflictself(SHIELD[;]15); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Shielding Potion_downgraded,Gain [shield]8 shield|[gray](once per battle),2,inflictself(SHIELD[;]8); sfx(~_shield~);,Coin Clippers,COUNTDOWN,8,ORANGE,,,,,0,YES,YES,mf,,,,,,,,,,,,
Cherry Bomb,Start of turn: deal [sword]5 dmg|[gray](once per battle),1,attack(5); sfxdamage(target[;]5);,Throwing Knife,,,RED,change_power,change_power,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,1,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Cherry Bomb_upgraded,Start of turn: deal [sword]8 dmg|[gray](once per battle),1,attack(8); sfxdamage(target[;]8);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Cherry Bomb_downgraded,Start of turn: deal [sword]1 dmg|[gray](once per battle),1,attack(1); sfxdamage(target[;]1);,Throwing Knife,,,RED,,,,none,0,NO,YES,excludefromrandomlists|cannotreuse|mf,,,,,e.doequipmentaction(self[;]target[;]0[;][][;]0[;]false);,,,,,,,
Sacridice,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN3,,RED,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,,
Sacridice_upgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN2,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Sacridice_downgraded,Lose [heart]<d6> health|Gain +1 dice this fight,1,pierceattackself(d); self.extradice+=1; sfx(~_drain~); sfx(~magic_gaindice~);,Infinity Mirror,MIN5,,RED,,,,,0,YES,NO,mf,,,,,,,,,,,,
Precognition,Gain a random blessing|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]self[;]1[;]d); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,change_power,change_power,,,0,YES,NO,mf,1,,,,,,,,,,donothing();,
Precognition_upgraded,Gain 2 random blessings|next turn ([shield][heal][reduce][fury][thorns][]),1,var effects=[~inflict(SHIELD[;]4); sfx(\~_shield\~);~[;]~inflict(REDUCE); sfx(\~_shield\~);~[;]~inflict(FURY); sfx(\~_fury\~);~[;]~attack(-4); sfx(\~_heal\~);~[;]~inflict(THORNS); sfx(\~_thorns\~);~]; var descs=[~Receive [shield]4 shield~[;]~Receive [reduce]1 reduce~[;]~Receive [fury] Fury~[;]~Recover [heal]4 health~[;]~Receive [thorns]1 thorns~]; for(x in [0[;]0]){ var r = rand([0[;]1[;]2[;]3[;]4]); jinx(~Precognition~[;]descs[r].toLowerCase()[;]descs[r][;]effects[r][;]self[;]target[;]1[;]d); }; sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Precognition_downgraded,Get nothing next turn,1,jinx(~Precognition-~[;]~Do nothing~[;]~do nothing~[;]~inflict(\~nothing\~); sfx(\~_thinghappens[;]~); ~[;]self[;]self[;]1[;]1); sfx(~_thinghappens~);,Power Up,COUNTDOWN,5,PURPLE,,,,,0,YES,NO,mf,,,,,,,,,,,donothing();,
Mass Grimoire,Activate equipment that|can take a single <slotdoubles>,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,change_power,change_power,,none,0,YES,NO,excludefromrandomlists|mf,2,,,,,,,,,,,
Mass Grimoire_upgraded,Activate items that take <slotdoubles>|,1,function checkslots(eq[;]val){ var sl = eq.getslots(); if(sl.length > 1){ return false; }; var s = sl[0]; if(s == ~NORMAL~){ return true; }; if(s == ~EVEN~ && val %2 == 0){ return true; }; if(s == ~ODD~ && val %2 == 1){ return true; }; if(s == ~REQUIRE~+val){ return true; }; for(x in 1...val+1){ if(s == ~MIN~+x){ return true; }; }; for(x in val...7){ if(s == ~MAX~+x){ return true; }; }; var ranges = [[2[;]3][;][2[;]4][;][2[;]5][;][3[;]4][;][3[;]5][;][4[;]5]]; for(r in ranges){ if(s == ~RANGE~+r[0]+r[1] && val >= r[0] && val <= r[1]){ return true; } }; return false; }; var goodeq = []; var counts = []; for(eq in self.equipment){ if(eq.ready && eq.skillcard == ~~ && !eq.needsdoubles){ if(eq.countdown > 0){ if(eq.remainingcountdown <= d){ counts.push(eq); }; }else{ if(checkslots(eq[;]d)){ goodeq.push(eq); }; }; }; }; var del = 0; if(goodeq.length > 0){ for(eq in goodeq){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); eq.doequipmentaction(self[;]target[;]eq.castdirection[;]eq.assigneddice[;]del); del+=0.1; }; }; if(counts.length > 0){ for(eq in counts){ givedice(d); eq.assigndice(self.dicepool[self.dicepool.length-1][;]-1); }; }; sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,2,YES,NO,excludefromrandomlists|mf,,,,,,,,,,,,
Mass Grimoire_downgraded,No effect,1,sfx(~_thinghappens~);,Magic Dice,DOUBLES|DOUBLES,,PURPLE,,,,none,0,YES,NO,excludefromrandomlists|mf,,,,,,,,,,,,
Magnum Opus,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Magnum Opus_upgraded,Deal [sword]<d6> damage|Gain [shield]4 shield,1,attack(d); inflictself(SHIELD[;]4); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL|NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]4); sfx(~_shield~);
Magnum Opus_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX3|MAX3,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Blood Pact,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4,,RED,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Blood Pact_upgraded,Lose [heart]3 health[;] then|drain [heart]<d6> health,1,pierceattackself(3); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX4|FREE1,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(3); sfx(~_drain~);
Blood Pact_downgraded,Lose [heart]2 health[;] then|drain [heart]<d6> health,1,pierceattackself(2); drain(d); sfx(~_drain~); sfx(~_magic~);,Blood Sip,MAX2,,RED,,,,,0,NO,NO,mf,,,,,,,,,,,,pierceattackself(2); sfx(~_drain~);
Push Knife,[sword]2[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(2); sfxdamage(target[;]2); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,change_power,change_power,,,-1,NO,NO,mf,1,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_upgraded,[sword]3[;] give a random dice +1|,1,if(simulation){ bonus(-100000); }; attack(3); sfxdamage(target[;]3); var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };,Megabump,MIN2,,RED,,,,,-1,NO,NO,mf,,,,,,,,,,,,var poss = []; for(mydice in self.dicepool){ if(mydice.available()){ poss.push(mydice); }; }; if(poss.length > 0){ var r = rand(poss); if(r.basevalue == 6){ r.animatereroll(6[;]self.screenposition()[;]0); givedice(1); }else{ r.animatereroll(r.basevalue+1[;]self.screenposition()[;]0); }; };
Push Knife_downgraded,Deal [sword]2 damage|,1,attack(2); sfxdamage(target[;]2);,Megabump,MIN2,,RED,,,,none,-1,NO,NO,mf,,,,,,,,,,,,
Philosopher's Stone,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX4,,ORANGE,change_power,change_power,,,0,NO,NO,mf,1,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_upgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,NORMAL,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Philosopher's Stone_downgraded,Deal [sword]<d6> damage|Gain [shield]2 shield,1,attack(d); inflictself(SHIELD[;]2); sfxdamage(target[;]d); sfx(~_magic~); sfx(~_shield~[;]~~[;]0.2);,Barricade,MAX2,,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]2); sfx(~_shield~);
Molten Core,Deal [sword]20 damage|Gain [shield]10 shield,1,attack(20); sfxdamage(target[;]20); sfx(~_magic~); inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,change_power,change_power,,,0,NO,NO,mf,2,,,,,,,,,,,inflictself(SHIELD[;]10); sfx(~_shield~[;]~~[;]0.2);
Molten Core_upgraded,Deal [sword]25 damage|Gain [shield]15 shield,1,attack(25); sfxdamage(target[;]25); sfx(~_magic~); inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]15); sfx(~_shield~[;]~~[;]0.2);
Molten Core_downgraded,Deal [sword]10 damage|Gain [shield]5 shield,1,attack(10); sfxdamage(target[;]10); sfx(~_magic~); inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);,Magic Lantern,COUNTDOWN,25,ORANGE,,,,,0,NO,NO,mf,,,,,,,,,,,,inflictself(SHIELD[;]5); sfx(~_shield~[;]~~[;]0.2);
[END FLUFF],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Power Glove,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX4,,ORANGE,change_requirements,change_function,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_upgraded,Do [sword]<d6> damage|Gain [reduce]armour,1,attack(d); inflictself(REDUCE); sfxdamage(target[;]d); sfx(~_reduce~[;]~~[;]0.2);,Plasma Gun,MAX5,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Power Glove_downgraded,Do [sword]<d6> damage|[80%][gray]''It's so bad!''[],1,attack(d); sfxdamage(target[;]d);,Plasma Gun,MAX4,,ORANGE,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Innovate,Get a dice you don't have,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,ncr,2,,,,,,,,,,,
Innovate_upgraded,Get a dice you don't have|,1,var notseen = [1[;]2[;]3[;]4[;]5[;]6]; notseen.remove(d); for (mydice in self.dicepool){ if (mydice.available() && notseen[notseen.indexOf(mydice.basevalue)] != null) { notseen.remove(mydice.basevalue); } } if (notseen.length == 0) { givedice(d); self.textparticle(~You've got all dice!~); } else { shuffle(notseen); givedice(notseen[0]); },Reroll,NORMAL,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Innovate_downgraded,Get a 4[;] if you don't have one,1,var flag = true; for (mydice in self.dicepool){ if (mydice.available() && mydice.basevalue == 4) { flag = false; } } if (flag == false) { givedice(d); self.textparticle(~You've got a 4!~); } else { givedice(4); },Reroll,NORMAL,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector,Gain [shield]2 shield|[gray](single usen't),1,inflictself(SHIELD[;]2); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,change_power,change_power,,,4,YES,NO,ncr,1,,,,,,,,,,,
Pocket Protector_upgraded,Gain [shield]3 shield|[gray](single usen't),1,inflictself(SHIELD[;]3); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Pocket Protector_downgraded,Gain [shield]1 shield|[gray](single usen't),1,inflictself(SHIELD[;]1); sfx(~_shield~);,Safeguard,MIN3,,ORANGE,,,,,4,YES,NO,ncr,,,,,,,,,,,,
Dime,Roll 2 sixes,2,givedice([6[;]6]); /* 'dime a dozen' */,Rollout,EVEN|EVEN,,GREEN,change_power,change_power,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_downgraded,Roll 2 sixes,2,givedice([6[;]6]);,Rollout,REQUIRE6|EVEN,,GREEN,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Dime_upgraded,Roll 2 sixes|,2,givedice([6[;]6]);,Rollout,EVEN|EVEN,,GREEN,,,,,2,YES,NO,ncr,,,,,,,,,,,,
Sickle,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]1 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,reducesize,change_power,,none,0,NO,NO,ncr,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Sickle_downgraded,Do [shock]<d6> damage,2,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_weakened,Do [shock]<d6> damage,1,attack(d[;]SHOCK); sfxdamage(target[;]d);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,,,,,,,,,
Sickle_deckupgrade,Do [shock]<d6> damage[;]|on <d6>[;] inflict [shock]2 shock,2,attack(d[;]SHOCK); e.setvar(~test~[;]true); if(!e.getvar(~sicknum~) > 0) { e.setvar(~sicknum~[;]d); var j = e.fulldescription.split(~on <d6>~); e.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); for(eq in self.equipment) { if(e.getvar(~test~) == true && eq.getvar(~test~) == true && eq.ready) { if(eq.fulldescription.split(~on ~ + e.getvar(~sicknum~)).length == 1) { eq.fulldescription = j.join(~on ~ + e.getvar(~sicknum~)); eq.setvar(~sicknum~[;]e.getvar(~sicknum~)); eq.animate(~flash~); } eq.setvar(~test~[;]false); break; } } } sfxdamage(target[;]d); if((e.getvar(~sicknum~) != e.fulldescription.substr(28[;]1) - 0) && (e.fulldescription.substr(28[;]1) > 0)) { e.setvar(~sicknum~[;]e.fulldescription.substr(28[;]1) - 0); } trace(e.getvar(~sicknum~)); if(d == e.getvar(~sicknum~) # d == e.fulldescription.substr(28[;]1) - 0) { inflict(SHOCK[;]2); sfx(~_shock~[;]~~[;]0.2); } e.setvar(~test~[;]false);,Electrify,NORMAL,,YELLOW,,,,none,0,NO,NO,ncr,,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,e.fulldescription = ~Do [shock]<d6> damage[~ + ~;]~ + ~#~.substr(0[;]1) + ~on <d6>[~ + ~;] inflict [shock]1 shock~; e.setvar(~sicknum~[;]0);,if(e.fulldescription.split(~on <d6>~).length > 1 && e.getvar(~sicknum~) > 0) { e.fulldescription = e.fulldescription.split(~on <d6>~).join(~on ~ + e.getvar(~sicknum~)); },e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,e.setvar(~oldrow~[;]e.row); e.setvar(~oldcolumn~[;]e.column);,,for(eq in self.equipment) { if(eq.name == e.name && eq.namemodifier == e.namemodifier && (eq.y + 10) >= e.y && (eq.y - 10) <= e.y && (eq.x + 10) >= e.x && (eq.x - 10) <= e.x) { eq.setvar(~test~[;]true); } },,,
Lightreaver,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Lightreaver_upgraded,Deal [sword]<d6> damage. On even[;]|copy a dice for next turn,1,attack(d); sfxdamage(target[;]d); if(d % 2 == 0) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,MIN4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Lightreaver_downgraded,Deal [sword]4 damage. On 4[;]|copy a dice for next turn,1,attack(4); sfxdamage(target[;]4); if(d == 4) { var dicelist = []; for (mydice in self.dicepool){ if (mydice.available()){ dicelist.push(mydice); } } if(dicelist.length > 0) { shuffle(dicelist); inflictself(~stash~+dicelist[0].basevalue); dicelist[0].animate(~flashshake~); inflictself(~ncr_lightswitch~+dicelist[0].basevalue); sfx(~magic~); } },Light Switch,REQUIRE4,,BRIGHTCYAN,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket,Get a new dice[;]|inflict [lock]Lock,1,givedice(); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,change_power,change_function,,,0,NO,NO,ncr,1,,,,,,,,,,,
Locket_upgraded,Get a new dice[;] do [sword]2[;]|inflict [lock]Lock,1,givedice(); attack(2); sfxdamage(target[;]2); inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Locket_downgraded,Inflict [lock]Lock,1,inflict(LOCK); sfx(~_lock~);,Proximity Mine,COUNTDOWN,10,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Biohazard,Inflict [poison]<d6> poison|[gray](once per battle),2,inflict(POISON[;]d); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,change_power,complicate,,,0,NO,YES,ncr,,,,,,,,,,,,
Biohazard_upgraded,Inflict [poison]<d6> poison|[gray](cooldown of 3 turns),2,inflict(POISON[;]d); e.setvar(~biocooldown~[;]3); sfx(~_poison~);,Anthrax,NORMAL,,PURPLE,,,,,0,NO,NO,ncr,,e.setvar(~biocooldown~[;]0);,e.setvar(~biocooldown~[;]0);,if(e.getvar(~biocooldown~) > 0) { e.availablethisturn = false; e.unavailabletext = ~On cooldown~; e.unavailabledetails = [~Available in ~ + e.getvar(~biocooldown~) + ~turns.~]; e.setvar(~biocooldown~[;]e.getvar(~biocooldown~) - 1); },,,,,,,,
Silver Sword,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target|d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Silver Sword_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target|d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Silver Sword_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,2,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); sfxdamage(target|d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); } } } inflict(VAMPIRE);,,,,,,,,,,
Technology,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A little overbearing sometimes''[],1,attack(d); sfxdamage(target|d);,Emulator,MAX4,,YELLOW,change_power,change_function,,,0,NO,NO,ncr,1,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Technology_upgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''A modern quasi-religion''[],1,attack(d); sfxdamage(target|d);,Emulator,NORMAL,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Technology_downgraded,Do [sword]<d6>[;] +1 dmg per turn|[80%][gray]''Technology works.''[],1,attack(d); sfxdamage(target|d);,Emulator,MAX4,,YELLOW,,,,,0,NO,NO,ncr,,,e.changeslots([e.getslots()[0]]);,var g = e.getslots(); if(g.length == 1 && turn > 1) { e.changeslots([g[0][;]~FREE1~]); },,,,var g = e.getslots(); if(g.length == 1) { e.changeslots([g[0][;]~FREE1~]); } else if(g.length == 2) { if(g[1] == ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE1~]); } else { e.changeslots([g[0][;]~FREE~ + ((g[1].split(~FREE~)[1] - 0) + 1)]); } } else if(g.length == 3) { if(g[2] != ~FREE6~) { e.changeslots([g[0][;]~FREE6~[;]~FREE~ + ((g[2].split(~FREE~)[1] - 0) + 1)]); } },,,,
Smoke Signal,Stash dice for next|turn[;] then return it,1,inflictself(~stash~+d[;]1); inflictself(~illuminate~); givedice(d);,Light Switch,MIN4,,RED,simplify,complicate,,,0,YES,NO,ncr,1,,,,,,,,,,,
Loud Yelling,Weaken [weaken]2 equipment,1,inflict(WEAKEN[;]2);,Scream,REQUIRE5,,ORANGE,simplify,change_power,,_weaken,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Yelling_downgraded,Weaken [weaken]1 equipment,1,inflict(WEAKEN);,Scream,REQUIRE5,,ORANGE,,,,_weaken,0,NO,NO,ncr,,,,,,,,,,,,
Loud Brostep,Shock [shock]2 equipment,1,inflict(SHOCK[;]2);,Electrify,REQUIRE5,,YELLOW,simplify,change_power,,_shock,0,NO,NO,ncr,1,,,,,,,,,,,
Loud Brostep_downgraded,Shock [shock]1 equipment,1,inflict(SHOCK);,Electrify,REQUIRE5,,YELLOW,,,,_shock,0,NO,NO,ncr,,,,,,,,,,,,
Raw Energy,Do [vanish]<d6> damage[;]|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); /*inferno*/,Delude,NORMAL|NORMAL,,PINK,change_power,complicate,,_vanish,0,NO,NO,ncr,1,,,,,,,,,,,
Raw Energy_upgraded,Do [vanish]<d6> damage[;]|Inflict [vanish]2 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~[;]2);,Delude,NORMAL|NORMAL,,PINK,,,,_vanish,0,NO,NO,ncr,,,,,,,,,,,,
Sheer Will,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~); bonus(1000); /*burning light*/,Delude,MIN4,,PINK,simplify,change_power,,_vanish,0,NO,NO,ncr,1,,,,,,,,,,,
Sheer Will_downgraded,Deal [vanish]<d6> damage|Inflict [vanish]1 fade,1,sfxdamage(target[;]d); attack(d[;]VANISH); inflict(~fade~);,Delude,MAX3,,PINK,,,,_vanish,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop,Do [sword]3 damage. On 6[;]|drain [heart]2 health instead,1,if(d == 6) { drain(2); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); } /*originally 'on snap; drain 2 health instead' but you will not believe how difficult it is to *replace* the effect of a card on snap rather than adding to it: github.com/TerryCavanagh/diceydungeons.com/issues/1889*/,Rejuvenate,MIN3,,PINK,change_power,change_power,,none,0,NO,NO,ncr,1,,,,,,,,,,,
Bop Bop_upgraded,Do [sword]3 damage. On 6[;]|drain [heart]3 health instead,1,if(d == 6) { drain(3); sfx(~_drain~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,,,,
Bop Bop_downgraded,Do [sword]3 damage. On 6[;]|heal [heart]2 health instead,1,if(d == 6) { attackself(-2); sfx(~_heal~); } else { attack(3); sfxdamage(target[;]3); },Rejuvenate,MIN3,,PINK,,,,none,0,NO,NO,ncr,,,,,,,,,if(d == 6) { e.castdirection = -1; } else { e.castdirection = 1; },,,if(d == 6) { attackself(-2); sfx(~_heal~); }
Magic Axe,Do [sword]<double> damage|[gray](once per battle),1,attack(d / 0.5); sfxdamage(target[;]d / 0.5); /*every day it becomes stranger and stranger that i've never touched drugs in my life*/,Fury,MAX5,,PURPLE,simplify,complicate,,,0,NO,YES,ncr,1,,,,,,,,,,,
Boiling Cauldron,Take [fire]2 damage[;]|get 2 new dice,1,attackself(2[;]FIRE); sfxdamage(self[;]2); sfx(~_fire~); givedice([for(i in 0...2) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,change_power,change_power,,,0,YES,NO,ncr,1,,,,,,,,,,,
Boiling Cauldron_upgraded,Take [fire]3 damage[;]|get 3 new dice,1,attackself(3[;]FIRE); sfxdamage(self[;]3); sfx(~_fire~); givedice([for(i in 0...3) rand([1[;]2[;]3[;]4[;]5[;]6])]);,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Boiling Cauldron_downgraded,Take [fire]1 damage[;]|get a new dice,1,attackself(1[;]FIRE); sfxdamage(self[;]1); sfx(~_fire~); givedice();,Oh Shit!,NORMAL,,RED,,,,,0,YES,NO,ncr,,,,,,,,,,,,
Polarized Cauldron,Do [sword]1 damage|Get a dice of different parity,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_upgraded,Do [sword]1 damage|Get a dice of different parity|,1,attack(1); sfxdamage(target[;]1); if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d % 2 == 0) givedice(rand([1[;]3[;]5])); else givedice(rand([2[;]4[;]6]));
Polarized Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Pulsing Cauldron,Do [sword]1 damage|On low (1-3)[;] get a high dice|On high (4-6)[;] get a low dice,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,1,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_upgraded,Do [sword]1 damage|On 1-3[;] get 4-6. On 4-6[;] get 1-3|,1,attack(1); sfxdamage(target[;]1); if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));,Broken Gadget,NORMAL,,GRAY,,,,,2,NO,NO,ncr,,,,,,,,,,,,if(d < 4) givedice(rand([4[;]5[;]6])); else givedice(rand([1[;]2[;]3]));
Pulsing Cauldron_downgraded,Do [sword]1 damage,1,attack(1); sfxdamage(target[;]1);,Broken Gadget,NORMAL,,GRAY,,,,,0,NO,NO,ncr,,,,,,,,,,,,
Sparkthrower,Do [sword]2 damage|[shock]<timesused> shock[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,change_power,change_power,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Sparkthrower_downgraded,Do [sword]1 damage|[shock]<timesused> shock[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Sparkthrower_upgraded,Do [sword]3 damage|[shock]<timesused> shock[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(SHOCK[;]e.timesused + 1);,,NORMAL,,GREEN,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter,Do [sword]2 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(2); sfxdamage(target[;]2); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,1,,,,,,,,,,,
Earsplitter_downgraded,Do [sword]1 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(1); sfxdamage(target[;]1); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Earsplitter_upgraded,Do [sword]3 damage|[weaken]<timesused> weaken[;] +1 per use,1,attack(3); sfxdamage(target[;]3); inflict(WEAKEN[;]e.timesused + 1);,,NORMAL,,PURPLE,,,,,0,NO,NO,ncr|excludefromrandomlists,,,,,,,,,,,,
Silver Sword@witch,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d); /*reamer pointed this out: if you have no dice manip; get bounty hunter rule; and then have to fight drake with an item that only kills vampires on a number you can't get (steel sword); you're screwed. also i think silver is more associated with warding off vampires than steel is*/,Heat Ray,NORMAL,,GRAY,change_power,change_power,vampire,,0,NO,NO,witchonly|ncr,2,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_downgraded,Do [sword]<d6> damage[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,MIN4,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword@witch_upgraded,Do [sword]<d6> dmg[;] on odd[;]|this can kill vampires,1,if(d % 2 == 1 && target.hp <= d && getstatus(VAMPIRE) > 0) { removestatus(VAMPIRE[;] ALL); } attack(d);,Heat Ray,NORMAL|FREE2,,GRAY,,,,,0,NO,NO,witchonly|ncr,,if(target.innate.indexOf(~vampire~) != -1 && !Rules.hasalternate(~vampire~)) { for(i in 0...target.innate.length) { if(target.innate[i] == ~vampire~) { target.innate[i] = ~can only be killed with a ~ + e.displayname.toLowerCase(); inflict(VAMPIRE); } } },,,,,,,,,,
Silver Sword?@witch,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,ODD|FREE5,,GRAY,change_power,change_power,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,2,,,,,,,,,,,
Silver Sword?@witch_downgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,REQUIRE5|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
Silver Sword?@witch_upgraded,Do [sword]<d6> damage|(to vampires),1,if(target.name == ~Drake~ # target.hasstatus(VAMPIRE)) { attack(d); sfxdamage(target[;]d); } else self.textparticle(~No effect!~);,Heat Ray,FREE5|ODD|FREE5,,GRAY,,,,,0,NO,NO,witchonly|alternateversion|excludefromrandomlists|ncr,,,,,,,,,,,,
[END NCRMOD],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Blighted Zap,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Blighted Zap_upgraded,Do [sword]<d6> damage|Inflict [vanish][purple]Blighted,1,inflict(~Blighted~); attack(d); sfx(~_vanish~); sfxdamage(target[;] d);,Blight,MAX5,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Blighted Zap_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,PURPLE,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Bet,Deal +[sword]1 each attack|until you take [sword]10 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 10) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 1); },,,removestatusself(~Permaboost~[;] 1); removestatusself(~Permadown~[;] 1);,,,,
Bet_upgraded,Deal +[sword]1 each attack|until you take [sword]16 dmg[;]|at which point[;] deal -[sword]1|Current dmg taken: <charge>,1,,,,,,change_power,noeffect,,,0,YES,NO,id|shockavoid|weakenavoid|weakenimmune|excludefromrandomlists,,e.charge = 0;,,sfx(~_thorns~); inflictself(~Permaboost~[;] 1);,if (e.charge >= 16) { removestatusself(~Permaboost~[;] ALL); sfx(~_curse~); inflictself(~Permadown~[;] 2); },,,removestatusself(~Permaboost~[;] 1);,,,,
Roulette,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> damage,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,MAX4,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_upgraded,Do [fire][;] [shock][;] [ice][;] or [weaken]<d6> damage,1,var type = rand([FIRE[;]ICE[;]WEAKEN[;]SHOCK]); attack(d[;] type); sfxdamage(target[;] d);,Random Hit,NORMAL|FREE1,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Roulette_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,PINK,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Countvalanche,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_upgraded,Do [sword]3 damage|Return excess,1,attack(3); sfxdamage(target[;] 3); var total = 0; for (dice in e.dicehistory) { total += dice.basevalue; } givedice(total - e.maxcountdown);,Accelerate,COUNTDOWN,1,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Countvalanche_downgraded,Do [sword]3 damage,1,attack(3); sfxdamage(target[;] 3);,Accelerate,COUNTDOWN,3,,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parry,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parry_downgraded,Gain 1 [nerfed]Parry,1,inflictself(~Parry~); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,8,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_upgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,6,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Double Parry_downgraded,Gain 2 [nerfed]Parry,1,inflictself(~Parry~[;] 2); sfx(~_recycle~[;]~~[;]0.2);,,COUNTDOWN,10,ORANGE,change_power,change_power,,,0,YES,NO,id,,,,,,,,,,,,
Parrying Sword,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX4,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Sword_downgraded,Do [sword]<d6> damage|+1 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~));,,MAX2,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_upgraded,Do [sword]<d6> damage|+2 per [nerfed]Parry on self,1,if(getstatusself(~Parry~) > 0) { attack(getstatusself(~Parry~)*2); } attack(d); sfxdamage(target[;] d); sfxdamage(target[;] getstatusself(~Parry~)*2);,,MAX5,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Parrying Claw_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;] d);,,MAX3,,RED,change_power,change_power,,,0,NO,NO,id,,,,,,,,,,,,
Power Up,Deal [sword]1 extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,REQUIRE1,,RED,change_power,noeffect,,,0,YES,NO,id,1,,,,,,,,,,,
Power Up_upgraded,Deal [sword]<d6> extra dmg|with each attack this turn,1,inflictself(~Damageup~[;] d); sfx(~_thorns~);,,MAX2,,RED,,,,,0,YES,NO,id,,,,,,,,,,,,
Forbidden Magic,Do [sword]<d6> damage[;]|inflict [curse]Curse,1,attack(d); inflict(CURSE); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,change_power,change_power,,,0,NO,NO,id,1,,,,,,,,,,,
Forbidden Magic_upgraded,Do [sword]<d6> damage[;]|inflict [curse]2 curse,1,attack(d); inflict(CURSE[;] 2); sfxdamage(target[;] d); sfx(~_curse~);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Forbidden Magic_downgraded,Do [sword]<d6> damage,1,attack(d) sfxdamage(target[;] d);,,REQUIRE1|REQUIRE1,,GRAY,,,,,0,NO,NO,id,,,,,,,,,,,,
Regen Ale,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,Regenerative Ablity,REQUIRE2,,GREEN,change_power,change_power,,,0,YES,NO,id|regenitem,1,,,,,,,,,,,
Regen Ale_upgraded,Gain [regen]1 regen,1,inflictself(~Regen~[;] 1); sfx(~_cure~); if(self.hp > 1) self.hp -= 1;,,MAX3,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
Regen Ale_downgraded,Heal [heal]2 HP,1,attackself(-2); sfx(~_cure~);,,REQUIRE2,,GREEN,,,,,0,YES,NO,id|regenitem,,,,,,,,,,,,
[END INDEED],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
[BEGIN FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
Vise Flip,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Gadget,DOUBLES|DOUBLES,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,1,,,,,,,,,,,
Vise Flip_upgraded,Return the difference|(Always offered as scrap),1,var bigdice = 0; var smalldice = 7; for(ad in actualdice) { if(ad.basevalue > bigdice) bigdice = ad.basevalue; if(ad.basevalue < smalldice) smalldice = ad.basevalue; } if((bigdice - smalldice) >= 1) givedice(bigdice - smalldice[;] ~combinedice~);,Broken Gadget,NORMAL|NORMAL,,GRAY,change_power,noeffect,,,0,YES,NO,fd|appearsforparts,,,,,,,,,,,,
Poor Yorick,Curse both fighters[;]|count -3 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,,,e.reducecountdownby = 3;,,,,,,
Poor Yorick_upgraded,Curse both fighters[;]|count -4 on each item use,1,inflict(CURSE); inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,,,e.reducecountdownby = 4;,,,,,,
Poor Yorick_downgraded,Curse yourself[;]|count -3 on each item use,1,inflictself(CURSE); sfx(~_curse~[;]~~[;]0.2);,Dramatic Pause,COUNTDOWN,16,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,,,e.reducecountdownby = 3;,,,,,,
Unwanted Present,Confuse enemy,1,inflict(CONFUSE); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Unwanted Present_downgraded,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,12,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Unwanted Present_weakened,Blind enemy,1,inflict(BLIND); sfx(~_blind~[;]~~[;]0.2);,Teleport,COUNTDOWN,9,ORANGE,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Curse Remote,[sword]<d6> dmg[;] consume [curse]Curse|to cast it on the enemy,1,attack(d); sfxdamage(target[;]d); if(self.getvar(~willremovecurse~) == 1) { inflict(CURSE); sfx(~_curse~[;]~~[;]0.1); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,fd,1,,,,,,,,if(getstatusself(CURSE) >= 1) { removestatusself(CURSE); self.setvar(~willremovecurse~[;]1); },,,
Curse Remote_upgraded,[sword]<d6>[;] consume all [curse]Curse|to cast it on the enemy,1,attack(d); self.setvar(~willremovecurse~[;]0); },Cackle,MAX4,,PURPLE,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,if(getstatusself(CURSE) >= 1) { self.setvar(~willremovecurse~[;]getstatusself(CURSE)); removestatusself(CURSE[;]getstatusself(CURSE)); },,,
Luck Prayer,Reduce [curse]Curse odds|this turn to 25%,1,inflictself(~cursesuppressor~); sfx(~useitem~);,Dramatic Pause,EVEN,,PURPLE,simplify,complicate,,,0,YES,NO,fd,1,,,,,,,,,,,
Nimble Hands,Do [sword]<d6>[;] steal an item with|[sword] symbol until next turn,2,attack(d); sfxdamage(target[;]d); if(!simulation){ if(target != null) { var enemyequipment = []; for (eq in target.equipment){ if(!eq.hastag(~cannotsteal~) && eq.availablenextturn && eq.fulldescription.indexOf(~[sword]~) != -1){ enemyequipment.push(eq); } } if(enemyequipment.length > 0){ var randomequipment = rand(enemyequipment); randomequipment.availablenextturn = false; randomequipment.unavailabletext = ~Borrowed~; randomequipment.unavailabledetails = [~Say goodbye to Christmas!~[;]~Signed[;] {enemyname}~]; giveequipment(randomequipment.name + randomequipment.namemodifier); } } } else { bonus(1000 + (self.dicepool.length * 500)); },Reversal,MAX5,,PINK,simplify,complicate,,,0,NO,NO,fd|excludefromrandomlists|cannotsteal|curseavoid|cannotreuse,,,,,,,,,delay(1.0);,,e.preventdefault = true; e.maintainfury = true;,
Heater,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Heater_upgraded,Weaken all equipment|that are cyan,1,inflict(~heater+~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,DOUBLES|DOUBLES,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Heater_downgraded,Weaken all equipment|with [ice] symbol,1,inflict(~heater~); sfx(~_weaken~[;]~~[;]0.2); bonus(1000);,Mumble,REQUIRE3|REQUIRE3,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Sponge@sizesmall,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,if(!flee) giveequipment(~Sponge~[;] true[;] false[;] e);,,,,,,,,,
Sponge,Do [sword]<d6> damage|Size increased,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_upgraded,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,if(!flee) giveequipment(~Falling Anvil+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_upgraded,Do [sword]<d6> damage|Size increaced,2,attack(d); sfxdamage(target[;]d);,Pea Gun,NORMAL|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Sponge@sizesmall_weakened,Do [sword]<d6> damage[;] size|increases after the battle,1,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,if(!flee) giveequipment(~Falling Anvil+~[;] true[;] false[;] e);,,,,,,,,,
Sponge_weakened,Do [sword]<d6> damage|Size increaced,2,attack(d); sfxdamage(target[;]d);,Pea Gun,MAX3|FREE1,,YELLOW,change_power,complicate,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Tableful,At the start of the second|turn[;] everyone heals [heart]4 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,fd|excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-4); attack(-4); sfx(~_heal~); },,,,,,,
Tableful_upgraded,At the start of the second|turn[;] everyone heals [heart]6 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,fd|excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-6); attack(-6); sfx(~_heal~); },,,,,,,
Tableful_downgraded,At the start of the second|turn[;] everyone heals [heart]2 hp|(Always offered as scrap),1,,Regenerate,,,GRAY,change_power,change_power,,none,0,YES,NO,fd|excludefromrandomlists|appearsforparts,,,e.changecolour(~GRAY~);,,if(turn == 2) { e.animate(~flashandshake~); e.changecolour(~BLACK~); attackself(-2); attack(-2); sfx(~_heal~); },,,,,,,
Artificial Snow,Do [ice]<d6> damage[;] on 4[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d == 4) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Artificial Snow_upgraded,Do [ice]<d6> damage[;] on even[;]|swap Broken Gadgets|with Flash Freeze,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); if(d % 2 == 0) Gadget.changegadget(self[;] ~Broken Gadget~[;]~Flash Freeze~);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Artificial Snow_downgraded,Do [ice]<d6> damage,2,attack(d[;]ICE); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,MAX3,,BRIGHTCYAN,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,,,,,,,,
Renunciation,You can't roll <d6>|this fight,1,var totalamount  = 0; for(a in 1...7) { if(getstatusself(~forget~ +a) > 0) { totalamount += 1; } } if(totalamount < 6) { inflictself(~forget~ +d); sfx(~magic_gaindice~[;]~~[;]0.2); } else { self.textparticle(~No effect!~); },Infinity Mirror,ODD,,PURPLE,simplify,complicate,,,0,YES,NO,fd,,,,,,,,,,,,
Flame Whip,Do [fire]<d6> damage[;]|burn yourself,2,attack(d[;]FIRE); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } self.symbolparticle(FIRE); sfx(~_fire~[;]~~[;]0.2);
Flame Whip_upgraded,Do [fire]<d6> damage[;]|roll a burning dice,2,attack(d[;]FIRE); inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);,Blowtorch,NORMAL,,RED,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,inflictself(FIRE); givedice(rand([1[;]2[;]3[;]4[;]5[;]6])); sfx(~_fire~[;]~~[;]0.2); sfxdamage(target[;]d);
Frozen Gloves,Do [ice]<d6> damage[;]|freeze yourself,2,attack(d[;]ICE); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } sfx(~_ice~[;]~~[;]0.1); self.symbolparticle(ICE);
Frozen Gloves_upgraded,Do [ice]<d6> damage[;]|roll a one,2,attack(d[;]ICE); givedice(1); sfxdamage(target[;]d); sfx(~_ice~[;]~~[;]0.1);,Flash Freeze,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,NO,NO,fd,,,,,,,,,,,,givedice(1); sfx(~_ice~[;]~~[;]0.1);
Night By The Fireplace,[90%]When you are hit by fire[;] it|[90%]will heal you instead of damage,1,inflictself(~fireplace~); sfx(~_cure~); sfx(~_cure~);,Cruciroll,COUNTDOWN,12,PINK,threequartercountdown,noeffect,,,0,YES,NO,fd,,,,,,,,,,,,
Keyflare,Do [fire]3 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(3[;]FIRE); sfxdamage(target[;]3); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Keyflare_upgraded,Do [fire]4 damage[;]|return burning <d6>,1,inflictself(FIRE); givedice(d); attack(4[;]FIRE); sfxdamage(target[;]4); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Keyflare_downgraded,Return burning <d6>,1,inflictself(FIRE); givedice(d); sfx(~_fire~[;]~~[;]0.1);,Cruciroll,NORMAL,,RED,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Snowball Launcher,Do [ice]<double> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 2[;]ICE); sfxdamage(target[;]d * 2); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,fd,,,,,,,,,,,,
Snowball Launcher_upgraded,Do [ice]<triple> dmg[;] roll a 1|[gray](Reuseable),1,inflict(ICE); givedice(1); attack(d * 3[;]ICE); sfxdamage(target[;]d * 3); sfx(~_ice~[;]~~[;]0.1);,Very Unlucky Roll,REQUIRE1|REQUIRE1,,BRIGHTCYAN,change_power,removereusable,,,-1,NO,NO,fd,,,,,,,,,,,,
Scoop,Do [sword]<d6> damage|Flip the dice on its side,1,var returnval = [1[;]2[;]3[;]4[;]5[;]6]; returnval.remove(d); returnval.remove(7-d); givedice(rand(returnval)); attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,increaserange,change_function,,,0,NO,NO,fd,,,,,,,,,,,,
Scoop_downgraded,Do [sword]<d6> damage,1,attack(d); sfxdamage(target[;]d);,Random Roll,MAX3,,RED,,,,,0,NO,NO,fd,,,,,,,,,,,,
Snowdrift,Enemy goes first|(Always offered as scrap),1,,Time Stop,,,GRAY,change_power,,,,0,NO,NO,fd|weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },,,,,,,,,,
Snowdrift_upgraded,Enemy goes first[;] but|you take an extra turn (Always offered as scrap),1,,Time Stop,,,GRAY,change_power,weakenavoid|shockavoid,,,0,NO,NO,fd|weakenavoid|shockavoid|excludefromrandomlists|appearsforparts,,if(turn == 1) { target.innate.remove(~goesfirst~); target.innate.push(~goesfirst~); e.animate(~flashandshake~); },if(turn == 1) { e.animate(~flashandshake~); e.changecolour(~BLACK~); inflictself(EXTRATURN); sfx(~_recycle~[;]~~[;]0.1); },,,,,,,,,
Wizard's Hat,Turn the enemy|into an animal,1,var enemylist = [~Loud Bird~[;]~Dire Wolf~[;]~Baby Squid~[;]~Rat King~[;]~Sneezy~[;]~Bear~]; sfx(~_thinghappens~); var lvl = target.level; var totaldice = target.dice; var totalbonusdice =  target.bonusdice; var totalextradice =  target.extradice; var randomanimal = rand(enemylist); if(randomanimal == ~Bear~) { inflict(~instanttransform~); } else { switchenemy(target[;]randomanimal); target.dice == totaldice; target.bonusdice == totalbonusdice; target.extradice == totalextradice; target.level = lvl; },Bearish Spell,COUNTDOWN,14,PINK,threequartercountdown,noeffect,,,0,NO,NO,fd,,,,,,,,,,,,
Bear's Cusre,Turn the enemy into|a bear[;] curse him each turn,2,inflict(~bearcurse~); sfx(~_curse~[;]~~[;]0.1); sfx(~_roar~);,Bearish Spell,COUNTDOWN,20,ORANGE,reducesize,noeffect,,,0,NO,NO,fd,,,,,,,,,,,,
Mortal Sin,Do [sword]<triple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 3); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 3);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_upgraded,Do [sword]<quadruple> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d * 4); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d * 4);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Mortal Sin_downgraded,Do [sword]<d6> damage[;]|if been equipped: [curse]Cursed|until the end of the game,2,attack(d); sfx(~_curse~[;]~~[;]0.1); sfxdamage(target[;]d);,Redemption,NORMAL,,PURPLE,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,,,e.animate(~flashandshake~); if(self.getvar(~sin~) != 1) { self.setvar(~sin~[;]1); Rules.addextrascript(~if(self.getvar(\~sin\~) == 1) {inflictself(CURSE);sfx(\~_curse\~[;]\~\~[;]0.2); }~[;] ~onstartturn~); },,,,,,,
Spare Parts,Permanently delete random|equipment[;] make a gadget out of it,1,if(!simulation){ if(target != null) { var selfequipment = []; var scrapequipment = []; for (eq in self.equipment){ if(!eq.hastag(~appearsforparts~) && !eq.hastag(~skillcard~) && eq.ready){ selfequipment.push(eq); } }  for (eq in self.equipment){ if(eq.hastag(~appearsforparts~) && eq.ready){ scrapequipment.push(eq) ; } } if(scrapequipment.length > 0){ var randomscrapequipment = rand(scrapequipment); randomscrapequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomscrapequipment.gadget[;]true); removeequipment(randomscrapequipment[;]self); } else if(selfequipment.length > 0){ var randomequipment = rand(selfequipment); randomequipment.animate(~delete~); sfx(~jester_delete~[;]~~[;]0.2); Gadget.givegadget(self[;]randomequipment.gadget[;]true); removeequipment(randomequipment[;]self); } } } else { bonus(-1000); self.textparticle(~No effect!~); },Stardust,COUNTDOWN,8,GRAY,halfcountdown,noeffect,,,0,YES,NO,fd,,,,,,,,,,,,
Sticker,Combine dice|[gray](Reuseable),1,for(ad in actualdice) { if(ad.basevalue == 6) bonus(-1000); } if(d >= 1) givedice(d[;] ~combinedice~);,Magic Spanner,MAX2|MAX2,,GREEN,increaserange,removereusable,,,3,YES,NO,fd,1,,,,,,,,,,,
Contract,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]12 gold,2,if(self.gold > 12){ self.gold -= 12 ; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,fd|excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 12) { Rules.upgradeplayerequipment = true; },,,
Contract_upgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]9 gold,2,if(self.gold > 9){ self.gold -= 9; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,fd|excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 9) { Rules.upgradeplayerequipment = true; },,,
Contract_downgraded,[95%]All equipment you find will|[95%]be upgraded. Cost: [gold]24 gold,2,if(self.gold > 24){ self.gold -= 24; screenshake(); removeequipment(self[;]e); for(eq in self.equipment) { if(eq.name == e.name) { removeequipment(self[;]eq); self.setvar(~contract~[;]1); } else { self.textparticle(~Can't afford!~); },Harvest,COUNTDOWN,24,YELLOW,change_power,change_power,,,0,YES,NO,fd|excludefromrandomlists|cannotsteal|showgold,,,,,,,,,if(self.gold > 24) { Rules.upgradeplayerequipment = true; },,,
Better Yourself,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,DOUBLES|DOUBLES,,YELLOW,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Better Yourself_upgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,EVEN,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Better Yourself_downgraded,Do [sword]1. If this is the final|blow[;] get [confuse]2 more exp,1,attack(1); sfxdamage(target[;]1); if(target.hp <= 0){ target.level = target.level + 2; sfx(~_cure~[;]~~[;]0.1); },Stress,REQUIRE6|REQUIRE6,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Creative Crisis,[95%]Don't create new gadgets[newline][95%]after this fight,1,if(!simulation){ inflictself(~creativecrisis~); screenshake(); sfx(~upgradeequipment~); e.changeslots([]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight [gray](activated)~; var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } },Randomizer,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,YES,NO,fd|cannotsteal|excludefromrandomlists,,e.setvar(~sourceequipment~[;]e); Rules.inventor_inspiration = true; e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight~;,e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this fight~; e.resetvar(~sourceequipment~);,e.setvar(~sourceequipment~[;]e);,,,,,,,,
Creative Crisis_downgraded,No effect,1,,Randomizer,,,PURPLE,change_power,change_power,,,0,YES,NO,fd|cannotsteall|excludefromrandomlists,,,,,,,,,,,,
Consumerism,[95%]Create an additional gadget|[95%]after this fight (stacks),1,inflictself(~consumerism~); screenshake(); sfx(~upgradeequipment~);,Perfect Cut,COUNTDOWN,10,PINK,halfcountdown,noeffect,,,0,YES,NO,fd|cannotsteall|excludefromrandomlists,,,Rules.inventor_setgadgets(2 + getstatusself(~consumerism~));,,,,,,,,,
Petri Dish,Do [sword]2 damage[;] copy|Petri Dish after the battle,1,attack(2); sfxdamage(target[;]2);,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_upgraded,Do [sword]2 damage[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,attack(2); sfxdamage(target[;]2);,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Petri Dish_downgraded,No effect[;] copy|Petri Dish after the battle,1,,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish~[;] true[;] false);,,,,,,,,,
Petri Dish_weakened,No effect[;] copy|Petri Dish+ after the battle|(Always offered as scrap),1,,Stardust,COUNTDOWN,5,GRAY,change_power,change_power,,,0,NO,NO,fd|excludefromrandomlists|appearsforparts,,,if(!flee && self.spaceleft() >= 1) giveequipment(~Petri Dish+~[;] true[;] false);,,,,,,,,,
Iron Helmet,Add [shield]<double> shield[;] in two|turns[;] take [sword]<double> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;](d * 2)); inflictself(SHIELD[;]d * 2); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_upgraded,Add [shield]<double> shield[;] in two|turns[;] take [sword]<d6> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;]d); inflictself(SHIELD[;]d * 2); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Iron Helmet_downgraded,Add [shield]<d6> shield[;] in two|turns[;] take [sword]<double> dmg,2,jinx(e.name + e.namemodifier[;]~take [sword]%VAR% damage~[;]~Take [sword]%VAR% damage~[;]~attack(%VAR%); sfxdamage(target[;]%VAR%);~[;]self[;]self[;]2[;](d * 2)); inflictself(SHIELD[;]d); sfx(~_shield~[;]~~[;]0.1); sfx(~_thinghappens~);,Pillow Fort,NORMAL,,ORANGE,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Creative Crisis_upgraded,[95%]Don't create new gadgets[newline][95%]after this fight (save the previous gadgets),1,if(!simulation){ inflictself(~creativecrisis+~); screenshake(); sfx(~upgradeequipment~); e.changeslots([]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle[;][gray](activated)~; var sourceequipment = e.getvar(~sourceequipment~); if(sourceequipment != null && sourceequipment != e) { sourceequipment.animate(~flashandshake~); sourceequipment.changeslots([]); sourceequipment.fulldescription = e.fulldescription; } },Randomizer,REQUIRE6|REQUIRE6,,PURPLE,change_power,change_power,,,0,YES,NO,fd|cannotsteal,,e.setvar(~sourceequipment~[;]e); Rules.inventor_inspiration = true; e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle (save the previous gadgets)~;,e.changeslots([~REQUIRE6~[;]~REQUIRE6~]); e.fulldescription = ~[95%]Don't create new gadgets[newline][95%]after this battle~; e.resetvar(~sourceequipment~);,e.setvar(~sourceequipment~[;]e);,,,,,,,,
Dune,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,ODD,,ORANGE,change_power,change_power,,,0,NO,NO,fd,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_downgraded,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,REQUIRE5,,ORANGE,,,,,0,NO,NO,fd,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Dune_upgraded,Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,NORMAL,,ORANGE,,,,,0,NO,NO,fd,,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~;,self.setvar(~weakencharge~[;]2); e.fulldescription = ~Do [sword]2 damage[comma] +[sword]2[newline]every time it is weakened~;,e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]0);,,,,,,,,
Dune_weakened,Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened,1,attack(self.getvar(~weakencharge~)); sfxdamage(target[;]self.getvar(~weakencharge~));,Burrower,MAX3,,ORANGE,,,,,0,NO,NO,fd,,,,,self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); e.fulldescription = ~Do [sword]<var:weakencharge> damage[comma] +[sword]2[newline]every time it is weakened~; self.setvar(~weakenimmune~[;]1);,,,,,,,
Boar Spear,Do [sword]<d6> damage[;]|[fire]Burn and [shock]Shock both,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(FIRE); delay(0.3);,Blowtorch,MAX4,,RED,simplify,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Boar Spear_downgraded,Do [sword]<d6> damage[;]|[95%][fire]Burn and [shock]Shock yourself,1,attack(d); if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && !mydice.burn) { mydice.animate(FIRE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_fire~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Blowtorch,REQUIRE5,,RED,simplify,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Stabbing Blade,Do [sword]<d6> damage[;]|[ice]Freeze and [shock]Shock both,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); inflict(SHOCK); inflict(ICE); delay(0.3);,Flash Freeze,MAX4,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Stabbing Blade_downgraded,Do [sword]<d6> damage[;]|[95%][ice]Freeze and [shock]Shock yourself,1,attack(d); var highestvalue = 0; if (self.dicepool.length > 0) { for (mydice in self.dicepool) { if (mydice.available() && mydice.basevalue > highestvalue && !mydice.burn) { highestvalue = mydice.basevalue; } } } if(highestvalue > 0) { for (mydice in self.dicepool) { if (mydice.basevalue == highestvalue) { mydice.animate(ICE); break; } } } inflictself(SHOCK); self.applyequipmentcurses(); sfx(~_ice~[;]~~[;]0.1); sfx(~_shock~[;]~~[;]0.1); sfxdamage(target[;]d); delay(0.3);,Flash Freeze,REQUIRE5,,BRIGHTCYAN,simplify,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Shock Absorber,[90%]Unshock all shocked equipment[comma]|[90%]do [shock]<d6> per each unshocked,1,if (self.equipment.length > 0) { var dmgamount = 0; var unshockdelay = 2; for (eq in self.equipment) { if (eq.shockedsetting > 0) { eq.unshockingtimer = unshockdelay * 0.1; dmgamount += 1; unshockdelay += 2; } } if(dmgamount > 0) { bonus(100000); attack(dmgamount * d[;]SHOCK); sfxdamage(target[;]dmgamount * d); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Jackhammer,MAX3,,YELLOW,increaserange,decreaserange,,,0,NO,NO,fd,1,,,,,,,,,,,
Banhammer,Do [shock]9 damage|(Gain [shock]6 shock if not used),2,attack(9[;]SHOCK); sfxdamage(target[;]9); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Banhammer_downgraded,Do [shock]6 damage|(Gain [shock]6 shock if not used),2,attack(6[;]SHOCK); sfxdamage(target[;]6); sfx(~_shock~[;]~~[;]0.1);,Zap,COUNTDOWN,12,YELLOW,threequartercountdown,change_power,,,0,NO,NO,fd,,,,,,,,if(e.timesused == 0) { jinx(e.name + e.namemodifier[;]~gain [shock]6 shock~[;]~Gain [shock]6 shock~[;]~inflict(SHOCK[;]%VAR%);sfx(\~_shock\~[;]\~\~[;]0.2);~[;]self[;]self[;]1[;]6); } else { e.timesused = 0; },,,,
Aftershock,[95%]Roll a dice per each shocked|[95%]equipment you have,1,if (self.equipment.length > 0) { var dicepush = []; for (eq in self.equipment) { if (eq.shockedsetting > 0) { dicepush.push(rand([1[;]2[;]3[;]4[;]5[;]6])); } } if(dicepush.length > 0) { bonus(100000); givedice(dicepush); sfx(~_shock~[;]~~[;]0.1); delay(0.3); } else { bonus(-1000); } },Zap,EVEN,,YELLOW,simplify,complicate,,,0,YES,NO,fd,,,,,,,,,,,,
Evangel,Do [weaken]<d6> damage|75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
Evangel_upgraded,Do [weaken]<d6> damage|75% chance to gain [weaken]3,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; } if(chance(odds)) { self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); eqlist.remove(itemtoweakensec); } if(eqlist.length > 2) { var itemtoweakenth = rand(eqlist); if(itemtoweakenth.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakenth.animate(WEAKEN); eqlist.remove(itemtoweakenth); } } attack(d[;] WEAKEN); sfxdamage(target[;]d); sfx(~_weaken~[;]~~[;]0.1);,Theremin,MAX5,,ORANGE,,,,,0,NO,NO,fd,,,,,,,,,,,,
Evangel_downgraded,75% chance to gain [weaken]2,1,var odds = 75; if(getstatusself(~luck~) > 0 # getstatusself(~luck+~) > 0){ odds = 100; }self.textparticle(~Success...~); var eqlist = []; for(eq in self.equipment) { if(!eq.weakened && eq.ready && eq.availablethisturn) { eqlist.push(eq); } } if(eqlist.length > 0) { var itemtoweaken = rand(eqlist); if(itemtoweaken.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweaken.animate(WEAKEN); eqlist.remove(itemtoweaken); } if(eqlist.length > 1) { var itemtoweakensec = rand(eqlist); if(itemtoweakensec.name == ~Dune~) { self.setvar(~weakencharge~[;]self.getvar(~weakencharge~) + 2); } itemtoweakensec.animate(WEAKEN); } },Theremin,MAX5,,ORANGE,,,,,0,YES,NO,fd,,,,,,,,,,,,
Clock Hands,Reduce countdown on|all equipment by half,1,if(!simulation){ var selfequipment = []; sfx(~useitem~); for (eq in self.equipment){ if(eq.countdown > 1 && eq.slots.indexOf(~COUNTDOWN~) == 0 && eq.availablethisturn && eq.ready){ selfequipment.push(eq); } } if(selfequipment.length > 0){ boostcountdowns(0); for(eq in selfequipment) { eq.reducecountdownby = eq.remainingcountdown * 0.5; } } else { bonus(1000 + (self.dicepool.length * 500)); } },Accelerate,REQUIRE6,,GREEN,simplify,complicate,,,0,YES,NO,fd,,,,,,,,,,,,
Haunted House,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_upgraded,Do [sword]15 damage[;] reset|countdown if not used,2,attack(15); sfxdamage(target[;]15);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,e.remainingcountdown = 15;,,,,,,,,
Haunted House_downgraded,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,20,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,e.remainingcountdown = 20;,,,,,,,,
Haunted House_weakened,Do [sword]10 damage[;] reset|countdown if not used,2,attack(10); sfxdamage(target[;]10);,Accelerate,COUNTDOWN,15,PURPLE,change_power,change_power,,,0,NO,NO,fd,,,,e.remainingcountdown = 15;,,,,,,,,
Dullplicate,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,DOUBLES|DOUBLES,,GREEN,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Dullplicate_downgraded,Duplicate all unused <slotdoubles>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,REQUIRE1,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Dullplicate_upgraded,Duplicate all unused <d6>s,1,var extradice = []; for (mydice in self.dicepool){ if (mydice.available()){ if (mydice.basevalue == d){ extradice.push(d); } } } givedice(extradice);,Clone Device,NORMAL,,GREEN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Arcsine,First dice +1[comma] second dice -1|[gray](Reuseable),1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Random Roll,DOUBLES|DOUBLES,,GREEN,change_power,removereusable,,,3,YES,NO,fd,1,,,,,,,,,,,
Arcsine_upgraded,First dice +1[comma] second dice -1|[gray](Reuseable),1,var dicearray = []; dicearray.push(actualdice[0].basevalue + 1); if(actualdice[1].basevalue - 1 > 0) { dicearray.push(actualdice[1].basevalue - 1); } if(dicearray[0] == 7) { dicearray[0] = 6; dicearray.push(1); }givedice(dicearray);,Random Roll,DOUBLES|DOUBLES,,GREEN,change_power,removereusable,,,4,YES,NO,fd,,,,,,,,,,,,
LOL Sword,XD,1,var odds = 20; if(getstatusself(~luck~) > 0){ odds = 10; } if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = rand([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL,,YELLOW,change_power,change_power,,,0,NO,NO,fd,1,,,,,,,,,,,
LOL Sword_downgraded,ha ha very funny,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,MAX3,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
LOL Sword_upgraded,LMAO,1,var odds = 10; if(getstatusself(~luck~) > 0){ odds = 5; if(getstatusself(~luck+~) > 0){ odds = 0; } if(chance(odds)) { sfx(~use_dodge_status_to_avoid~); } else { var randsfx = ([~_plasma~[;]~_metals~[;]~_magic~[;]~_whooshweapons~]); sfx(randsfx); attack(d); if(self.isplayer) { if(d < 4) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_damage~[;]~~[;]0.1); } } else { if(d < 4) { sfx(~_takedamage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~~[;]0.1); } } },Broken Gadget,NORMAL|FREE1,,YELLOW,change_power,change_power,,,0,NO,NO,fd,,,,,,,,,,,,
Honey Pot,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 3 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,fd|witchonly,1,,,,,,,,,,,
Honey Pot_upgraded,Move itself to slot <d6>. If[newline] a slot was filled[comma] roll 4 dice,1,if(!Spellbook.isempty(d) && Spellbook.spellname(d) != e.name) { for(q in 1...4) { if(q == self.getvar(~currentspellbook~)) { for(i in 1...7) { if(Spellbook.spellname(i) == e.name) { Spellbook.erase(i); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } else { for(i in 1...7) { if(self.getvar(~spellbook~+q+~slot~+i) == e.name) { self.setvar(~spellbook~+q+~slot~+i[;]~Empty slot~); givedice([rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])[;]rand([1[;]2[;]3[;]4[;]5[;]6])]); Spellbook.changespellflash(d[;]e.name); break; } } } } } else { self.textparticle(~No effect!~); },,NORMAL,,BRIGHTCYAN,change_power,complicate,,,0,YES,NO,fd|witchonly,,,,,,,,,,,,
Christmas Bell,-1 to dice value|(Cost [mana]1[]: roll a one),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BLUE,change_power,change_power,,,0,YES,NO,fd,1,,,,,,,,,,,
Christmas Bell_downgraded,-1 to dice value,1,givedice(d - 1);,Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Christmas Bell_upgraded,-1 to dice value|(Cost [mana]1[]: also duplicate),1,if(getstatusself(MANA) >= 1) { removestatusself(MANA[;]1); givedice([d - 1[;]d - 1]); } else { givedice(d - 1); },Perfect Cut,MIN2,,BRIGHTCYAN,change_power,change_power,,,0,YES,NO,fd,,,,,,,,,,,,
Coffee Pot,Do [sword]1 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(1); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,fd,1,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_upgraded,Do [sword]2 damage[comma] reroll dice|(Cost [mana]1[]: re-use this spell),1,attack(2); givedice(); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,fd,,,self.setvar(~piratehookkludge~[;]0);,,,,,,var furykludge = false; if(self.gamevar != null) { if(self.gamevar.exists(~piratehookkludge~)) { if(self.getvar(~piratehookkludge~) == 1){ self.setvar(~piratehookkludge~[;]0); furykludge = true; } } } if(self.hasstarus(MANA) && !furykludge) { inflictself(REEQUIPNEXT); sfx(~_magic~); sfx(~_useitem~[;]~~[;]0.1); },,if(self.hasstatus(MANA)) self.setvar(~piratehookkludge~[;]1);,
Coffee Pot_downgraded,Do [sword]1 damage[comma]|roll a new dice,1,attack(1); givedice(); givedice([d - 1[;]1]); if(self.isplayer) { sfx(~_damage~[;]~light~[;]0.1); } else { sfx(~_takedamage~[;]~light~[;]0.1); },Efficiency,NORMAL,,YELLOW,change_power,change_power,reequipnext,,0,NO,NO,fd,,,,,,,,,,,,
[END FURTHERDUNGEONS],,1,,,,,,,,,,0,NO,NO,internal|excludefromrandomlists,,,,,,,,,,,,
